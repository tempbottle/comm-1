var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"generics":["dense"],"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["bytes"] = {"doc":"","items":[[3,"ByteBuf","bytes","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a write cursor. When reads and writes reach the end of the allocated buffer, wraps around to the start.",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[3,"Take","","",null,null],[3,"Bytes","","A specialized `ByteStr` box.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr` values, without copying the data in the pieces. The concatenation is represented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[4,"BufError","","",null,null],[13,"Underflow","","",0,null],[13,"Overflow","","",0,null],[0,"alloc","","",null,null],[3,"Heap","bytes::alloc","",null,null],[3,"MemRef","","",null,null],[3,"Mem","","Memory allocated by an Allocator must be prefixed with Mem",null,null],[5,"heap","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"memref"}}],[11,"allocate","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",1,null],[11,"allocate","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",1,null],[8,"Allocator","","Allocates memory to be used by Bufs or Bytes. Allows allocating memory using alternate stratgies than the default Rust heap allocator. Also does not require that allocations are continuous in memory.",null,null],[10,"allocate","","Allocate memory. May or may not be contiguous.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"memref"}}],[10,"deallocate","","Deallocate a chunk of memory",2,null],[11,"new","","",3,null],[11,"none","","",3,{"inputs":[],"output":{"name":"memref"}}],[11,"is_none","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ptr","","",3,null],[11,"bytes","","",3,null],[11,"bytes_mut","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"memref"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",4,null],[0,"buf","bytes","",null,null],[3,"ByteBuf","bytes::buf","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a write cursor. When reads and writes reach the end of the allocated buffer, wraps around to the start.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[3,"Take","","",null,null],[11,"from_slice","bytes","Create a new `ByteBuf` by copying the contents of the given slice.",5,null],[11,"mut_with_capacity","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"mutbytebuf"}}],[11,"none","","",5,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"from_mem_ref","","",5,{"inputs":[{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bytebuf"}}],[11,"capacity","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"flip","","",5,{"inputs":[{"name":"self"}],"output":{"name":"mutbytebuf"}}],[11,"resume","","Flips the buffer back to mutable, resetting the write position to the byte after the previous write.",5,{"inputs":[{"name":"self"}],"output":{"name":"mutbytebuf"}}],[11,"read_slice","","",5,null],[11,"to_seq_byte_str","","",5,{"inputs":[{"name":"self"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"remaining","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",5,null],[11,"advance","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_slice","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_mem_ref","","",6,{"inputs":[{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"robytebuf"}}],[11,"to_seq_byte_str","","",6,{"inputs":[{"name":"self"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"remaining","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",6,null],[11,"advance","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_slice","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"capacity","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"flip","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bytebuf"}}],[11,"clear","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"write_slice","","",7,null],[11,"bytes","","",7,null],[11,"remaining","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Allocates a new `RingBuf` with the specified capacity.",8,{"inputs":[{"name":"usize"}],"output":{"name":"ringbuf"}}],[11,"is_full","","Returns `true` if the buf cannot accept any further writes.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns `true` if the buf cannot accept any further reads.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","Returns the number of bytes that the buf can hold.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"mark","","Marks the current read location.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Resets all internal state to the initial state.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ringbuf"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remaining","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",8,null],[11,"advance","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remaining","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",8,null],[11,"read","","",8,null],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wrap","","",9,null],[11,"remaining","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",9,null],[11,"advance","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"wrap","","",10,null],[11,"remaining","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"take"}}],[11,"into_inner","","",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"limit","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remaining","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",11,null],[11,"advance","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read","","",11,null],[11,"remaining","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"mut_bytes","","",11,null],[11,"advance","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[8,"Buf","bytes::buf","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length between 0 and `Buf::remaining()`.",12,null],[10,"advance","","Advance the internal cursor of the Buf",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true if there are any more bytes to consume",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by the number of bytes read. Returns the number of bytes read.",12,null],[11,"read_byte","","Read a single byte from the `Buf`",12,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[8,"BufExt","","An extension trait providing extra functions applicable to all `Buf` values.",null,null],[10,"read","","Read bytes from this Buf into the given sink and advance the cursor by the number of bytes read.",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["usize"],"name":"result"}}],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be written to the MutBuf",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"advance","","Advance the internal cursor of the MutBuf",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true iff there is any more space for bytes to be written",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current MutBuf position and of length between 0 and `MutBuf::remaining()`.",14,null],[11,"write_slice","","Write bytes from the given slice into the `MutBuf` and advance the cursor by the number of bytes written. Returns the number of bytes written.",14,null],[11,"write_byte","","Write a single byte to the `MuBuf`",14,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[8,"MutBufExt","","An extension trait providing extra functions applicable to all `MutBuf` values.",null,null],[10,"write","","Write bytes from the given source into the current `MutBuf` and advance the cursor by the number of bytes written.",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["usize"],"name":"result"}}],[8,"Sink","","A value that reads bytes from a Buf into itself",null,null],[16,"Error","","",16,null],[10,"sink","","",16,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize"],"name":"result"}}],[8,"Source","","A value that writes bytes from itself into a `MutBuf`.",null,null],[16,"Error","","",17,null],[10,"fill","","",17,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read","bytes","",5,null],[11,"read","","",6,null],[11,"read","","",18,null],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"str","","",null,null],[3,"Bytes","bytes::str","A specialized `ByteStr` box.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr` values, without copying the data in the pieces. The concatenation is represented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[11,"from_slice","bytes","",19,null],[11,"of","","",19,{"inputs":[{"name":"b"}],"output":{"name":"bytes"}}],[11,"empty","","",19,{"inputs":[],"output":{"name":"bytes"}}],[11,"downcast_ref","","If the underlying `ByteStr` is of type `B`, returns a reference to it otherwise None.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_unwrap","","If the underlying `ByteStr` is of type `B`, returns the unwraped value, otherwise, returns the original `Bytes` as `Err`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"result"}}],[11,"buf","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["buf"],"name":"box"}}],[11,"concat","","",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","",19,null],[11,"to_bytes","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"index","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"drop","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"from_slice","","",20,null],[11,"of","","Returns a Rope consisting of the supplied Bytes as a single segment.",20,{"inputs":[{"name":"b"}],"output":{"name":"rope"}}],[11,"len","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"buf","","",20,{"inputs":[{"name":"self"}],"output":{"name":"ropebuf"}}],[11,"concat","","",20,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"index","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"rope"}}],[11,"remaining","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",18,null],[11,"advance","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"from_slice","","Create a new `SeqByteStr` from a byte slice.",21,null],[11,"from_mem_ref","","Creates a new `SeqByteStr` from a `MemRef`, an offset, and a length.",21,{"inputs":[{"name":"memref"},{"name":"u32"},{"name":"u32"}],"output":{"name":"seqbytestr"}}],[11,"buf","","",21,{"inputs":[{"name":"self"}],"output":{"name":"robytebuf"}}],[11,"concat","","",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"index","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"seqbytestr"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"smallbytestr"}}],[11,"zero","","",22,{"inputs":[],"output":{"name":"smallbytestr"}}],[11,"from_slice","","",22,null],[11,"as_slice","","",22,null],[11,"buf","","",22,{"inputs":[{"name":"self"}],"output":{"name":"smallbytestrbuf"}}],[11,"concat","","",22,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"index","","",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"smallbytestrbuf"}}],[11,"remaining","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",23,null],[11,"advance","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[8,"ByteStr","bytes::str","An immutable sequence of bytes. Operations will not mutate the original value. Since only immutable access is permitted, operations do not require copying (though, sometimes copying will happen as an optimization).",null,null],[16,"Buf","","",24,null],[10,"buf","","Returns a read-only `Buf` for accessing the byte contents of the `ByteStr`.",24,null],[10,"concat","","Returns a new `Bytes` value representing the concatenation of `self` with the given `Bytes`.",24,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bytes"}}],[10,"len","","Returns the number of bytes in the ByteStr",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the length of the `ByteStr` is 0",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"slice","","Returns a new ByteStr value containing the byte range between `begin` (inclusive) and `end` (exclusive)",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_from","","Returns a new ByteStr value containing the byte range starting from `begin` (inclusive) to the end of the byte str.",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a new ByteStr value containing the byte range from the start up to `end` (exclusive).",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","Divides the value into two `Bytes` at the given index.",24,null],[8,"ToBytes","","",null,null],[10,"to_bytes","","Consumes the value and returns a `Bytes` instance containing identical bytes",25,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"eq","bytes","",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[0,"traits","","All traits are re-exported here to allow glob imports.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"buferror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"BufError"],[3,"Heap"],[8,"Allocator"],[3,"MemRef"],[3,"Mem"],[3,"ByteBuf"],[3,"ROByteBuf"],[3,"MutByteBuf"],[3,"RingBuf"],[3,"SliceBuf"],[3,"MutSliceBuf"],[3,"Take"],[8,"Buf"],[8,"BufExt"],[8,"MutBuf"],[8,"MutBufExt"],[8,"Sink"],[8,"Source"],[3,"RopeBuf"],[3,"Bytes"],[3,"Rope"],[3,"SeqByteStr"],[3,"SmallByteStr"],[3,"SmallByteStrBuf"],[8,"ByteStr"],[8,"ToBytes"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["comm"] = {"doc":"","items":[[0,"address","comm","",null,null],[3,"Address","comm::address","An `Address` can be used to address anything that is `Addressable`. `Node`s, for example, have an `Address`. Every `client::messages::TextMessage` has an `Address` as well.",null,null],[17,"LENGTH","","",null,null],[8,"Addressable","","Anything that needs to be uniquely addressed can implement `Addressable`.",null,null],[10,"address","","The `Address` where `self` resides.",0,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"for_content","","Hashes `content` into an `Address`. Current implementation is to take the SHA1 digest of `content`, but this is subject to change and should not be depended on.",1,{"inputs":[{"name":"str"}],"output":{"name":"address"}}],[11,"from_numeric","","Creates an `Address` from its numeric representation. Useful for randomly generating `Address`es within a range.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"address"}}],[11,"from_str","","Creates a `Address` from its hexidecimal string representation. `string` must be hexidecimal or an `Err` will be returned.",1,{"inputs":[{"name":"str"}],"output":{"generics":["address","fromhexerror"],"name":"result"}}],[11,"null","","The null `Address`. Use to address \"nothing.\" No `Node`, message, or any `Addressable` thing should ever reside at the null address. It's useful for bootstrapping a `network::Network` when one does not know the address of any peers, but has connection details to them such as an IP address and port.",1,{"inputs":[],"output":{"name":"address"}}],[11,"random","","Randomly generates an `Address` within the address space between `min` and `max`. Useful for refreshing a `NodeBucket` by performing a find node operation on a random address within its range.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"address"}}],[11,"as_numeric","","The numeric representation of an `Address`. Useful for partitioning the `Node`s in a `NodeBucket` into two new buckets.",1,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"distance_from","","The address space distance of `self` from `other`. Computed as the XOR of their numeric representations.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"biguint"}}],[11,"to_str","","The string representation of an `Address`. Useful for displaying, exporting outside of Rust, serializing into a protobuf, etc.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"client","comm","",null,null],[3,"Client","comm::client","A `Client` handles receiving, processing, relaying, etc. of messages in the communication network. It internalizes all the complex logic that is specific to messaging, and exposes a few commands view a `TaskSender` and events via `Events`.",null,null],[4,"Task","","A command for the Client to execute immediately.",null,null],[13,"HandleNetworkEvent","","Handle events emitted by the `Network`, e.g. handling packets that we receive.",2,null],[13,"ScheduleMessageDelivery","","Schedules a message to be delivered.",2,null],[13,"Shutdown","","Shuts down the `Client`. When it has completed the shutdown procedure, it will emit an `Event::Shutdown`.",2,null],[4,"ScheduledTask","","A task to be performed some time in the future",null,null],[13,"DeliverMessage","","Deliver a message to an address. This can be a message we are sending to someone else, or just a message we're relaying.",3,null],[4,"Event","","Events emitted to any listeners registered with `register_event_listener`. They represent various client-level events.",null,null],[13,"ReceivedTextMessage","","We've received a message that was addressed to us",4,null],[13,"SentTextMessage","","We've sent or relayed a message",4,null],[13,"ReceivedMessageAcknowledgement","","We've received an acknowledgement for a message we sent",4,null],[13,"Shutdown","","The client has shut down",4,null],[13,"Started","","`Network` has started running. This does not necessary guarantee that we are \"connected\" to the network, because we haven't necessarily sent/received any messages. It just indicates that the `Network` is open for business.",4,null],[0,"messages","","",null,null],[3,"TextMessage","comm::client::messages","",null,null],[12,"id","","",5,null],[12,"sender","","",5,null],[12,"text","","",5,null],[3,"MessageAcknowledgement","","",null,null],[12,"message_id","","",6,null],[3,"Envelope","","",null,null],[12,"recipient","","",7,null],[12,"message","","",7,null],[4,"Message","","",null,null],[13,"TextMessage","","",8,null],[13,"MessageAcknowledgement","","",8,null],[5,"decode","","",null,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"envelope"}}],[0,"protobufs","","",null,null],[3,"TextMessage","comm::client::messages::protobufs","",null,null],[3,"MessageAcknowledgement","","",null,null],[3,"Envelope","","",null,null],[4,"Envelope_Type","","",null,null],[13,"TEXT_MESSAGE","","",9,null],[13,"MESSAGE_ACKNOWLEDGEMENT","","",9,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"textmessage"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"textmessage"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"textmessage"}}],[11,"default_instance","","",10,{"inputs":[],"output":{"name":"textmessage"}}],[11,"clear_id","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_id","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_id","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_id","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_id","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_id","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_sender","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_sender","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_sender","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_sender","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_sender","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_sender","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_text","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_text","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_text","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_text","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_text","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_text","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",10,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",10,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",10,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"as_any","","",10,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"descriptor","","",10,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"textmessage"}}],[11,"descriptor_static","","",10,{"inputs":[{"generics":["textmessage"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"textmessage"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messageacknowledgement"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"messageacknowledgement"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"messageacknowledgement"}}],[11,"default_instance","","",11,{"inputs":[],"output":{"name":"messageacknowledgement"}}],[11,"clear_message_id","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message_id","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message_id","","",11,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_message_id","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_message_id","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_message_id","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",11,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",11,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",11,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"as_any","","",11,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"descriptor","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"messageacknowledgement"}}],[11,"descriptor_static","","",11,{"inputs":[{"generics":["messageacknowledgement"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"messageacknowledgement"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"envelope"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"envelope"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"envelope"}}],[11,"default_instance","","",12,{"inputs":[],"output":{"name":"envelope"}}],[11,"clear_message_type","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message_type","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message_type","","",12,{"inputs":[{"name":"self"},{"name":"envelope_type"}],"output":null}],[11,"get_message_type","","",12,{"inputs":[{"name":"self"}],"output":{"name":"envelope_type"}}],[11,"clear_recipient","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"has_recipient","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_recipient","","",12,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_recipient","","",12,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_recipient","","",12,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_recipient","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_text_message","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"has_text_message","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_text_message","","",12,{"inputs":[{"name":"self"},{"name":"textmessage"}],"output":null}],[11,"mut_text_message","","",12,{"inputs":[{"name":"self"}],"output":{"name":"textmessage"}}],[11,"take_text_message","","",12,{"inputs":[{"name":"self"}],"output":{"name":"textmessage"}}],[11,"get_text_message","","",12,{"inputs":[{"name":"self"}],"output":{"name":"textmessage"}}],[11,"clear_message_acknowledgement","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message_acknowledgement","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message_acknowledgement","","",12,{"inputs":[{"name":"self"},{"name":"messageacknowledgement"}],"output":null}],[11,"mut_message_acknowledgement","","",12,{"inputs":[{"name":"self"}],"output":{"name":"messageacknowledgement"}}],[11,"take_message_acknowledgement","","",12,{"inputs":[{"name":"self"}],"output":{"name":"messageacknowledgement"}}],[11,"get_message_acknowledgement","","",12,{"inputs":[{"name":"self"}],"output":{"name":"messageacknowledgement"}}],[11,"is_initialized","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",12,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",12,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",12,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",12,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",12,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"as_any","","",12,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"descriptor","","",12,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"envelope"}}],[11,"descriptor_static","","",12,{"inputs":[{"generics":["envelope"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"envelope"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"envelope_type"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"envelope_type"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"value","","",9,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",9,{"inputs":[{"name":"i32"}],"output":{"generics":["envelope_type"],"name":"option"}}],[11,"values","","",9,null],[11,"enum_descriptor_static","","",9,{"inputs":[{"generics":["envelope_type"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"fmt","comm::client::messages","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"textmessage"}}],[11,"new","","",5,{"inputs":[{"name":"address"},{"name":"string"}],"output":{"name":"textmessage"}}],[11,"envelope","","",5,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"envelope"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"messageacknowledgement"}}],[11,"new","","",6,{"inputs":[{"name":"address"}],"output":{"name":"messageacknowledgement"}}],[11,"envelope","","",6,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"envelope"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"envelope"}}],[11,"encode","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[6,"TaskSender","comm::client","A sender for issuing commands to the `Client`. Once a client is `run`, it is consumed and methods cannot be called on it. A `TaskSender` as the asynchronous interface for controlling a running `Client`.",null,null],[6,"Events","","A receiver for receiving events from a running `Client`. Similar in purpose to `TaskSender`. A running `Client` is consumed and cannot be queried via method calls. You must instead subscribe to events it emits",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Client`. `address` is the address of this client, i.e. where other clients should send messages intended for this client.",13,{"inputs":[{"name":"address"}],"output":{"name":"client"}}],[11,"run","","Starts a `Client` in its own thread and returns its task sender. This method consumes the `Client`, so all event listeners must be registered first.",13,{"inputs":[{"name":"self"},{"name":"network"}],"output":{"name":"tasksender"}}],[11,"register_event_listener","","Registers an event listener that should be sent every `Event` the client emits.",13,{"inputs":[{"name":"self"},{"generics":["event"],"name":"sender"}],"output":null}],[11,"notify","","",13,{"inputs":[{"name":"self"},{"name":"eventloop"},{"name":"task"}],"output":null}],[11,"timeout","","",13,{"inputs":[{"name":"self"},{"name":"eventloop"},{"name":"scheduledtask"}],"output":null}],[0,"messages","comm","",null,null],[0,"protobufs","comm::messages","",null,null],[3,"Node","comm::messages::protobufs","",null,null],[3,"FindNodeQuery","","",null,null],[3,"FindNodeResponse","","",null,null],[3,"PingQuery","","",null,null],[3,"PingResponse","","",null,null],[3,"PacketQuery","","",null,null],[3,"PacketResponse","","",null,null],[3,"Envelope","","",null,null],[4,"Envelope_Type","","",null,null],[13,"FIND_NODE_QUERY","","",14,null],[13,"FIND_NODE_RESPONSE","","",14,null],[13,"PING_QUERY","","",14,null],[13,"PING_RESPONSE","","",14,null],[13,"PACKET_QUERY","","",14,null],[13,"PACKET_RESPONSE","","",14,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"node"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"node"}}],[11,"default_instance","","",15,{"inputs":[],"output":{"name":"node"}}],[11,"clear_id","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"has_id","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_id","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_id","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_id","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_id","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_ip_address","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ip_address","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ip_address","","",15,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_ip_address","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_ip_address","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_ip_address","","",15,null],[11,"clear_port","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"has_port","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_port","","",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_port","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",15,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",15,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",15,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",15,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",15,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"as_any","","",15,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"descriptor","","",15,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"node"}}],[11,"descriptor_static","","",15,{"inputs":[{"generics":["node"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"findnodequery"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"findnodequery"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"findnodequery"}}],[11,"default_instance","","",16,{"inputs":[],"output":{"name":"findnodequery"}}],[11,"clear_origin","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"has_origin","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_origin","","",16,{"inputs":[{"name":"self"},{"name":"node"}],"output":null}],[11,"mut_origin","","",16,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"take_origin","","",16,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"get_origin","","",16,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"clear_target","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"has_target","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_target","","",16,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_target","","",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_target","","",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_target","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",16,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",16,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",16,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",16,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",16,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"as_any","","",16,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"descriptor","","",16,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"findnodequery"}}],[11,"descriptor_static","","",16,{"inputs":[{"generics":["findnodequery"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"findnodequery"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"findnoderesponse"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"findnoderesponse"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"findnoderesponse"}}],[11,"default_instance","","",17,{"inputs":[],"output":{"name":"findnoderesponse"}}],[11,"clear_origin","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_origin","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_origin","","",17,{"inputs":[{"name":"self"},{"name":"node"}],"output":null}],[11,"mut_origin","","",17,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"take_origin","","",17,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"get_origin","","",17,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"clear_nodes","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"set_nodes","","",17,{"inputs":[{"name":"self"},{"generics":["node"],"name":"repeatedfield"}],"output":null}],[11,"mut_nodes","","",17,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_nodes","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["node"],"name":"repeatedfield"}}],[11,"get_nodes","","",17,null],[11,"is_initialized","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",17,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",17,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",17,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",17,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",17,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"as_any","","",17,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"descriptor","","",17,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"findnoderesponse"}}],[11,"descriptor_static","","",17,{"inputs":[{"generics":["findnoderesponse"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"findnoderesponse"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"pingquery"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"pingquery"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"pingquery"}}],[11,"default_instance","","",18,{"inputs":[],"output":{"name":"pingquery"}}],[11,"clear_origin","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"has_origin","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_origin","","",18,{"inputs":[{"name":"self"},{"name":"node"}],"output":null}],[11,"mut_origin","","",18,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"take_origin","","",18,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"get_origin","","",18,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"is_initialized","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",18,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",18,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",18,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",18,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",18,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"as_any","","",18,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"descriptor","","",18,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"pingquery"}}],[11,"descriptor_static","","",18,{"inputs":[{"generics":["pingquery"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"pingquery"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"pingresponse"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"pingresponse"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"pingresponse"}}],[11,"default_instance","","",19,{"inputs":[],"output":{"name":"pingresponse"}}],[11,"clear_origin","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_origin","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_origin","","",19,{"inputs":[{"name":"self"},{"name":"node"}],"output":null}],[11,"mut_origin","","",19,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"take_origin","","",19,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"get_origin","","",19,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"is_initialized","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",19,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",19,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",19,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",19,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",19,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"as_any","","",19,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"descriptor","","",19,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"pingresponse"}}],[11,"descriptor_static","","",19,{"inputs":[{"generics":["pingresponse"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"pingresponse"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"packetquery"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"packetquery"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"packetquery"}}],[11,"default_instance","","",20,{"inputs":[],"output":{"name":"packetquery"}}],[11,"clear_origin","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_origin","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_origin","","",20,{"inputs":[{"name":"self"},{"name":"node"}],"output":null}],[11,"mut_origin","","",20,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"take_origin","","",20,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"get_origin","","",20,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"clear_payload","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_payload","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_payload","","",20,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_payload","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_payload","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_payload","","",20,null],[11,"is_initialized","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",20,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",20,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",20,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",20,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",20,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"as_any","","",20,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"descriptor","","",20,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"packetquery"}}],[11,"descriptor_static","","",20,{"inputs":[{"generics":["packetquery"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"packetquery"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"packetresponse"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"packetresponse"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"packetresponse"}}],[11,"default_instance","","",21,{"inputs":[],"output":{"name":"packetresponse"}}],[11,"clear_origin","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_origin","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_origin","","",21,{"inputs":[{"name":"self"},{"name":"node"}],"output":null}],[11,"mut_origin","","",21,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"take_origin","","",21,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"get_origin","","",21,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"is_initialized","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",21,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",21,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",21,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",21,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",21,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"as_any","","",21,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"descriptor","","",21,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"packetresponse"}}],[11,"descriptor_static","","",21,{"inputs":[{"generics":["packetresponse"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"packetresponse"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"envelope"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"envelope"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"envelope"}}],[11,"default_instance","","",22,{"inputs":[],"output":{"name":"envelope"}}],[11,"clear_message_type","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message_type","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message_type","","",22,{"inputs":[{"name":"self"},{"name":"envelope_type"}],"output":null}],[11,"get_message_type","","",22,{"inputs":[{"name":"self"}],"output":{"name":"envelope_type"}}],[11,"clear_transaction_id","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_transaction_id","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_transaction_id","","",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_transaction_id","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_find_node_query","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_find_node_query","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_find_node_query","","",22,{"inputs":[{"name":"self"},{"name":"findnodequery"}],"output":null}],[11,"mut_find_node_query","","",22,{"inputs":[{"name":"self"}],"output":{"name":"findnodequery"}}],[11,"take_find_node_query","","",22,{"inputs":[{"name":"self"}],"output":{"name":"findnodequery"}}],[11,"get_find_node_query","","",22,{"inputs":[{"name":"self"}],"output":{"name":"findnodequery"}}],[11,"clear_find_node_response","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_find_node_response","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_find_node_response","","",22,{"inputs":[{"name":"self"},{"name":"findnoderesponse"}],"output":null}],[11,"mut_find_node_response","","",22,{"inputs":[{"name":"self"}],"output":{"name":"findnoderesponse"}}],[11,"take_find_node_response","","",22,{"inputs":[{"name":"self"}],"output":{"name":"findnoderesponse"}}],[11,"get_find_node_response","","",22,{"inputs":[{"name":"self"}],"output":{"name":"findnoderesponse"}}],[11,"clear_ping_query","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ping_query","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ping_query","","",22,{"inputs":[{"name":"self"},{"name":"pingquery"}],"output":null}],[11,"mut_ping_query","","",22,{"inputs":[{"name":"self"}],"output":{"name":"pingquery"}}],[11,"take_ping_query","","",22,{"inputs":[{"name":"self"}],"output":{"name":"pingquery"}}],[11,"get_ping_query","","",22,{"inputs":[{"name":"self"}],"output":{"name":"pingquery"}}],[11,"clear_ping_response","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ping_response","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ping_response","","",22,{"inputs":[{"name":"self"},{"name":"pingresponse"}],"output":null}],[11,"mut_ping_response","","",22,{"inputs":[{"name":"self"}],"output":{"name":"pingresponse"}}],[11,"take_ping_response","","",22,{"inputs":[{"name":"self"}],"output":{"name":"pingresponse"}}],[11,"get_ping_response","","",22,{"inputs":[{"name":"self"}],"output":{"name":"pingresponse"}}],[11,"clear_packet_query","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_packet_query","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_packet_query","","",22,{"inputs":[{"name":"self"},{"name":"packetquery"}],"output":null}],[11,"mut_packet_query","","",22,{"inputs":[{"name":"self"}],"output":{"name":"packetquery"}}],[11,"take_packet_query","","",22,{"inputs":[{"name":"self"}],"output":{"name":"packetquery"}}],[11,"get_packet_query","","",22,{"inputs":[{"name":"self"}],"output":{"name":"packetquery"}}],[11,"clear_packet_response","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_packet_response","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_packet_response","","",22,{"inputs":[{"name":"self"},{"name":"packetresponse"}],"output":null}],[11,"mut_packet_response","","",22,{"inputs":[{"name":"self"}],"output":{"name":"packetresponse"}}],[11,"take_packet_response","","",22,{"inputs":[{"name":"self"}],"output":{"name":"packetresponse"}}],[11,"get_packet_response","","",22,{"inputs":[{"name":"self"}],"output":{"name":"packetresponse"}}],[11,"is_initialized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",22,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",22,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",22,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",22,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",22,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"as_any","","",22,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"descriptor","","",22,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"envelope"}}],[11,"descriptor_static","","",22,{"inputs":[{"generics":["envelope"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"envelope"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"envelope_type"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"envelope_type"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",14,{"inputs":[{"name":"i32"}],"output":{"generics":["envelope_type"],"name":"option"}}],[11,"values","","",14,null],[11,"enum_descriptor_static","","",14,{"inputs":[{"generics":["envelope_type"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[0,"incoming","comm::messages","",null,null],[4,"Query","comm::messages::incoming","",null,null],[13,"FindNode","","",23,null],[13,"Packet","","",23,null],[13,"Ping","","",23,null],[4,"Response","","",null,null],[13,"FindNode","","",24,null],[13,"Packet","","",24,null],[13,"Ping","","",24,null],[4,"Message","","",null,null],[13,"Query","","",25,null],[13,"Response","","",25,null],[5,"parse_from_reader","","",null,{"inputs":[{"name":"read"}],"output":{"generics":["message","str"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"outgoing","comm::messages","",null,null],[5,"create_find_node_query","comm::messages::outgoing","",null,{"inputs":[{"name":"transactionid"},{"name":"node"},{"name":"address"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"create_find_node_response","","",null,{"inputs":[{"name":"transactionid"},{"name":"node"},{"generics":["node"],"name":"vec"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"create_ping_query","","",null,{"inputs":[{"name":"transactionid"},{"name":"node"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"create_ping_response","","",null,{"inputs":[{"name":"transactionid"},{"name":"node"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"create_packet_query","","",null,{"inputs":[{"name":"transactionid"},{"name":"node"},{"generics":["u8"],"name":"vec"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"create_packet_response","","",null,{"inputs":[{"name":"transactionid"},{"name":"node"}],"output":{"generics":["u8"],"name":"vec"}}],[0,"network","comm","",null,null],[3,"Network","comm::network","",null,null],[4,"Event","","",null,null],[13,"ReceivedPacket","","",26,null],[13,"Shutdown","","",26,null],[13,"Started","","",26,null],[4,"OneshotTask","","",null,null],[13,"Incoming","","",27,null],[13,"StartBootstrap","","",27,null],[13,"SendPacket","","",27,null],[13,"Shutdown","","",27,null],[4,"ScheduledTask","","",null,null],[13,"ContinueBootstrap","","",28,null],[13,"ContinueHealthCheck","","",28,null],[13,"ContinueRefresh","","",28,null],[6,"TaskSender","","",null,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",29,{"inputs":[{"name":"address"},{"name":"t"},{"generics":["node"],"name":"vec"}],"output":{"name":"network"}}],[11,"run","","",29,{"inputs":[{"name":"self"}],"output":{"name":"tasksender"}}],[11,"register_event_listener","","",29,{"inputs":[{"name":"self"},{"generics":["event"],"name":"sender"}],"output":null}],[0,"node","comm","",null,null],[3,"Node","comm::node","A `Node` is a peer in the network. It represents another network participant such as ourself. It has an address, and a means to be sent messages. When we receive messages, they come from other nodes.",null,null],[4,"Status","","",null,null],[13,"Good","","",30,null],[13,"Questionable","","",30,null],[13,"Bad","","",30,null],[5,"deserialize","","Deserialize a `Node` from a protobuf.",null,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[17,"FAILED_TO_RESPOND_THRESHOLD","","The maximum number of queries sent without a response before a node is considered bad.",null,null],[17,"MINUTES_UNTIL_QUESTIONABLE","","A node becomes questionable if it hasn't been heard from in this many minutes.",null,null],[8,"Serialize","","Anything that needs to be serialized for transfer or storage.",null,null],[10,"serialize","","",31,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"from_socket_addrs","","",32,{"inputs":[{"name":"address"},{"name":"s"}],"output":{"generics":["node","string"],"name":"result"}}],[11,"is_bad","","Whether the node should be considered bad or unreliable. A bad node has not been heard from in the last `MINUTES_UNTIL_QUESTIONABLE` minutes, and hasn't responded to at least `FAILED_TO_RESPOND_THRESHOLD` queries.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_questionable","","Whether the node is questionable and should therefore be pinged. A questionable node SHOULD still be sent relevant queries, and SHOULD be given every benefit of being treated as if it were good. Questionable only means that we don't know whether it's still good, and we should ask it.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"last_seen","","The last time we received either a query or a response from a node.",32,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"pending_query_count","","How many unanswered queries we've sent to a node.",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"received_query","","Update the `last_received_query` timestamp for a node. Any time the network receives a query from a node, this method should be called, passing in the query's `TransactionId`.",32,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":null}],[11,"received_response","","Update the `last_received_response` timestamp if we're indeed waiting for a response to a query we previously sent with a TID of `transaction_id`.",32,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":null}],[11,"send","","Send an encoded message to a node via its UDP socket.",32,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"sent_query","","Records that we're expecting a response from this node for the TID `transaction_id`.",32,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":null}],[11,"update_connection","","Update the socket address and port of a node. This is useful for when a node disconnects and reconnects to the internet, or changes IP addresses, etc.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize","","",32,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"address","","",32,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"node_bucket","comm","",null,null],[3,"NodeBucket","comm::node_bucket","",null,null],[4,"InsertOutcome","","",null,null],[13,"Inserted","","",33,null],[13,"Updated","","",33,null],[13,"Discarded","","",33,null],[6,"InsertionResult","","",null,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"insertoutcome"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",34,{"inputs":[{"name":"usize"}],"output":{"name":"nodebucket"}}],[11,"any_bad_nodes","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",34,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"covers","","",34,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"find_node","","",34,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["node"],"name":"option"}}],[11,"get_nodes","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["node"],"name":"vec"}}],[11,"questionable_nodes","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["node"],"name":"vec"}}],[11,"insert","","",34,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"is_full","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"last_changed","","",34,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"needs_refresh","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"random_address_in_space","","",34,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"remove_worst_node","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"split","","",34,null],[0,"routing_table","comm","",null,null],[3,"RoutingTable","comm::routing_table","",null,null],[4,"InsertOutcome","","",null,null],[13,"Ignored","","",35,null],[13,"Inserted","","",35,null],[13,"Updated","","",35,null],[13,"Discarded","","",35,null],[6,"InsertionResult","","",null,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"insertoutcome"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",36,{"inputs":[{"name":"usize"},{"name":"address"},{"generics":["node"],"name":"vec"}],"output":{"name":"routingtable"}}],[11,"insert","","",36,{"inputs":[{"name":"self"},{"name":"node"},{"name":"node"},{"name":"transactionidgenerator"}],"output":{"name":"insertionresult"}}],[11,"bucket_needing_refresh","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["nodebucket"],"name":"option"}}],[11,"find_node","","",36,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["node"],"name":"option"}}],[11,"nearest","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["node"],"name":"vec"}}],[11,"nearest_live_nodes_to","","",36,{"inputs":[{"name":"self"},{"name":"address"},{"name":"bool"}],"output":{"generics":["node"],"name":"vec"}}],[11,"questionable_nodes","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["node"],"name":"vec"}}],[0,"stun","comm","",null,null],[5,"get_mapped_address","comm::stun","",null,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["socketaddr","string"],"name":"result"}}],[0,"transaction","comm","",null,null],[3,"TransactionIdGenerator","comm::transaction","",null,null],[6,"TransactionId","","",null,null],[11,"new","","",37,{"inputs":[],"output":{"name":"transactionidgenerator"}}],[11,"generate","","",37,{"inputs":[{"name":"self"}],"output":{"name":"transactionid"}}]],"paths":[[8,"Addressable"],[3,"Address"],[4,"Task"],[4,"ScheduledTask"],[4,"Event"],[3,"TextMessage"],[3,"MessageAcknowledgement"],[3,"Envelope"],[4,"Message"],[4,"Envelope_Type"],[3,"TextMessage"],[3,"MessageAcknowledgement"],[3,"Envelope"],[3,"Client"],[4,"Envelope_Type"],[3,"Node"],[3,"FindNodeQuery"],[3,"FindNodeResponse"],[3,"PingQuery"],[3,"PingResponse"],[3,"PacketQuery"],[3,"PacketResponse"],[3,"Envelope"],[4,"Query"],[4,"Response"],[4,"Message"],[4,"Event"],[4,"OneshotTask"],[4,"ScheduledTask"],[3,"Network"],[4,"Status"],[8,"Serialize"],[3,"Node"],[4,"InsertOutcome"],[3,"NodeBucket"],[4,"InsertOutcome"],[3,"RoutingTable"],[3,"TransactionIdGenerator"]]};
searchIndex["crypto"] = {"doc":"","items":[[0,"aead","crypto","",null,null],[8,"AeadEncryptor","crypto::aead","",null,null],[10,"encrypt","","",0,null],[8,"AeadDecryptor","","",null,null],[10,"decrypt","","",1,null],[0,"aes","crypto","",null,null],[4,"KeySize","crypto::aes","AES key size",null,null],[13,"KeySize128","","",2,null],[13,"KeySize192","","",2,null],[13,"KeySize256","","",2,null],[5,"ecb_encryptor","","Get the best implementation of an EcbEncryptor",null,null],[5,"ecb_decryptor","","Get the best implementation of an EcbDecryptor",null,null],[5,"cbc_encryptor","","Get the best implementation of a CbcEncryptor",null,null],[5,"cbc_decryptor","","Get the best implementation of a CbcDecryptor",null,null],[5,"ctr","","Get the best implementation of a Ctr",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"keysize"}}],[0,"aes_gcm","crypto","",null,null],[3,"AesGcm","crypto::aes_gcm","",null,null],[11,"new","","",3,null],[11,"encrypt","","",3,null],[11,"decrypt","","",3,null],[0,"aessafe","crypto","The `aessafe` module implements the AES algorithm completely in software without using any table lookups or other timing dependant mechanisms. This module actually contains two seperate implementations - an implementation that works on a single block at a time and a second implementation that processes 8 blocks in parallel. Some block encryption modes really only work if you are processing a single blocks (CFB, OFB, and CBC encryption for example) while other modes are trivially parallelizable (CTR and CBC decryption). Processing more blocks at once allows for greater efficiency, especially when using wide registers, such as the XMM registers available in x86 processors.",null,null],[3,"AesSafe128Encryptor","crypto::aessafe","",null,null],[3,"AesSafe128Decryptor","","",null,null],[3,"AesSafe192Encryptor","","",null,null],[3,"AesSafe192Decryptor","","",null,null],[3,"AesSafe256Encryptor","","",null,null],[3,"AesSafe256Decryptor","","",null,null],[3,"AesSafe128EncryptorX8","","",null,null],[3,"AesSafe128DecryptorX8","","",null,null],[3,"AesSafe192EncryptorX8","","",null,null],[3,"AesSafe192DecryptorX8","","",null,null],[3,"AesSafe256EncryptorX8","","",null,null],[3,"AesSafe256DecryptorX8","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"aessafe128encryptor"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"aessafe128decryptor"}}],[11,"new","","",4,null],[11,"new","","",5,null],[11,"block_size","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",4,null],[11,"block_size","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"aessafe192encryptor"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"aessafe192decryptor"}}],[11,"new","","",6,null],[11,"new","","",7,null],[11,"block_size","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",6,null],[11,"block_size","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"aessafe256encryptor"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"aessafe256decryptor"}}],[11,"new","","",8,null],[11,"new","","",9,null],[11,"block_size","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",8,null],[11,"block_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"aessafe128encryptorx8"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"aessafe128decryptorx8"}}],[11,"new","","",10,null],[11,"new","","",11,null],[11,"block_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",10,null],[11,"block_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"aessafe192encryptorx8"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"aessafe192decryptorx8"}}],[11,"new","","",12,null],[11,"new","","",13,null],[11,"block_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",12,null],[11,"block_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"aessafe256encryptorx8"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"aessafe256decryptorx8"}}],[11,"new","","",14,null],[11,"new","","",15,null],[11,"block_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",14,null],[11,"block_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",15,null],[0,"bcrypt","crypto","",null,null],[5,"bcrypt","crypto::bcrypt","",null,null],[0,"bcrypt_pbkdf","crypto","",null,null],[5,"bcrypt_pbkdf","crypto::bcrypt_pbkdf","",null,null],[0,"blake2b","crypto","",null,null],[3,"Blake2b","crypto::blake2b","",null,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"blake2b"}}],[11,"new","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"blake2b"}}],[11,"new_keyed","","",16,null],[11,"reset","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"blake2b","","",16,null],[11,"reset","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"input","","",16,null],[11,"result","","",16,null],[11,"output_bits","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"input","","Process input data.",16,null],[11,"reset","","Reset the Mac state to begin processing another input stream.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","Obtain the result of a Mac computation as a MacResult.",16,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",16,null],[11,"output_bytes","","Get the size of the Mac code, in bytes.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"blake2s","crypto","",null,null],[3,"Blake2s","crypto::blake2s","",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"blake2s"}}],[11,"new","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"blake2s"}}],[11,"new_keyed","","",17,null],[11,"reset","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"blake2s","","",17,null],[11,"reset","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"input","","",17,null],[11,"result","","",17,null],[11,"output_bits","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"input","","Process input data.",17,null],[11,"reset","","Reset the Mac state to begin processing another input stream.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","Obtain the result of a Mac computation as a MacResult.",17,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",17,null],[11,"output_bytes","","Get the size of the Mac code, in bytes.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"blockmodes","crypto","",null,null],[3,"NoPadding","crypto::blockmodes","No padding mode for ECB and CBC encryption",null,null],[3,"PkcsPadding","","PKCS padding mode for ECB and CBC encryption",null,null],[3,"EncPadding","","Wraps a PaddingProcessor so that only pad_input() will actually be called.",null,null],[3,"DecPadding","","Wraps a PaddingProcessor so that only strip_output() will actually be called.",null,null],[3,"EcbEncryptor","","ECB Encryption mode",null,null],[3,"EcbDecryptor","","ECB Decryption mode",null,null],[3,"CbcEncryptor","","CBC encryption mode",null,null],[3,"CbcDecryptor","","CBC decryption mode",null,null],[3,"CtrMode","","CTR Mode",null,null],[3,"CtrModeX8","","CTR Mode that operates on 8 blocks at a time",null,null],[8,"PaddingProcessor","","A PaddingProcessor handles adding or removing padding",null,null],[10,"pad_input","","Add padding to the last block of input data If the mode can't handle a non-full block, it signals that error by simply leaving the block as it is which will be detected as an InvalidLength error.",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[10,"strip_output","","Remove padding from the last block of output data If false is returned, the processing fails",18,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"nopadding"}}],[11,"pad_input","","",19,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"strip_output","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"pkcspadding"}}],[11,"pad_input","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"strip_output","","",20,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"pad_input","","",21,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"strip_output","","",21,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"pad_input","","",22,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"strip_output","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"new","","Create a new ECB encryption mode object",23,{"inputs":[{"name":"t"},{"name":"x"}],"output":{"generics":["encpadding"],"name":"ecbencryptor"}}],[11,"reset","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"encrypt","","",23,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"new","","Create a new ECB decryption mode object",24,{"inputs":[{"name":"t"},{"name":"x"}],"output":{"generics":["decpadding"],"name":"ecbdecryptor"}}],[11,"reset","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"decrypt","","",24,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"new","","Create a new CBC encryption mode object",25,{"inputs":[{"name":"t"},{"name":"x"},{"generics":["u8"],"name":"vec"}],"output":{"generics":["encpadding"],"name":"cbcencryptor"}}],[11,"reset","","",25,null],[11,"encrypt","","",25,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"new","","Create a new CBC decryption mode object",26,{"inputs":[{"name":"t"},{"name":"x"},{"generics":["u8"],"name":"vec"}],"output":{"generics":["decpadding"],"name":"cbcdecryptor"}}],[11,"reset","","",26,null],[11,"decrypt","","",26,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"new","","Create a new CTR object",27,{"inputs":[{"name":"a"},{"generics":["u8"],"name":"vec"}],"output":{"name":"ctrmode"}}],[11,"reset","","",27,null],[11,"process","","",27,null],[11,"encrypt","","",27,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",27,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"new","","Create a new CTR object that operates on 8 blocks at a time",28,null],[11,"reset","","",28,null],[11,"process","","",28,null],[11,"encrypt","","",28,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",28,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[0,"blowfish","crypto","",null,null],[3,"Blowfish","crypto::blowfish","",null,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"blowfish"}}],[11,"new","","",29,null],[11,"init_state","","",29,{"inputs":[],"output":{"name":"blowfish"}}],[11,"expand_key","","",29,null],[11,"salted_expand_key","","",29,null],[11,"encrypt","","",29,null],[11,"block_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",29,null],[11,"block_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",29,null],[0,"buffer","crypto","",null,null],[3,"RefReadBuffer","crypto::buffer","",null,null],[3,"OwnedReadBuffer","","",null,null],[3,"RefWriteBuffer","","",null,null],[3,"BorrowedWriteBuffer","","",null,null],[3,"OwnedWriteBuffer","","",null,null],[4,"BufferResult","","",null,null],[13,"BufferUnderflow","","",30,null],[13,"BufferOverflow","","",30,null],[8,"ReadBuffer","","",null,null],[10,"is_empty","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_full","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"remaining","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"capacity","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"position","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"rewind","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"truncate","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"reset","","",31,{"inputs":[{"name":"self"}],"output":null}],[10,"peek_next","","",31,null],[11,"peek_remaining","","",31,null],[10,"take_next","","",31,null],[11,"take_remaining","","",31,null],[11,"push_to","","",31,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[8,"WriteBuffer","","",null,null],[10,"is_empty","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_full","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"remaining","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"capacity","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"position","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"rewind","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"reset","","",32,{"inputs":[{"name":"self"}],"output":null}],[10,"peek_read_buffer","","",32,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[10,"take_next","","",32,null],[11,"take_remaining","","",32,null],[10,"take_read_buffer","","",32,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bufferresult"}}],[11,"new","","",33,null],[11,"is_empty","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"truncate","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_next","","",33,null],[11,"take_next","","",33,null],[11,"new","","",34,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"ownedreadbuffer"}}],[11,"new_with_len","","",34,{"inputs":[{"generics":["u8"],"name":"vec"},{"name":"usize"}],"output":{"name":"ownedreadbuffer"}}],[11,"into_write_buffer","","",34,{"inputs":[{"name":"self"}],"output":{"name":"ownedwritebuffer"}}],[11,"borrow_write_buffer","","",34,{"inputs":[{"name":"self"}],"output":{"name":"borrowedwritebuffer"}}],[11,"is_empty","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"truncate","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_next","","",34,null],[11,"take_next","","",34,null],[11,"new","","",35,null],[11,"is_empty","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",35,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_read_buffer","","",35,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",35,null],[11,"take_read_buffer","","",35,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"is_empty","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_read_buffer","","",36,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",36,null],[11,"take_read_buffer","","",36,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"new","","",37,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"ownedwritebuffer"}}],[11,"into_read_buffer","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ownedreadbuffer"}}],[11,"is_empty","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",37,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_read_buffer","","",37,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",37,null],[11,"take_read_buffer","","",37,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[0,"chacha20","crypto","",null,null],[3,"ChaCha20","crypto::chacha20","",null,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"chacha20"}}],[11,"new","","",38,null],[11,"new_xchacha20","","",38,null],[11,"process","","",38,null],[11,"encrypt","","",38,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",38,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[0,"chacha20poly1305","crypto","",null,null],[3,"ChaCha20Poly1305","crypto::chacha20poly1305","",null,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"chacha20poly1305"}}],[11,"new","","",39,null],[11,"encrypt","","",39,null],[11,"decrypt","","",39,null],[0,"curve25519","crypto","",null,null],[3,"Fe","crypto::curve25519","",null,null],[12,"0","","",40,null],[3,"GeP2","","",null,null],[3,"GeP3","","",null,null],[3,"GeP1P1","","",null,null],[3,"GePrecomp","","",null,null],[3,"GeCached","","",null,null],[5,"ge_scalarmult_base","","",null,null],[5,"sc_reduce","","",null,null],[5,"sc_muladd","","",null,null],[5,"curve25519","","",null,null],[5,"curve25519_base","","",null,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"fe"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"fe"}],"output":{"name":"bool"}}],[11,"add","","",40,{"inputs":[{"name":"self"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"sub","","",40,{"inputs":[{"name":"self"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"mul","","",40,{"inputs":[{"name":"self"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"from_bytes","","",40,null],[11,"to_bytes","","",40,null],[11,"maybe_swap_with","","",40,{"inputs":[{"name":"self"},{"name":"fe"},{"name":"i32"}],"output":null}],[11,"maybe_set","","",40,{"inputs":[{"name":"self"},{"name":"fe"},{"name":"i32"}],"output":null}],[11,"invert","","",40,{"inputs":[{"name":"self"}],"output":{"name":"fe"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"gep2"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"gep3"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"gep1p1"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"geprecomp"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"gecached"}}],[11,"to_bytes","","",41,null],[11,"double_scalarmult_vartime","","",41,null],[11,"from_bytes_negate_vartime","","",42,null],[11,"to_bytes","","",42,null],[11,"add","","",42,{"inputs":[{"name":"self"},{"name":"gecached"}],"output":{"name":"gep1p1"}}],[11,"add","","",42,{"inputs":[{"name":"self"},{"name":"geprecomp"}],"output":{"name":"gep1p1"}}],[11,"sub","","",42,{"inputs":[{"name":"self"},{"name":"gecached"}],"output":{"name":"gep1p1"}}],[11,"sub","","",42,{"inputs":[{"name":"self"},{"name":"geprecomp"}],"output":{"name":"gep1p1"}}],[11,"maybe_set","","",44,{"inputs":[{"name":"self"},{"name":"geprecomp"},{"name":"i32"}],"output":null}],[11,"select","","",44,{"inputs":[{"name":"usize"},{"name":"i8"}],"output":{"name":"geprecomp"}}],[0,"digest","crypto","",null,null],[8,"Digest","crypto::digest","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2 family of digest functions.",null,null],[10,"input","","Provide message data.",46,null],[10,"result","","Retrieve the digest result. This method may be called multiple times.",46,null],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more data.",46,{"inputs":[{"name":"self"}],"output":null}],[10,"output_bits","","Get the output size in bits.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"output_bytes","","Get the output size in bytes.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"block_size","","Get the block size in bytes.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"input_str","","Convenience function that feeds a string into a digest.",46,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"result_str","","Convenience function that retrieves the result of a digest as a String in hexadecimal format.",46,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[0,"ed25519","crypto","",null,null],[5,"keypair","crypto::ed25519","",null,null],[5,"signature","","",null,null],[5,"verify","","",null,null],[5,"exchange","","",null,null],[0,"fortuna","crypto","An implementation of the Fortuna CSPRNG",null,null],[3,"Fortuna","crypto::fortuna","The `Fortuna` CSPRNG (PC 9.5)",null,null],[17,"MIN_POOL_SIZE","","Length in bytes that the first pool must be before a \"catastrophic reseed\" is allowed to happen. (A direct reseed through the `SeedableRng` API is not affected by this limit.)",null,null],[11,"new_unseeded","","Creates a new unseeded `Fortuna` (PC 9.5.4)",47,{"inputs":[],"output":{"name":"fortuna"}}],[11,"add_random_event","","Adds a random event `e` from source `s` to entropy pool `i` (PC 9.5.6)",47,null],[11,"fill_bytes","","Generate a bunch of random data into `dest` (PC 9.5.5)",47,null],[11,"next_u32","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_seed","","",47,null],[11,"reseed","","",47,null],[0,"ghash","crypto","",null,null],[3,"Ghash","crypto::ghash","A structure representing the state of a GHASH computation",null,null],[3,"GhashWithC","","A structure representing the state of a GHASH computation, after input for C was provided",null,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"ghash"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ghashwithc"}}],[11,"new","","Creates a new GHASH state, with `h` as the key",48,null],[11,"input_a","","Feeds data for GHASH's A input",48,null],[11,"input_c","","Feeds data for GHASH's C input",48,null],[11,"result","","Retrieve the digest result",48,null],[11,"input_c","","Feeds data for GHASH's C input",49,null],[11,"result","","Retrieve the digest result",49,null],[11,"input","","",48,null],[11,"reset","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","",48,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","",48,null],[11,"output_bytes","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"hc128","crypto","",null,null],[3,"Hc128","crypto::hc128","",null,null],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"hc128"}}],[11,"new","","",50,null],[11,"process","","",50,null],[11,"encrypt","","",50,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",50,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[0,"hmac","crypto","This module implements the Hmac function - a Message Authentication Code using a Digest.",null,null],[3,"Hmac","crypto::hmac","The Hmac struct represents an Hmac function - a Message Authentication Code using a Digest.",null,null],[11,"new","","Create a new Hmac instance.",51,null],[11,"input","","",51,null],[11,"reset","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","",51,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","",51,null],[11,"output_bytes","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"hkdf","crypto","This module implements the HMAC-based Extract-and-Expand Key Derivation Function as specified by  https://tools.ietf.org/html/rfc5869.",null,null],[5,"hkdf_extract","crypto::hkdf","Execute the HKDF-Extract function.  Applications MUST NOT use this for password hashing.",null,null],[5,"hkdf_expand","","Execute the HKDF-Expand function.  Applications MUST NOT use this for password hashing.",null,null],[0,"mac","crypto","The mac module defines the Message Authentication Code (Mac) trait.",null,null],[3,"MacResult","crypto::mac","A MacResult wraps a Mac code and provides a safe Eq implementation that runs in fixed time.",null,null],[8,"Mac","","The Mac trait defines methods for a Message Authentication function.",null,null],[10,"input","","Process input data.",52,null],[10,"reset","","Reset the Mac state to begin processing another input stream.",52,{"inputs":[{"name":"self"}],"output":null}],[10,"result","","Obtain the result of a Mac computation as a MacResult.",52,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[10,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",52,null],[10,"output_bytes","","Get the size of the Mac code, in bytes.",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new MacResult.",53,null],[11,"new_from_owned","","Create a new MacResult taking ownership of the specified code value.",53,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"macresult"}}],[11,"code","","Get the code value. Be very careful using this method, since incorrect use of the code value may permit timing attacks which defeat the security provided by the Mac function.",53,null],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"macresult"}],"output":{"name":"bool"}}],[0,"md5","crypto","",null,null],[3,"Md5","crypto::md5","The MD5 Digest algorithm",null,null],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"md5"}}],[11,"new","","Construct a new instance of the MD5 Digest.",54,{"inputs":[],"output":{"name":"md5"}}],[11,"input","","",54,null],[11,"reset","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","",54,null],[11,"output_bits","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"pbkdf2","crypto","This module implements the PBKDF2 Key Derivation Function as specified by http://tools.ietf.org/html/rfc2898.",null,null],[5,"pbkdf2","crypto::pbkdf2","Execute the PBKDF2 Key Derivation Function. The Scrypt Key Derivation Function generally provides better security, so, applications that do not have a requirement to use PBKDF2 specifically should consider using that function instead.",null,null],[5,"pbkdf2_simple","","pbkdf2_simple is a helper function that should be sufficient for the majority of cases where an application needs to use PBKDF2 to hash a password for storage. The result is a String that contains the parameters used as part of its encoding. The pbkdf2_check function may be used on a password to check if it is equal to a hashed value.",null,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["string"],"name":"result"}}],[5,"pbkdf2_check","","pbkdf2_check compares a password against the result of a previous call to pbkdf2_simple and returns true if the passed in password hashes to the same value.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["bool","str"],"name":"result"}}],[0,"poly1305","crypto","",null,null],[3,"Poly1305","crypto::poly1305","",null,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poly1305"}}],[11,"new","","",55,null],[11,"input","","",55,null],[11,"reset","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","",55,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","",55,null],[11,"output_bytes","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"rc4","crypto","An implementation of the RC4 (also sometimes called ARC4) stream cipher. THIS IMPLEMENTATION IS NOT A FIXED TIME IMPLEMENTATION.",null,null],[3,"Rc4","crypto::rc4","",null,null],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"rc4"}}],[11,"new","","",56,null],[11,"process","","",56,null],[11,"encrypt","","",56,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",56,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[0,"ripemd160","crypto","An implementation of the RIPEMD-160 cryptographic hash.",null,null],[3,"Ripemd160","crypto::ripemd160","Structure representing the state of a Ripemd160 computation",null,null],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ripemd160"}}],[11,"new","","",57,{"inputs":[],"output":{"name":"ripemd160"}}],[11,"reset","","Resets the hash to its original state also clearing the buffer. To be used in between hashing separate messages to avoid having to recreate and allocate the whole structure.",57,{"inputs":[{"name":"self"}],"output":null}],[11,"input","","Adds the input `msg` to the hash. This method can be called repeatedly for use with streaming messages.",57,null],[11,"result","","Returns the resulting digest of the entire message. Note: `out` must be at least 20 bytes (160 bits)",57,null],[11,"output_bits","","Returns the size of the digest in bits",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","Returns the block size the hash operates on in bytes",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"salsa20","crypto","",null,null],[3,"Salsa20","crypto::salsa20","",null,null],[5,"hsalsa20","","",null,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"salsa20"}}],[11,"new","","",58,null],[11,"new_xsalsa20","","",58,null],[11,"process","","",58,null],[11,"encrypt","","",58,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",58,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[0,"scrypt","crypto","This module implements the Scrypt key derivation function as specified in [1].",null,null],[3,"ScryptParams","crypto::scrypt","The Scrypt parameter values.",null,null],[5,"scrypt","","The scrypt key derivation function.",null,null],[5,"scrypt_simple","","scrypt_simple is a helper function that should be sufficient for the majority of cases where an application needs to use Scrypt to hash a password for storage. The result is a String that contains the parameters used as part of its encoding. The scrypt_check function may be used on a password to check if it is equal to a hashed value.",null,{"inputs":[{"name":"str"},{"name":"scryptparams"}],"output":{"generics":["string"],"name":"result"}}],[5,"scrypt_check","","scrypt_check compares a password against the result of a previous call to scrypt_simple and returns true if the passed in password hashes to the same value.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["bool","str"],"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"scryptparams"}}],[11,"new","","Create a new instance of ScryptParams.",59,{"inputs":[{"name":"u8"},{"name":"u32"},{"name":"u32"}],"output":{"name":"scryptparams"}}],[0,"sha1","crypto","An implementation of the SHA-1 cryptographic hash algorithm.",null,null],[3,"Sha1","crypto::sha1","Structure representing the state of a Sha1 computation",null,null],[5,"sha1_first","","Not an intrinsic, but gets the first element of a vector.",null,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32"}}],[5,"sha1_first_add","","Not an intrinsic, but adds a word to the first element of a vector.",null,{"inputs":[{"name":"u32"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_schedule_x4","","Performs 4 rounds of the message schedule update.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_first_half","","Emulates `llvm.x86.sha1nexte` intrinsic.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_digest_round_x4","","Emulates `llvm.x86.sha1rnds4` intrinsic. Performs 4 rounds of the message block digest.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"i8"}],"output":{"name":"u32x4"}}],[5,"sha1_digest_block_u32","","Process a block with the SHA-1 algorithm.",null,null],[5,"sha1_digest_block","","Process a block with the SHA-1 algorithm. (See more...)",null,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"sha1"}}],[11,"new","","Construct a `sha` object",60,{"inputs":[],"output":{"name":"sha1"}}],[11,"reset","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"input","","",60,null],[11,"result","","",60,null],[11,"output_bits","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"sha2","crypto","An implementation of the SHA-2 cryptographic hash algorithms.",null,null],[3,"Sha512","crypto::sha2","The SHA-512 hash algorithm with the SHA-512 initial hash value.",null,null],[3,"Sha384","","The SHA-512 hash algorithm with the SHA-384 initial hash value. The result is truncated to 384 bits.",null,null],[3,"Sha512Trunc256","","The SHA-512 hash algorithm with the SHA-512/256 initial hash value. The result is truncated to 256 bits.",null,null],[3,"Sha512Trunc224","","The SHA-512 hash algorithm with the SHA-512/224 initial hash value. The result is truncated to 224 bits.",null,null],[3,"Sha256","","The SHA-256 hash algorithm with the SHA-256 initial hash value.",null,null],[3,"Sha224","","The SHA-256 hash algorithm with the SHA-224 initial hash value. The result is truncated to 224 bits.",null,null],[5,"sha256_schedule_x4","","Performs 4 rounds of the SHA-256 message schedule update.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha256_digest_round_x2","","Emulates `llvm.x86.sha256rnds2` intrinsic.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha256_digest_block_u32","","Process a block with the SHA-256 algorithm.",null,null],[5,"sha256_digest_block","","Process a block with the SHA-256 algorithm. (See more...)",null,null],[5,"sha512_schedule_x2","","Performs 2 rounds of the SHA-512 message schedule update.",null,{"inputs":[{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[5,"sha512_digest_round","","Performs one round of the SHA-512 message block digest.",null,{"inputs":[{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64"}],"output":{"name":"u64x2"}}],[5,"sha512_digest_block_u64","","Process a block with the SHA-512 algorithm.",null,null],[5,"sha512_digest_block","","Process a block with the SHA-512 algorithm. (See more...)",null,null],[17,"K64","","Constants necessary for SHA-512 family of digests.",null,null],[17,"K64X2","","Constants necessary for SHA-512 family of digests.",null,null],[17,"K32","","Constants necessary for SHA-256 family of digests.",null,null],[17,"K32X4","","Constants necessary for SHA-256 family of digests.",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"sha512"}}],[11,"new","","Construct an new instance of a SHA-512 digest.",61,{"inputs":[],"output":{"name":"sha512"}}],[11,"input","","",61,null],[11,"result","","",61,null],[11,"reset","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"sha384"}}],[11,"new","","Construct an new instance of a SHA-384 digest.",62,{"inputs":[],"output":{"name":"sha384"}}],[11,"input","","",62,null],[11,"result","","",62,null],[11,"reset","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"sha512trunc256"}}],[11,"new","","Construct an new instance of a SHA-512/256 digest.",63,{"inputs":[],"output":{"name":"sha512trunc256"}}],[11,"input","","",63,null],[11,"result","","",63,null],[11,"reset","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"sha512trunc224"}}],[11,"new","","Construct an new instance of a SHA-512/224 digest.",64,{"inputs":[],"output":{"name":"sha512trunc224"}}],[11,"input","","",64,null],[11,"result","","",64,null],[11,"reset","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"sha256"}}],[11,"new","","Construct an new instance of a SHA-256 digest.",65,{"inputs":[],"output":{"name":"sha256"}}],[11,"input","","",65,null],[11,"result","","",65,null],[11,"reset","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"sha224"}}],[11,"new","","Construct an new instance of a SHA-224 digest.",66,{"inputs":[],"output":{"name":"sha224"}}],[11,"input","","",66,null],[11,"result","","",66,null],[11,"reset","","",66,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"sha3","crypto","An implementation of the SHA-3 cryptographic hash algorithms.",null,null],[3,"Sha3","crypto::sha3","",null,null],[4,"Sha3Mode","","SHA-3 Modes.",null,null],[13,"Sha3_224","","",67,null],[13,"Sha3_256","","",67,null],[13,"Sha3_384","","",67,null],[13,"Sha3_512","","",67,null],[13,"Shake128","","",67,null],[13,"Shake256","","",67,null],[13,"Keccak224","","",67,null],[13,"Keccak256","","",67,null],[13,"Keccak384","","",67,null],[13,"Keccak512","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"sha3mode"}}],[11,"digest_length","","Return the expected hash size in bytes specified for `mode`, or 0 for modes with variable output as for shake functions.",67,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_shake","","Return `true` if `mode` is a SHAKE mode.",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_keccak","","Return `true` if `mode` is a Keccak mode.",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","New SHA-3 instanciated from specified SHA-3 `mode`.",68,{"inputs":[{"name":"sha3mode"}],"output":{"name":"sha3"}}],[11,"sha3_224","","New SHA3-224 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"sha3_256","","New SHA3-256 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"sha3_384","","New SHA3-384 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"sha3_512","","New SHA3-512 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"shake_128","","New SHAKE-128 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"shake_256","","New SHAKE-256 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak224","","New Keccak224 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak256","","New Keccak256 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak384","","New Keccak384 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak512","","New Keccak512 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"input","","",68,null],[11,"result","","",68,null],[11,"reset","","",68,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"sosemanuk","crypto","",null,null],[3,"Sosemanuk","crypto::sosemanuk","",null,null],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"sosemanuk"}}],[11,"new","","",69,null],[11,"process","","",69,null],[11,"encrypt","","",69,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",69,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[0,"symmetriccipher","crypto","",null,null],[4,"SymmetricCipherError","crypto::symmetriccipher","",null,null],[13,"InvalidLength","","",70,null],[13,"InvalidPadding","","",70,null],[8,"BlockEncryptor","","",null,null],[10,"block_size","","",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"encrypt_block","","",71,null],[8,"BlockEncryptorX8","","",null,null],[10,"block_size","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"encrypt_block_x8","","",72,null],[8,"BlockDecryptor","","",null,null],[10,"block_size","","",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"decrypt_block","","",73,null],[8,"BlockDecryptorX8","","",null,null],[10,"block_size","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"decrypt_block_x8","","",74,null],[8,"Encryptor","","",null,null],[10,"encrypt","","",75,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[8,"Decryptor","","",null,null],[10,"decrypt","","",76,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[8,"SynchronousStreamCipher","","",null,null],[10,"process","","",77,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"symmetricciphererror"}}],[0,"util","crypto","",null,null],[5,"supports_aesni","crypto::util","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"secure_memset","","",null,null],[5,"fixed_time_eq","","Compare two vectors using a fixed number of operations. If the two vectors are not of equal length, the function returns false immediately.",null,null],[5,"rust_crypto_util_supports_aesni","","",null,null],[5,"rust_crypto_util_fixed_time_eq_asm","","",null,null],[5,"rust_crypto_util_secure_memset","","",null,null],[0,"whirlpool","crypto","An implementation of the Whirlpool cryptographic hash algorithm.",null,null],[3,"Whirlpool","crypto::whirlpool","",null,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"whirlpool"}}],[11,"new","","",78,{"inputs":[],"output":{"name":"whirlpool"}}],[11,"input","","",78,null],[11,"result","","",78,null],[11,"reset","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"aesni","crypto","",null,null],[3,"AesNiEncryptor","crypto::aesni","",null,null],[3,"AesNiDecryptor","","",null,null],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"aesniencryptor"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"aesnidecryptor"}}],[11,"new","","",79,null],[11,"new","","",80,null],[11,"block_size","","",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",79,null],[11,"block_size","","",80,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",80,null]],"paths":[[8,"AeadEncryptor"],[8,"AeadDecryptor"],[4,"KeySize"],[3,"AesGcm"],[3,"AesSafe128Encryptor"],[3,"AesSafe128Decryptor"],[3,"AesSafe192Encryptor"],[3,"AesSafe192Decryptor"],[3,"AesSafe256Encryptor"],[3,"AesSafe256Decryptor"],[3,"AesSafe128EncryptorX8"],[3,"AesSafe128DecryptorX8"],[3,"AesSafe192EncryptorX8"],[3,"AesSafe192DecryptorX8"],[3,"AesSafe256EncryptorX8"],[3,"AesSafe256DecryptorX8"],[3,"Blake2b"],[3,"Blake2s"],[8,"PaddingProcessor"],[3,"NoPadding"],[3,"PkcsPadding"],[3,"EncPadding"],[3,"DecPadding"],[3,"EcbEncryptor"],[3,"EcbDecryptor"],[3,"CbcEncryptor"],[3,"CbcDecryptor"],[3,"CtrMode"],[3,"CtrModeX8"],[3,"Blowfish"],[4,"BufferResult"],[8,"ReadBuffer"],[8,"WriteBuffer"],[3,"RefReadBuffer"],[3,"OwnedReadBuffer"],[3,"RefWriteBuffer"],[3,"BorrowedWriteBuffer"],[3,"OwnedWriteBuffer"],[3,"ChaCha20"],[3,"ChaCha20Poly1305"],[3,"Fe"],[3,"GeP2"],[3,"GeP3"],[3,"GeP1P1"],[3,"GePrecomp"],[3,"GeCached"],[8,"Digest"],[3,"Fortuna"],[3,"Ghash"],[3,"GhashWithC"],[3,"Hc128"],[3,"Hmac"],[8,"Mac"],[3,"MacResult"],[3,"Md5"],[3,"Poly1305"],[3,"Rc4"],[3,"Ripemd160"],[3,"Salsa20"],[3,"ScryptParams"],[3,"Sha1"],[3,"Sha512"],[3,"Sha384"],[3,"Sha512Trunc256"],[3,"Sha512Trunc224"],[3,"Sha256"],[3,"Sha224"],[4,"Sha3Mode"],[3,"Sha3"],[3,"Sosemanuk"],[4,"SymmetricCipherError"],[8,"BlockEncryptor"],[8,"BlockEncryptorX8"],[8,"BlockDecryptor"],[8,"BlockDecryptorX8"],[8,"Encryptor"],[8,"Decryptor"],[8,"SynchronousStreamCipher"],[3,"Whirlpool"],[3,"AesNiEncryptor"],[3,"AesNiDecryptor"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard error.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger. It can be used to customize the log format, change the enviromental variable used to provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"generics":["setloggererror"],"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"},{"name":"loglevelfilter"}],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG environment variable.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"init","","Initializes the global logger with an env logger.",0,{"inputs":[{"name":"self"}],"output":{"generics":["setloggererror"],"name":"result"}}],[11,"build","","Build an env logger.",0,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"enabled","","",1,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"log","","",1,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}]],"paths":[[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",20,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",21,null],[12,"sin6_family","","",21,null],[12,"sin6_port","","",21,null],[12,"sin6_flowinfo","","",21,null],[12,"sin6_addr","","",21,null],[12,"sin6_scope_id","","",21,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",22,null],[12,"sun_family","","",22,null],[12,"sun_path","","",22,null],[3,"passwd","","",null,null],[12,"pw_name","","",23,null],[12,"pw_passwd","","",23,null],[12,"pw_uid","","",23,null],[12,"pw_gid","","",23,null],[12,"pw_change","","",23,null],[12,"pw_class","","",23,null],[12,"pw_gecos","","",23,null],[12,"pw_dir","","",23,null],[12,"pw_shell","","",23,null],[12,"pw_expire","","",23,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",24,null],[12,"ifa_name","","",24,null],[12,"ifa_flags","","",24,null],[12,"ifa_addr","","",24,null],[12,"ifa_netmask","","",24,null],[12,"ifa_dstaddr","","",24,null],[12,"ifa_data","","",24,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",25,null],[12,"tm_min","","",25,null],[12,"tm_hour","","",25,null],[12,"tm_mday","","",25,null],[12,"tm_mon","","",25,null],[12,"tm_year","","",25,null],[12,"tm_wday","","",25,null],[12,"tm_yday","","",25,null],[12,"tm_isdst","","",25,null],[12,"tm_gmtoff","","",25,null],[12,"tm_zone","","",25,null],[3,"utsname","","",null,null],[12,"sysname","","",26,null],[12,"nodename","","",26,null],[12,"release","","",26,null],[12,"version","","",26,null],[12,"machine","","",26,null],[3,"msghdr","","",null,null],[12,"msg_name","","",27,null],[12,"msg_namelen","","",27,null],[12,"msg_iov","","",27,null],[12,"msg_iovlen","","",27,null],[12,"msg_control","","",27,null],[12,"msg_controllen","","",27,null],[12,"msg_flags","","",27,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",28,null],[12,"cmsg_level","","",28,null],[12,"cmsg_type","","",28,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",29,null],[12,"if_name","","",29,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",30,null],[12,"aio_offset","","",30,null],[12,"aio_buf","","",30,null],[12,"aio_nbytes","","",30,null],[12,"aio_reqprio","","",30,null],[12,"aio_sigevent","","",30,null],[12,"aio_lio_opcode","","",30,null],[3,"utmpx","","",null,null],[12,"ut_user","","",31,null],[12,"ut_id","","",31,null],[12,"ut_line","","",31,null],[12,"ut_pid","","",31,null],[12,"ut_type","","",31,null],[12,"ut_tv","","",31,null],[12,"ut_host","","",31,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_pathv","","",32,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",33,null],[12,"ss_family","","",33,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",34,null],[12,"ai_family","","",34,null],[12,"ai_socktype","","",34,null],[12,"ai_protocol","","",34,null],[12,"ai_addrlen","","",34,null],[12,"ai_canonname","","",34,null],[12,"ai_addr","","",34,null],[12,"ai_next","","",34,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",35,null],[12,"denom","","",35,null],[3,"stat","","",null,null],[12,"st_dev","","",36,null],[12,"st_mode","","",36,null],[12,"st_nlink","","",36,null],[12,"st_ino","","",36,null],[12,"st_uid","","",36,null],[12,"st_gid","","",36,null],[12,"st_rdev","","",36,null],[12,"st_atime","","",36,null],[12,"st_atime_nsec","","",36,null],[12,"st_mtime","","",36,null],[12,"st_mtime_nsec","","",36,null],[12,"st_ctime","","",36,null],[12,"st_ctime_nsec","","",36,null],[12,"st_birthtime","","",36,null],[12,"st_birthtime_nsec","","",36,null],[12,"st_size","","",36,null],[12,"st_blocks","","",36,null],[12,"st_blksize","","",36,null],[12,"st_flags","","",36,null],[12,"st_gen","","",36,null],[12,"st_lspare","","",36,null],[12,"st_qspare","","",36,null],[3,"dirent","","",null,null],[12,"d_ino","","",37,null],[12,"d_seekoff","","",37,null],[12,"d_reclen","","",37,null],[12,"d_namlen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",38,null],[12,"si_errno","","",38,null],[12,"si_code","","",38,null],[12,"si_pid","","",38,null],[12,"si_uid","","",38,null],[12,"si_status","","",38,null],[12,"si_addr","","",38,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",39,null],[12,"sa_mask","","",39,null],[12,"sa_flags","","",39,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",40,null],[12,"ss_size","","",40,null],[12,"ss_flags","","",40,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",41,null],[12,"fst_posmode","","",41,null],[12,"fst_offset","","",41,null],[12,"fst_length","","",41,null],[12,"fst_bytesalloc","","",41,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",42,null],[12,"ra_count","","",42,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",43,null],[12,"f_frsize","","",43,null],[12,"f_blocks","","",43,null],[12,"f_bfree","","",43,null],[12,"f_bavail","","",43,null],[12,"f_files","","",43,null],[12,"f_ffree","","",43,null],[12,"f_favail","","",43,null],[12,"f_fsid","","",43,null],[12,"f_flag","","",43,null],[12,"f_namemax","","",43,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",44,null],[12,"dli_fbase","","",44,null],[12,"dli_sname","","",44,null],[12,"dli_saddr","","",44,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",45,null],[12,"sin_family","","",45,null],[12,"sin_port","","",45,null],[12,"sin_addr","","",45,null],[12,"sin_zero","","",45,null],[3,"statfs","","",null,null],[12,"f_bsize","","",46,null],[12,"f_iosize","","",46,null],[12,"f_blocks","","",46,null],[12,"f_bfree","","",46,null],[12,"f_bavail","","",46,null],[12,"f_files","","",46,null],[12,"f_ffree","","",46,null],[12,"f_fsid","","",46,null],[12,"f_owner","","",46,null],[12,"f_type","","",46,null],[12,"f_flags","","",46,null],[12,"f_fssubtype","","",46,null],[12,"f_fstypename","","",46,null],[12,"f_mntonname","","",46,null],[12,"f_mntfromname","","",46,null],[12,"f_reserved","","",46,null],[3,"kevent","","",null,null],[12,"ident","","",47,null],[12,"filter","","",47,null],[12,"flags","","",47,null],[12,"fflags","","",47,null],[12,"data","","",47,null],[12,"udata","","",47,null],[3,"kevent64_s","","",null,null],[12,"ident","","",48,null],[12,"filter","","",48,null],[12,"flags","","",48,null],[12,"fflags","","",48,null],[12,"data","","",48,null],[12,"udata","","",48,null],[12,"ext","","",48,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",49,null],[12,"dqb_bsoftlimit","","",49,null],[12,"dqb_curbytes","","",49,null],[12,"dqb_ihardlimit","","",49,null],[12,"dqb_isoftlimit","","",49,null],[12,"dqb_curinodes","","",49,null],[12,"dqb_btime","","",49,null],[12,"dqb_itime","","",49,null],[12,"dqb_id","","",49,null],[12,"dqb_spare","","",49,null],[3,"if_msghdr","","",null,null],[12,"ifm_msglen","","",50,null],[12,"ifm_version","","",50,null],[12,"ifm_type","","",50,null],[12,"ifm_addrs","","",50,null],[12,"ifm_flags","","",50,null],[12,"ifm_index","","",50,null],[12,"ifm_data","","",50,null],[3,"termios","","",null,null],[12,"c_iflag","","",51,null],[12,"c_oflag","","",51,null],[12,"c_cflag","","",51,null],[12,"c_lflag","","",51,null],[12,"c_cc","","",51,null],[12,"c_ispeed","","",51,null],[12,"c_ospeed","","",51,null],[3,"flock","","",null,null],[12,"l_start","","",52,null],[12,"l_len","","",52,null],[12,"l_pid","","",52,null],[12,"l_type","","",52,null],[12,"l_whence","","",52,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",53,null],[12,"hdr_cnt","","",53,null],[12,"trailers","","",53,null],[12,"trl_cnt","","",53,null],[3,"lconv","","",null,null],[12,"decimal_point","","",54,null],[12,"thousands_sep","","",54,null],[12,"grouping","","",54,null],[12,"int_curr_symbol","","",54,null],[12,"currency_symbol","","",54,null],[12,"mon_decimal_point","","",54,null],[12,"mon_thousands_sep","","",54,null],[12,"mon_grouping","","",54,null],[12,"positive_sign","","",54,null],[12,"negative_sign","","",54,null],[12,"int_frac_digits","","",54,null],[12,"frac_digits","","",54,null],[12,"p_cs_precedes","","",54,null],[12,"p_sep_by_space","","",54,null],[12,"n_cs_precedes","","",54,null],[12,"n_sep_by_space","","",54,null],[12,"p_sign_posn","","",54,null],[12,"n_sign_posn","","",54,null],[12,"int_p_cs_precedes","","",54,null],[12,"int_n_cs_precedes","","",54,null],[12,"int_p_sep_by_space","","",54,null],[12,"int_n_sep_by_space","","",54,null],[12,"int_p_sign_posn","","",54,null],[12,"int_n_sign_posn","","",54,null],[3,"sigevent","","",null,null],[12,"sigev_notify","","",55,null],[12,"sigev_signo","","",55,null],[12,"sigev_value","","",55,null],[12,"sigev_notify_attributes","","",55,null],[3,"proc_taskinfo","","",null,null],[12,"pti_virtual_size","","",56,null],[12,"pti_resident_size","","",56,null],[12,"pti_total_user","","",56,null],[12,"pti_total_system","","",56,null],[12,"pti_threads_user","","",56,null],[12,"pti_threads_system","","",56,null],[12,"pti_policy","","",56,null],[12,"pti_faults","","",56,null],[12,"pti_pageins","","",56,null],[12,"pti_cow_faults","","",56,null],[12,"pti_messages_sent","","",56,null],[12,"pti_messages_received","","",56,null],[12,"pti_syscalls_mach","","",56,null],[12,"pti_syscalls_unix","","",56,null],[12,"pti_csw","","",56,null],[12,"pti_threadnum","","",56,null],[12,"pti_numrunning","","",56,null],[12,"pti_priority","","",56,null],[3,"proc_bsdinfo","","",null,null],[12,"pbi_flags","","",57,null],[12,"pbi_status","","",57,null],[12,"pbi_xstatus","","",57,null],[12,"pbi_pid","","",57,null],[12,"pbi_ppid","","",57,null],[12,"pbi_uid","","",57,null],[12,"pbi_gid","","",57,null],[12,"pbi_ruid","","",57,null],[12,"pbi_rgid","","",57,null],[12,"pbi_svuid","","",57,null],[12,"pbi_svgid","","",57,null],[12,"rfu_1","","",57,null],[12,"pbi_comm","","",57,null],[12,"pbi_name","","",57,null],[12,"pbi_nfiles","","",57,null],[12,"pbi_pgid","","",57,null],[12,"pbi_pjobc","","",57,null],[12,"e_tdev","","",57,null],[12,"e_tpgid","","",57,null],[12,"pbi_nice","","",57,null],[12,"pbi_start_tvsec","","",57,null],[12,"pbi_start_tvusec","","",57,null],[3,"proc_taskallinfo","","",null,null],[12,"pbsd","","",58,null],[12,"ptinfo","","",58,null],[3,"proc_threadinfo","","",null,null],[12,"pth_user_time","","",59,null],[12,"pth_system_time","","",59,null],[12,"pth_cpu_usage","","",59,null],[12,"pth_policy","","",59,null],[12,"pth_run_state","","",59,null],[12,"pth_flags","","",59,null],[12,"pth_sleep_time","","",59,null],[12,"pth_curpri","","",59,null],[12,"pth_priority","","",59,null],[12,"pth_maxpriority","","",59,null],[12,"pth_name","","",59,null],[3,"xsw_usage","","",null,null],[12,"xsu_total","","",60,null],[12,"xsu_avail","","",60,null],[12,"xsu_used","","",60,null],[12,"xsu_pagesize","","",60,null],[12,"xsu_encrypted","","",60,null],[3,"xucred","","",null,null],[12,"cr_version","","",61,null],[12,"cr_uid","","",61,null],[12,"cr_ngroups","","",61,null],[12,"cr_groups","","",61,null],[3,"mach_header","","",null,null],[12,"magic","","",62,null],[12,"cputype","","",62,null],[12,"cpusubtype","","",62,null],[12,"filetype","","",62,null],[12,"ncmds","","",62,null],[12,"sizeofcmds","","",62,null],[12,"flags","","",62,null],[3,"mach_header_64","","",null,null],[12,"magic","","",63,null],[12,"cputype","","",63,null],[12,"cpusubtype","","",63,null],[12,"filetype","","",63,null],[12,"ncmds","","",63,null],[12,"sizeofcmds","","",63,null],[12,"flags","","",63,null],[12,"reserved","","",63,null],[3,"segment_command","","",null,null],[12,"cmd","","",64,null],[12,"cmdsize","","",64,null],[12,"segname","","",64,null],[12,"vmaddr","","",64,null],[12,"vmsize","","",64,null],[12,"fileoff","","",64,null],[12,"filesize","","",64,null],[12,"maxprot","","",64,null],[12,"initprot","","",64,null],[12,"nsects","","",64,null],[12,"flags","","",64,null],[3,"segment_command_64","","",null,null],[12,"cmd","","",65,null],[12,"cmdsize","","",65,null],[12,"segname","","",65,null],[12,"vmaddr","","",65,null],[12,"vmsize","","",65,null],[12,"fileoff","","",65,null],[12,"filesize","","",65,null],[12,"maxprot","","",65,null],[12,"initprot","","",65,null],[12,"nsects","","",65,null],[12,"flags","","",65,null],[3,"load_command","","",null,null],[12,"cmd","","",66,null],[12,"cmdsize","","",66,null],[3,"sockaddr_dl","","",null,null],[12,"sdl_len","","",67,null],[12,"sdl_family","","",67,null],[12,"sdl_index","","",67,null],[12,"sdl_type","","",67,null],[12,"sdl_nlen","","",67,null],[12,"sdl_alen","","",67,null],[12,"sdl_slen","","",67,null],[12,"sdl_data","","",67,null],[3,"sockaddr_inarp","","",null,null],[12,"sin_len","","",68,null],[12,"sin_family","","",68,null],[12,"sin_port","","",68,null],[12,"sin_addr","","",68,null],[12,"sin_srcaddr","","",68,null],[12,"sin_tos","","",68,null],[12,"sin_other","","",68,null],[3,"pthread_attr_t","","",null,null],[3,"timeval32","","",null,null],[12,"tv_sec","","",69,null],[12,"tv_usec","","",69,null],[3,"if_data","","",null,null],[12,"ifi_type","","",70,null],[12,"ifi_typelen","","",70,null],[12,"ifi_physical","","",70,null],[12,"ifi_addrlen","","",70,null],[12,"ifi_hdrlen","","",70,null],[12,"ifi_recvquota","","",70,null],[12,"ifi_xmitquota","","",70,null],[12,"ifi_unused1","","",70,null],[12,"ifi_mtu","","",70,null],[12,"ifi_metric","","",70,null],[12,"ifi_baudrate","","",70,null],[12,"ifi_ipackets","","",70,null],[12,"ifi_ierrors","","",70,null],[12,"ifi_opackets","","",70,null],[12,"ifi_oerrors","","",70,null],[12,"ifi_collisions","","",70,null],[12,"ifi_ibytes","","",70,null],[12,"ifi_obytes","","",70,null],[12,"ifi_imcasts","","",70,null],[12,"ifi_omcasts","","",70,null],[12,"ifi_iqdrops","","",70,null],[12,"ifi_noproto","","",70,null],[12,"ifi_recvtiming","","",70,null],[12,"ifi_xmittiming","","",70,null],[12,"ifi_lastchange","","",70,null],[12,"ifi_unused2","","",70,null],[12,"ifi_hwassist","","",70,null],[12,"ifi_reserved1","","",70,null],[12,"ifi_reserved2","","",70,null],[3,"bpf_hdr","","",null,null],[12,"bh_tstamp","","",71,null],[12,"bh_caplen","","",71,null],[12,"bh_datalen","","",71,null],[12,"bh_hdrlen","","",71,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"getpeereid","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"sync","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"lio_listio","","",null,null],[5,"dirfd","","",null,null],[5,"lutimes","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"utmpxname","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"getxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"getgrouplist","","",null,null],[5,"initgroups","","",null,null],[5,"waitid","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"settimeofday","","",null,null],[5,"_dyld_image_count","","",null,null],[5,"_dyld_get_image_header","","",null,null],[5,"_dyld_get_image_vmaddr_slide","","",null,null],[5,"_dyld_get_image_name","","",null,null],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"timeval32"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"if_data"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bpf_hdr"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"fstore_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"radvisory"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"kevent"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"if_msghdr"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"sf_hdtr"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"proc_taskinfo"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"proc_bsdinfo"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"proc_taskallinfo"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"proc_threadinfo"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"xsw_usage"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"xucred"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"mach_header"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"mach_header_64"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"segment_command"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"segment_command_64"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"load_command"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_dl"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_inarp"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"c_char","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"clockid_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"sem_t","","",null,null],[6,"idtype_t","","",null,null],[6,"integer_t","","",null,null],[6,"cpu_type_t","","",null,null],[6,"cpu_subtype_t","","",null,null],[6,"vm_prot_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"boolean_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"NCCS","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_SHLOCK","","",null,null],[17,"O_EXLOCK","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VDSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"VSTATUS","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CIGNORE","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"ALTWERASE","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"NOKERNINFO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"MDMBUF","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_SELF","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"_UTX_USERSIZE","","",null,null],[17,"_UTX_LINESIZE","","",null,null],[17,"_UTX_IDSIZE","","",null,null],[17,"_UTX_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SIGNATURE","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"VM_FLAGS_FIXED","","",null,null],[17,"VM_FLAGS_ANYWHERE","","",null,null],[17,"VM_FLAGS_PURGABLE","","",null,null],[17,"VM_FLAGS_RANDOM_ADDR","","",null,null],[17,"VM_FLAGS_NO_CACHE","","",null,null],[17,"VM_FLAGS_RESILIENT_CODESIGN","","",null,null],[17,"VM_FLAGS_RESILIENT_MEDIA","","",null,null],[17,"VM_FLAGS_OVERWRITE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_MASK","","",null,null],[17,"VM_FLAGS_RETURN_DATA_ADDR","","",null,null],[17,"VM_FLAGS_RETURN_4K_DATA_ADDR","","",null,null],[17,"VM_FLAGS_ALIAS_MASK","","",null,null],[17,"VM_FLAGS_USER_ALLOCATE","","",null,null],[17,"VM_FLAGS_USER_MAP","","",null,null],[17,"VM_FLAGS_USER_REMAP","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SHIFT","","",null,null],[17,"SUPERPAGE_NONE","","",null,null],[17,"SUPERPAGE_SIZE_ANY","","",null,null],[17,"VM_FLAGS_SUPERPAGE_NONE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_ANY","","",null,null],[17,"SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_MEMORY_MALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_SMALL","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE","","",null,null],[17,"VM_MEMORY_MALLOC_HUGE","","",null,null],[17,"VM_MEMORY_SBRK","","",null,null],[17,"VM_MEMORY_REALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_TINY","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSABLE","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSED","","",null,null],[17,"VM_MEMORY_ANALYSIS_TOOL","","",null,null],[17,"VM_MEMORY_MALLOC_NANO","","",null,null],[17,"VM_MEMORY_MACH_MSG","","",null,null],[17,"VM_MEMORY_IOKIT","","",null,null],[17,"VM_MEMORY_STACK","","",null,null],[17,"VM_MEMORY_GUARD","","",null,null],[17,"VM_MEMORY_SHARED_PMAP","","",null,null],[17,"VM_MEMORY_DYLIB","","",null,null],[17,"VM_MEMORY_OBJC_DISPATCHERS","","",null,null],[17,"VM_MEMORY_UNSHARED_PMAP","","",null,null],[17,"VM_MEMORY_APPKIT","","",null,null],[17,"VM_MEMORY_FOUNDATION","","",null,null],[17,"VM_MEMORY_COREGRAPHICS","","",null,null],[17,"VM_MEMORY_CORESERVICES","","",null,null],[17,"VM_MEMORY_CARBON","","",null,null],[17,"VM_MEMORY_JAVA","","",null,null],[17,"VM_MEMORY_COREDATA","","",null,null],[17,"VM_MEMORY_COREDATA_OBJECTIDS","","",null,null],[17,"VM_MEMORY_ATS","","",null,null],[17,"VM_MEMORY_LAYERKIT","","",null,null],[17,"VM_MEMORY_CGIMAGE","","",null,null],[17,"VM_MEMORY_TCMALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_DATA","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_SHARED","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_BACKINGSTORES","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_XALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_MISC","","",null,null],[17,"VM_MEMORY_DYLD","","",null,null],[17,"VM_MEMORY_DYLD_MALLOC","","",null,null],[17,"VM_MEMORY_SQLITE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_CORE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","","",null,null],[17,"VM_MEMORY_GLSL","","",null,null],[17,"VM_MEMORY_OPENCL","","",null,null],[17,"VM_MEMORY_COREIMAGE","","",null,null],[17,"VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","","",null,null],[17,"VM_MEMORY_IMAGEIO","","",null,null],[17,"VM_MEMORY_COREPROFILE","","",null,null],[17,"VM_MEMORY_ASSETSD","","",null,null],[17,"VM_MEMORY_OS_ALLOC_ONCE","","",null,null],[17,"VM_MEMORY_LIBDISPATCH","","",null,null],[17,"VM_MEMORY_ACCELERATE","","",null,null],[17,"VM_MEMORY_COREUI","","",null,null],[17,"VM_MEMORY_COREUIFILE","","",null,null],[17,"VM_MEMORY_GENEALOGY","","",null,null],[17,"VM_MEMORY_RAWCAMERA","","",null,null],[17,"VM_MEMORY_CORPSEINFO","","",null,null],[17,"VM_MEMORY_ASL","","",null,null],[17,"VM_MEMORY_SWIFT_RUNTIME","","",null,null],[17,"VM_MEMORY_SWIFT_METADATA","","",null,null],[17,"VM_MEMORY_DHMM","","",null,null],[17,"VM_MEMORY_SCENEKIT","","",null,null],[17,"VM_MEMORY_SKYWALK","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_1","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_16","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_EACCESS","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"B7200","","",null,null],[17,"B14400","","",null,null],[17,"B28800","","",null,null],[17,"B57600","","",null,null],[17,"B76800","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"IPPROTO_HOPOPTS","","IP6 hop-by-hop options",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_GGP","","gateway2 (deprecated)",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_ST","","Stream protocol II.",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PIGP","","private interior gateway",null,null],[17,"IPPROTO_RCCMON","","BBN RCC Monitoring",null,null],[17,"IPPROTO_NVPII","","network voice protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_ARGUS","","Argus",null,null],[17,"IPPROTO_EMCON","","EMCON",null,null],[17,"IPPROTO_XNET","","Cross Net Debugger",null,null],[17,"IPPROTO_CHAOS","","Chaos",null,null],[17,"IPPROTO_MUX","","Multiplexing",null,null],[17,"IPPROTO_MEAS","","DCN Measurement Subsystems",null,null],[17,"IPPROTO_HMP","","Host Monitoring",null,null],[17,"IPPROTO_PRM","","Packet Radio Measurement",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TRUNK1","","Trunk-1",null,null],[17,"IPPROTO_TRUNK2","","Trunk-2",null,null],[17,"IPPROTO_LEAF1","","Leaf-1",null,null],[17,"IPPROTO_LEAF2","","Leaf-2",null,null],[17,"IPPROTO_RDP","","Reliable Data",null,null],[17,"IPPROTO_IRTP","","Reliable Transaction",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_BLT","","Bulk Data Transfer",null,null],[17,"IPPROTO_NSP","","Network Services",null,null],[17,"IPPROTO_INP","","Merit Internodal",null,null],[17,"IPPROTO_SEP","","Sequential Exchange",null,null],[17,"IPPROTO_3PC","","Third Party Connect",null,null],[17,"IPPROTO_IDPR","","InterDomain Policy Routing",null,null],[17,"IPPROTO_XTP","","XTP",null,null],[17,"IPPROTO_DDP","","Datagram Delivery",null,null],[17,"IPPROTO_CMTP","","Control Message Transport",null,null],[17,"IPPROTO_TPXX","","TP++ Transport",null,null],[17,"IPPROTO_IL","","IL transport protocol",null,null],[17,"IPPROTO_SDRP","","Source Demand Routing",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_IDRP","","InterDomain Routing",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_MHRP","","Mobile Host Routing",null,null],[17,"IPPROTO_BHA","","BHA",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_INLSP","","Integ. Net Layer Security",null,null],[17,"IPPROTO_SWIPE","","IP with encryption",null,null],[17,"IPPROTO_NHRP","","Next Hop Resolution",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_AHIP","","any host internal protocol",null,null],[17,"IPPROTO_CFTP","","CFTP",null,null],[17,"IPPROTO_HELLO","","\"hello\" routing protocol",null,null],[17,"IPPROTO_SATEXPAK","","SATNET/Backroom EXPAK",null,null],[17,"IPPROTO_KRYPTOLAN","","Kryptolan",null,null],[17,"IPPROTO_RVD","","Remote Virtual Disk",null,null],[17,"IPPROTO_IPPC","","Pluribus Packet Core",null,null],[17,"IPPROTO_ADFS","","Any distributed FS",null,null],[17,"IPPROTO_SATMON","","Satnet Monitoring",null,null],[17,"IPPROTO_VISA","","VISA Protocol",null,null],[17,"IPPROTO_IPCV","","Packet Core Utility",null,null],[17,"IPPROTO_CPNX","","Comp. Prot. Net. Executive",null,null],[17,"IPPROTO_CPHB","","Comp. Prot. HeartBeat",null,null],[17,"IPPROTO_WSN","","Wang Span Network",null,null],[17,"IPPROTO_PVP","","Packet Video Protocol",null,null],[17,"IPPROTO_BRSATMON","","BackRoom SATNET Monitoring",null,null],[17,"IPPROTO_ND","","Sun net disk proto (temp.)",null,null],[17,"IPPROTO_WBMON","","WIDEBAND Monitoring",null,null],[17,"IPPROTO_WBEXPAK","","WIDEBAND EXPAK",null,null],[17,"IPPROTO_EON","","ISO cnlp",null,null],[17,"IPPROTO_VMTP","","VMTP",null,null],[17,"IPPROTO_SVMTP","","Secure VMTP",null,null],[17,"IPPROTO_VINES","","Banyon VINES",null,null],[17,"IPPROTO_TTP","","TTP",null,null],[17,"IPPROTO_IGP","","NSFNET-IGP",null,null],[17,"IPPROTO_DGP","","dissimilar gateway prot.",null,null],[17,"IPPROTO_TCF","","TCF",null,null],[17,"IPPROTO_IGRP","","Cisco/GXS IGRP",null,null],[17,"IPPROTO_OSPFIGP","","OSPFIGP",null,null],[17,"IPPROTO_SRPC","","Strite RPC protocol",null,null],[17,"IPPROTO_LARP","","Locus Address Resoloution",null,null],[17,"IPPROTO_MTP","","Multicast Transport",null,null],[17,"IPPROTO_AX25","","AX.25 Frames",null,null],[17,"IPPROTO_IPEIP","","IP encapsulated in IP",null,null],[17,"IPPROTO_MICP","","Mobile Int.ing control",null,null],[17,"IPPROTO_SCCSP","","Semaphore Comm. security",null,null],[17,"IPPROTO_ETHERIP","","Ethernet IP encapsulation",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_APES","","any private encr. scheme",null,null],[17,"IPPROTO_GMTP","","GMTP",null,null],[17,"IPPROTO_PIM","","Protocol Independent Mcast",null,null],[17,"IPPROTO_IPCOMP","","payload compression (IPComp)",null,null],[17,"IPPROTO_PGM","","PGM",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_DIVERT","","divert pseudo-protocol",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"IPPROTO_DONE","","last return value of *_input(), meaning \"all job for this pkt is done\".",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_IMPLINK","","",null,null],[17,"AF_PUP","","",null,null],[17,"AF_CHAOS","","",null,null],[17,"AF_NS","","",null,null],[17,"AF_ISO","","",null,null],[17,"AF_OSI","","",null,null],[17,"AF_ECMA","","",null,null],[17,"AF_DATAKIT","","",null,null],[17,"AF_CCITT","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_DLI","","",null,null],[17,"AF_LAT","","",null,null],[17,"AF_HYLINK","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_LINK","","",null,null],[17,"pseudo_AF_XTP","","",null,null],[17,"AF_COIP","","",null,null],[17,"AF_CNT","","",null,null],[17,"pseudo_AF_RTIP","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_SIP","","",null,null],[17,"pseudo_AF_PIP","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_E164","","",null,null],[17,"pseudo_AF_KEY","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NATM","","",null,null],[17,"AF_SYSTEM","","",null,null],[17,"AF_NETBIOS","","",null,null],[17,"AF_PPP","","",null,null],[17,"pseudo_AF_HDRCMPLT","","",null,null],[17,"AF_SYS_CONTROL","","",null,null],[17,"SYSPROTO_EVENT","","",null,null],[17,"SYSPROTO_CONTROL","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_IMPLINK","","",null,null],[17,"PF_PUP","","",null,null],[17,"PF_CHAOS","","",null,null],[17,"PF_NS","","",null,null],[17,"PF_ISO","","",null,null],[17,"PF_OSI","","",null,null],[17,"PF_ECMA","","",null,null],[17,"PF_DATAKIT","","",null,null],[17,"PF_CCITT","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_DLI","","",null,null],[17,"PF_LAT","","",null,null],[17,"PF_HYLINK","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_LINK","","",null,null],[17,"PF_XTP","","",null,null],[17,"PF_COIP","","",null,null],[17,"PF_CNT","","",null,null],[17,"PF_SIP","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_RTIP","","",null,null],[17,"PF_PIP","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_NATM","","",null,null],[17,"PF_SYSTEM","","",null,null],[17,"PF_NETBIOS","","",null,null],[17,"PF_PPP","","",null,null],[17,"NET_RT_DUMP","","",null,null],[17,"NET_RT_FLAGS","","",null,null],[17,"NET_RT_IFLIST","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"SOCK_MAXADDRLEN","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_LOCAL","","",null,null],[17,"LOCAL_PEERCRED","","",null,null],[17,"LOCAL_PEERPID","","",null,null],[17,"LOCAL_PEEREPID","","",null,null],[17,"LOCAL_PEERUUID","","",null,null],[17,"LOCAL_PEEREUUID","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TIMESTAMP_MONOTONIC","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_LABEL","","",null,null],[17,"SO_PEERLABEL","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_REUSESHAREUID","","",null,null],[17,"SO_NOTIFYCONFLICT","","",null,null],[17,"SO_RANDOMPORT","","",null,null],[17,"SO_NP_EXTENSIONS","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOF","","",null,null],[17,"MSG_FLUSH","","",null,null],[17,"MSG_HOLD","","",null,null],[17,"MSG_SEND","","",null,null],[17,"MSG_HAVEMORE","","",null,null],[17,"MSG_RCVMORE","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SCM_CREDS","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_OACTIVE","","",null,null],[17,"IFF_SIMPLEX","","",null,null],[17,"IFF_LINK0","","",null,null],[17,"IFF_LINK1","","",null,null],[17,"IFF_LINK2","","",null,null],[17,"IFF_ALTPHYS","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_DETAIL","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_EXIT_DETAIL_MASK","","",null,null],[17,"NOTE_EXIT_DECRYPTFAIL","","",null,null],[17,"NOTE_EXIT_MEMORY","","",null,null],[17,"NOTE_EXIT_CSERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_LEEWAY","","",null,null],[17,"NOTE_CRITICAL","","",null,null],[17,"NOTE_BACKGROUND","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"NLDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"OFDEL","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"LOG_NETINFO","","",null,null],[17,"LOG_REMOTEAUTH","","",null,null],[17,"LOG_INSTALL","","",null,null],[17,"LOG_RAS","","",null,null],[17,"LOG_LAUNCHD","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_QUAD","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_NOLOCK","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_MASKED","","",null,null],[17,"CTLFLAG_NOAUTO","","",null,null],[17,"CTLFLAG_KERN","","",null,null],[17,"CTLFLAG_LOCKED","","",null,null],[17,"CTLFLAG_OID2","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_MAXID","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_DOMAINNAME","","",null,null],[17,"KERN_MAXPARTITIONS","","",null,null],[17,"KERN_KDEBUG","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK32","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_SYMFILE","","",null,null],[17,"KERN_PROCARGS","","",null,null],[17,"KERN_NETBOOT","","",null,null],[17,"KERN_SYSV","","",null,null],[17,"KERN_AFFINITY","","",null,null],[17,"KERN_TRANSLATE","","",null,null],[17,"KERN_CLASSIC","","",null,null],[17,"KERN_EXEC","","",null,null],[17,"KERN_CLASSICHANDLER","","",null,null],[17,"KERN_AIOMAX","","",null,null],[17,"KERN_AIOPROCMAX","","",null,null],[17,"KERN_AIOTHREADS","","",null,null],[17,"KERN_COREFILE","","",null,null],[17,"KERN_COREDUMP","","",null,null],[17,"KERN_SUGID_COREDUMP","","",null,null],[17,"KERN_PROCDELAYTERM","","",null,null],[17,"KERN_SHREG_PRIVATIZABLE","","",null,null],[17,"KERN_LOW_PRI_WINDOW","","",null,null],[17,"KERN_LOW_PRI_DELAY","","",null,null],[17,"KERN_POSIX","","",null,null],[17,"KERN_USRSTACK64","","",null,null],[17,"KERN_NX_PROTECTION","","",null,null],[17,"KERN_TFP","","",null,null],[17,"KERN_PROCNAME","","",null,null],[17,"KERN_THALTSTACK","","",null,null],[17,"KERN_SPECULATIVE_READS","","",null,null],[17,"KERN_OSVERSION","","",null,null],[17,"KERN_SAFEBOOT","","",null,null],[17,"KERN_RAGEVNODE","","",null,null],[17,"KERN_TTY","","",null,null],[17,"KERN_CHECKOPENEVT","","",null,null],[17,"KERN_THREADNAME","","",null,null],[17,"KERN_MAXID","","",null,null],[17,"KERN_RAGE_PROC","","",null,null],[17,"KERN_RAGE_THREAD","","",null,null],[17,"KERN_UNRAGE_PROC","","",null,null],[17,"KERN_UNRAGE_THREAD","","",null,null],[17,"KERN_OPENEVT_PROC","","",null,null],[17,"KERN_UNOPENEVT_PROC","","",null,null],[17,"KERN_TFP_POLICY","","",null,null],[17,"KERN_TFP_POLICY_DENY","","",null,null],[17,"KERN_TFP_POLICY_DEFAULT","","",null,null],[17,"KERN_KDEFLAGS","","",null,null],[17,"KERN_KDDFLAGS","","",null,null],[17,"KERN_KDENABLE","","",null,null],[17,"KERN_KDSETBUF","","",null,null],[17,"KERN_KDGETBUF","","",null,null],[17,"KERN_KDSETUP","","",null,null],[17,"KERN_KDREMOVE","","",null,null],[17,"KERN_KDSETREG","","",null,null],[17,"KERN_KDGETREG","","",null,null],[17,"KERN_KDREADTR","","",null,null],[17,"KERN_KDPIDTR","","",null,null],[17,"KERN_KDTHRMAP","","",null,null],[17,"KERN_KDPIDEX","","",null,null],[17,"KERN_KDSETRTCDEC","","",null,null],[17,"KERN_KDGETENTROPY","","",null,null],[17,"KERN_KDWRITETR","","",null,null],[17,"KERN_KDWRITEMAP","","",null,null],[17,"KERN_KDENABLE_BG_TRACE","","",null,null],[17,"KERN_KDDISABLE_BG_TRACE","","",null,null],[17,"KERN_KDREADCURTHRMAP","","",null,null],[17,"KERN_KDSET_TYPEFILTER","","",null,null],[17,"KERN_KDBUFWAIT","","",null,null],[17,"KERN_KDCPUMAP","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_LCID","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"KIPC_MBSTAT","","",null,null],[17,"KIPC_NMBCLUSTERS","","",null,null],[17,"KIPC_SOQLIMITCOMPAT","","",null,null],[17,"VM_METER","","",null,null],[17,"VM_LOADAVG","","",null,null],[17,"VM_MACHFACTOR","","",null,null],[17,"VM_SWAPUSAGE","","",null,null],[17,"VM_MAXID","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_EPOCH","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_VECTORUNIT","","",null,null],[17,"HW_BUS_FREQ","","",null,null],[17,"HW_CPU_FREQ","","",null,null],[17,"HW_CACHELINE","","",null,null],[17,"HW_L1ICACHESIZE","","",null,null],[17,"HW_L1DCACHESIZE","","",null,null],[17,"HW_L2SETTINGS","","",null,null],[17,"HW_L2CACHESIZE","","",null,null],[17,"HW_L3SETTINGS","","",null,null],[17,"HW_L3CACHESIZE","","",null,null],[17,"HW_TB_FREQ","","",null,null],[17,"HW_MEMSIZE","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"HW_MAXID","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"USER_MAXID","","",null,null],[17,"CTL_DEBUG_NAME","","",null,null],[17,"CTL_DEBUG_VALUE","","",null,null],[17,"CTL_DEBUG_MAXID","","",null,null],[17,"PRIO_DARWIN_THREAD","","",null,null],[17,"PRIO_DARWIN_PROCESS","","",null,null],[17,"PRIO_DARWIN_BG","","",null,null],[17,"PRIO_DARWIN_NONUI","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"AIO_LISTIO_MAX","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"WEXITED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"XATTR_NOFOLLOW","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"XATTR_NOSECURITY","","",null,null],[17,"XATTR_NODEFAULT","","",null,null],[17,"XATTR_SHOWCOMPRESSION","","",null,null],[17,"NET_RT_IFLIST2","","",null,null],[17,"RTF_UP","","",null,null],[17,"RTF_GATEWAY","","",null,null],[17,"RTF_HOST","","",null,null],[17,"RTF_REJECT","","",null,null],[17,"RTF_DYNAMIC","","",null,null],[17,"RTF_MODIFIED","","",null,null],[17,"RTF_DONE","","",null,null],[17,"RTF_DELCLONE","","",null,null],[17,"RTF_CLONING","","",null,null],[17,"RTF_XRESOLVE","","",null,null],[17,"RTF_LLINFO","","",null,null],[17,"RTF_STATIC","","",null,null],[17,"RTF_BLACKHOLE","","",null,null],[17,"RTF_NOIFREF","","",null,null],[17,"RTF_PROTO2","","",null,null],[17,"RTF_PROTO1","","",null,null],[17,"RTF_PRCLONING","","",null,null],[17,"RTF_WASCLONED","","",null,null],[17,"RTF_PROTO3","","",null,null],[17,"RTF_PINNED","","",null,null],[17,"RTF_LOCAL","","",null,null],[17,"RTF_BROADCAST","","",null,null],[17,"RTF_MULTICAST","","",null,null],[17,"RTF_IFSCOPE","","",null,null],[17,"RTF_CONDEMNED","","",null,null],[17,"RTF_IFREF","","",null,null],[17,"RTF_PROXY","","",null,null],[17,"RTF_ROUTER","","",null,null],[17,"RTM_VERSION","","",null,null],[17,"RTM_ADD","","",null,null],[17,"RTM_DELETE","","",null,null],[17,"RTM_CHANGE","","",null,null],[17,"RTM_GET","","",null,null],[17,"RTM_LOSING","","",null,null],[17,"RTM_REDIRECT","","",null,null],[17,"RTM_MISS","","",null,null],[17,"RTM_LOCK","","",null,null],[17,"RTM_OLDADD","","",null,null],[17,"RTM_OLDDEL","","",null,null],[17,"RTM_RESOLVE","","",null,null],[17,"RTM_NEWADDR","","",null,null],[17,"RTM_DELADDR","","",null,null],[17,"RTM_IFINFO","","",null,null],[17,"RTM_NEWMADDR","","",null,null],[17,"RTM_DELMADDR","","",null,null],[17,"RTM_IFINFO2","","",null,null],[17,"RTM_NEWMADDR2","","",null,null],[17,"RTM_GET2","","",null,null],[17,"RTV_MTU","","",null,null],[17,"RTV_HOPCOUNT","","",null,null],[17,"RTV_EXPIRE","","",null,null],[17,"RTV_RPIPE","","",null,null],[17,"RTV_SPIPE","","",null,null],[17,"RTV_SSTHRESH","","",null,null],[17,"RTV_RTT","","",null,null],[17,"RTV_RTTVAR","","",null,null],[17,"RTA_DST","","",null,null],[17,"RTA_GATEWAY","","",null,null],[17,"RTA_NETMASK","","",null,null],[17,"RTA_GENMASK","","",null,null],[17,"RTA_IFP","","",null,null],[17,"RTA_IFA","","",null,null],[17,"RTA_AUTHOR","","",null,null],[17,"RTA_BRD","","",null,null],[17,"RTAX_DST","","",null,null],[17,"RTAX_GATEWAY","","",null,null],[17,"RTAX_NETMASK","","",null,null],[17,"RTAX_GENMASK","","",null,null],[17,"RTAX_IFP","","",null,null],[17,"RTAX_IFA","","",null,null],[17,"RTAX_AUTHOR","","",null,null],[17,"RTAX_BRD","","",null,null],[17,"RTAX_MAX","","",null,null],[17,"KERN_PROCARGS2","","",null,null],[17,"PROC_PIDTASKALLINFO","","",null,null],[17,"PROC_PIDTASKINFO","","",null,null],[17,"PROC_PIDTHREADINFO","","",null,null],[17,"MAXCOMLEN","","",null,null],[17,"MAXTHREADNAMESIZE","","",null,null],[17,"XUCRED_VERSION","","",null,null],[17,"LC_SEGMENT","","",null,null],[17,"LC_SEGMENT_64","","",null,null],[17,"MH_MAGIC","","",null,null],[17,"MH_MAGIC_64","","",null,null],[17,"UTUN_OPT_FLAGS","","",null,null],[17,"UTUN_OPT_IFNAME","","",null,null],[17,"DLT_NULL","","",null,null],[17,"DLT_EN10MB","","",null,null],[17,"DLT_EN3MB","","",null,null],[17,"DLT_AX25","","",null,null],[17,"DLT_PRONET","","",null,null],[17,"DLT_CHAOS","","",null,null],[17,"DLT_IEEE802","","",null,null],[17,"DLT_ARCNET","","",null,null],[17,"DLT_SLIP","","",null,null],[17,"DLT_PPP","","",null,null],[17,"DLT_FDDI","","",null,null],[17,"DLT_ATM_RFC1483","","",null,null],[17,"DLT_RAW","","",null,null],[17,"DLT_LOOP","","",null,null],[17,"BPF_ALIGNMENT","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_CONDATTR_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCKATTR_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"aiocb"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"proc_threadinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"timeval32"],[3,"if_data"],[3,"bpf_hdr"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"pthread_rwlockattr_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["box","shutdownloggererror"],"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["shutdownloggererror"],"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["loglevel"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["loglevelfilter"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["loglevel"],"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["mio"] = {"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"Ipv4Addr","mio","An IPv4 address.",null,null],[3,"Ipv6Addr","","An IPv6 address.",null,null],[3,"PollOpt","","",null,null],[3,"EventSet","","",null,null],[3,"IoEvent","","",null,null],[12,"kind","","",0,null],[12,"token","","",0,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[3,"EventLoopConfig","","Configure EventLoop runtime details",null,null],[3,"Sender","","Sends messages to the EventLoop from other threads.",null,null],[3,"Poll","","",null,null],[3,"Events","","",null,null],[3,"Timeout","","",null,null],[3,"TimerError","","",null,null],[3,"Token","","",null,null],[12,"0","","",1,null],[3,"Io","","",null,null],[3,"Selector","","",null,null],[4,"IpAddr","","An IP address, either a IPv4 or IPv6 address.",null,null],[13,"V4","","",2,null],[13,"V6","","",2,null],[4,"NotifyError","","",null,null],[13,"Io","","",3,null],[13,"Full","","",3,null],[13,"Closed","","",3,null],[0,"util","","Utilities for non-blocking IO programs",null,null],[3,"BoundedQueue","mio::util","",null,null],[11,"with_capacity","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"queue"}}],[6,"Slab","","",null,null],[11,"eq","mio","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"pollopt"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"edge","","",5,{"inputs":[],"output":{"name":"pollopt"}}],[11,"empty","","",5,{"inputs":[],"output":{"name":"pollopt"}}],[11,"level","","",5,{"inputs":[],"output":{"name":"pollopt"}}],[11,"oneshot","","",5,{"inputs":[],"output":{"name":"pollopt"}}],[11,"all","","",5,{"inputs":[],"output":{"name":"pollopt"}}],[11,"is_edge","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_level","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_oneshot","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"remove","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"bitor","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"not","","",5,{"inputs":[{"name":"self"}],"output":{"name":"pollopt"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"eventset"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"ordering"}}],[11,"none","","",6,{"inputs":[],"output":{"name":"eventset"}}],[11,"readable","","",6,{"inputs":[],"output":{"name":"eventset"}}],[11,"writable","","",6,{"inputs":[],"output":{"name":"eventset"}}],[11,"error","","",6,{"inputs":[],"output":{"name":"eventset"}}],[11,"hup","","",6,{"inputs":[],"output":{"name":"eventset"}}],[11,"all","","",6,{"inputs":[],"output":{"name":"eventset"}}],[11,"is_readable","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_writable","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_error","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hup","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":null}],[11,"remove","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":null}],[11,"bits","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"bitor","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitxor","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitand","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"not","","",6,{"inputs":[{"name":"self"}],"output":{"name":"eventset"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ioevent"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"ioevent"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"ioevent"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new IoEvent.",0,{"inputs":[{"name":"eventset"},{"name":"token"}],"output":{"name":"ioevent"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"eventloopconfig"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new configuration for the event loop with all default options specified.",7,{"inputs":[],"output":{"name":"eventloopconfig"}}],[11,"notify_capacity","","Sets the maximum number of messages that can be buffered on the event loop's notification channel before a send will fail.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"messages_per_tick","","Sets the maximum number of messages that can be processed on any tick of the event loop.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"timer_tick_ms","","",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"timer_wheel_size","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"timer_capacity","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"eventloopconfig"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new event loop using default configuration settings. The event loop will not be running yet.",8,{"inputs":[],"output":{"generics":["eventloop"],"name":"result"}}],[11,"configured","","",8,{"inputs":[{"name":"eventloopconfig"}],"output":{"generics":["eventloop"],"name":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a thread-safe way, waking up the event loop if needed.",8,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"timeout_ms","","Schedules a timeout after the requested time interval. When the duration has been reached, Handler::timeout will be invoked passing in the supplied token.",8,null],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it will not be triggered in the future.",8,{"inputs":[{"name":"self"},{"name":"timeout"}],"output":{"name":"bool"}}],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the current iteration.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"is_running","","Indicates whether the event loop is currently running. If it's not it has either stopped or is scheduled to stop on the next tick.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"register","","Registers an IO handle with the event loop.",8,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-Registers an IO handle with the event loop.",8,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever any of the registered handles are ready.",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters an IO handle with the event loop.",8,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"run_once","","Spin the event loop once, with a timeout of one second, and notify the handler if any of the registered handles become ready during that time.",8,{"inputs":[{"name":"self"},{"name":"h"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","",9,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"generics":["notifyerror"],"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["ipaddr","addrparseerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"new","","",10,{"inputs":[],"output":{"generics":["poll"],"name":"result"}}],[11,"register","","",10,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",10,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",10,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","",10,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["usize"],"name":"result"}}],[11,"event","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"ioevent"}}],[11,"events","","",10,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["ioevent"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",12,{"inputs":[],"output":{"generics":["selector"],"name":"result"}}],[11,"id","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"select","","",12,{"inputs":[{"name":"self"},{"name":"events"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"register","","",12,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",12,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",12,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",13,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from","","",13,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from_raw_fd","","",13,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"as_raw_fd","","",13,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"register","","",13,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",13,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",13,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"read","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"timeout"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"as_usize","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"token"}}],[11,"as_usize","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"tcp","","",null,null],[4,"Shutdown","mio::tcp","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut down.",16,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut down.",16,null],[13,"Both","","Both the reading and the writing portions of the [`TcpStream`] should be shut down.",16,null],[3,"TcpStream","","",null,null],[3,"TcpListener","","",null,null],[0,"udp","mio","",null,null],[3,"UdpSocket","mio::udp","",null,null],[0,"unix","mio","",null,null],[3,"PipeReader","mio::unix","",null,null],[3,"PipeWriter","","",null,null],[3,"UnixListener","","",null,null],[3,"UnixSocket","","",null,null],[3,"UnixStream","","",null,null],[3,"EventedFd","","",null,null],[12,"0","","",17,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[0,"prelude","mio","",null,null],[3,"EventLoop","mio::prelude","Single threaded IO event loop.",null,null],[8,"TryRead","","",null,null],[11,"try_read_buf","","",18,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[10,"try_read","","",18,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[10,"try_write","","",19,null],[6,"TimerResult","mio","",null,null],[8,"Handler","","",null,null],[16,"Timeout","","",20,null],[16,"Message","","",20,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated on. `events` indicates the specific operations that are ready to be performed.",20,{"inputs":[{"name":"self"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",20,null],[11,"timeout","","Invoked when a timeout has completed.",20,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",20,{"inputs":[{"name":"self"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",20,{"inputs":[{"name":"self"},{"name":"eventloop"}],"output":null}],[8,"TryRead","","",null,null],[11,"try_read_buf","mio::prelude","",18,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[10,"try_read","mio","",18,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","mio::prelude","",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[10,"try_write","mio","",19,null],[8,"Evented","","A value that may be registered with an `EventLoop`",null,null],[8,"TryAccept","","",null,null],[16,"Output","","",21,null],[10,"accept","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",22,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"localhost","","Creates a new IPv4 address with the address pointing to localhost: 127.0.0.1.",22,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"unspecified","","Creates a new IPv4 address representing an unspecified address: 0.0.0.0",22,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",22,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (0.0.0.0).",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (127.0.0.0/8).",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_private","","Returns [`true`] if this is a private address.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns [`true`] if the address is link-local (169.254.0.0/16).",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable. See [iana-ipv4-special-registry][ipv4-sr].",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (224.0.0.0/4).",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns [`true`] if this is a broadcast address (255.255.255.255).",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible [IPv6 address].",22,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped [IPv6 address].",22,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"from","","",23,null],[11,"from","","It performs the conversion in network order (big-endian).",22,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",22,null],[11,"from","","",23,null],[11,"from","","",23,{"inputs":[{"name":"u128"}],"output":{"name":"ipv6addr"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","mio::tcp","",16,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"from_str","mio","",22,{"inputs":[{"name":"str"}],"output":{"generics":["ipv4addr","addrparseerror"],"name":"result"}}],[11,"from_str","","",23,{"inputs":[{"name":"str"}],"output":{"generics":["ipv6addr","addrparseerror"],"name":"result"}}],[11,"fmt","mio::tcp","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","mio","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"hash","","",22,null],[11,"hash","","",23,null],[11,"clone","mio::tcp","",16,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"clone","mio","",23,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",23,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"localhost","","Creates a new IPv6 address representing localhost: `::1`.",23,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"unspecified","","Creates a new IPv6 address representing the unspecified address: `::`",23,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",23,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (::).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (::1).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns [`true`] if this is a unique local address (fc00::/7).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns [`true`] if the address is unicast and link-local (fe80::/10).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns [`true`] if this is a deprecated unicast site-local address (fec0::/10).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this is an address reserved for documentation (2001:db8::/32).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns [`true`] if the address is a globally routable unicast address.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",23,{"inputs":[{"name":"self"}],"output":{"generics":["ipv6multicastscope"],"name":"option"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (ff00::/8).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an [IPv4 address]. Returns [`None`] if this address is neither IPv4-compatible or IPv4-mapped.",23,{"inputs":[{"name":"self"}],"output":{"generics":["ipv4addr"],"name":"option"}}],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",23,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated on. `events` indicates the specific operations that are ready to be performed.",20,{"inputs":[{"name":"self"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",20,null],[11,"timeout","","Invoked when a timeout has completed.",20,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",20,{"inputs":[{"name":"self"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",20,{"inputs":[{"name":"self"},{"name":"eventloop"}],"output":null}],[11,"try_read_buf","mio::prelude","",18,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[11,"try_write_buf","","",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[11,"fmt","mio::tcp","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified address.",24,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",24,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"peer_addr","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"local_addr","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"shutdown","","",24,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","",24,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",24,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",24,null],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",24,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",24,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",24,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",25,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",25,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"local_addr","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"take_socket_error","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",25,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",25,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",25,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"as_raw_fd","","",24,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",24,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",25,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",25,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"fmt","mio::udp","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",26,{"inputs":[],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",26,{"inputs":[],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"bound","","",26,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"bind","","",26,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"send_to","","",26,null],[11,"recv_from","","",26,null],[11,"set_broadcast","","",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",26,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",26,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",26,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",26,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",26,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",26,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",26,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"fmt","mio::unix","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",27,{"inputs":[],"output":{"generics":["unixsocket"],"name":"result"}}],[11,"connect","","Connect the socket to the specified address",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","Listen for incoming requests",27,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["unixlistener"],"name":"result"}}],[11,"try_clone","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["unixsocket"],"name":"result"}}],[11,"register","","",27,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",27,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",27,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",27,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixsocket"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",28,{"inputs":[{"name":"p"}],"output":{"generics":["unixstream"],"name":"result"}}],[11,"try_clone","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["unixstream"],"name":"result"}}],[11,"read_recv_fd","","",28,null],[11,"try_read_recv_fd","","",28,null],[11,"try_read_buf_recv_fd","","",28,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[11,"write_send_fd","","",28,null],[11,"try_write_send_fd","","",28,null],[11,"try_write_buf_send_fd","","",28,{"inputs":[{"name":"self"},{"name":"b"},{"name":"rawfd"}],"output":{"generics":["option"],"name":"result"}}],[11,"read","","",28,null],[11,"write","","",28,null],[11,"flush","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",28,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",28,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",28,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",28,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixstream"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",29,{"inputs":[{"name":"p"}],"output":{"generics":["unixlistener"],"name":"result"}}],[11,"accept","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"try_clone","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["unixlistener"],"name":"result"}}],[11,"register","","",29,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",29,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",29,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",30,null],[11,"register","","",30,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",30,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",30,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"io"}],"output":{"name":"pipereader"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",31,null],[11,"flush","","",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",31,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",31,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",31,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"io"}],"output":{"name":"pipewriter"}}],[11,"as_raw_fd","","",27,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",27,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixsocket"}}],[11,"as_raw_fd","","",28,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",28,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"as_raw_fd","","",29,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",29,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"as_raw_fd","","",30,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",30,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipereader"}}],[11,"as_raw_fd","","",31,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",31,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipewriter"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"register","","",17,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",17,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",17,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}]],"paths":[[3,"IoEvent"],[3,"Token"],[4,"IpAddr"],[4,"NotifyError"],[3,"BoundedQueue"],[3,"PollOpt"],[3,"EventSet"],[3,"EventLoopConfig"],[3,"EventLoop"],[3,"Sender"],[3,"Poll"],[3,"Events"],[3,"Selector"],[3,"Io"],[3,"Timeout"],[3,"TimerError"],[4,"Shutdown"],[3,"EventedFd"],[8,"TryRead"],[8,"TryWrite"],[8,"Handler"],[8,"TryAccept"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"UnixSocket"],[3,"UnixStream"],[3,"UnixListener"],[3,"PipeReader"],[3,"PipeWriter"]]};
searchIndex["miow"] = {"doc":"","items":[],"paths":[]};
searchIndex["multi"] = {"doc":"","items":[[5,"start_multiple","multi","Starts multiple nodes that are all connected to `host`.",null,{"inputs":[{"name":"str"},{"name":"u16"},{"name":"u16"},{"generics":["str"],"name":"option"},{"name":"u64"}],"output":null}]],"paths":[]};
searchIndex["net2"] = {"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"connect","","Initiate a connection on this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,{"inputs":[{"name":"self"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"generics":["udpbuilder"],"name":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"generics":["udpbuilder"],"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"from_raw_fd","","",0,{"inputs":[{"name":"c_int"}],"output":{"name":"tcpbuilder"}}],[11,"as_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_raw_fd","","",1,{"inputs":[{"name":"c_int"}],"output":{"name":"udpbuilder"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"reuse_port","net2","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"reuse_port","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,null],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,null],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[6,"c_int","nix","",null,null],[4,"c_void","","",null,null],[4,"Errno","","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EAGAIN","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"EALREADY","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"ENOTSUP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"ELOOP","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"EPROCLIM","","",0,null],[13,"EUSERS","","",0,null],[13,"EDQUOT","","",0,null],[13,"ESTALE","","",0,null],[13,"EREMOTE","","",0,null],[13,"EBADRPC","","",0,null],[13,"ERPCMISMATCH","","",0,null],[13,"EPROGUNAVAIL","","",0,null],[13,"EPROGMISMATCH","","",0,null],[13,"EPROCUNAVAIL","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"EFTYPE","","",0,null],[13,"EAUTH","","",0,null],[13,"ENEEDAUTH","","",0,null],[13,"EPWROFF","","",0,null],[13,"EDEVERR","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"EBADEXEC","","",0,null],[13,"EBADARCH","","",0,null],[13,"ESHLIBVERS","","",0,null],[13,"EBADMACHO","","",0,null],[13,"ECANCELED","","",0,null],[13,"EIDRM","","",0,null],[13,"ENOMSG","","",0,null],[13,"EILSEQ","","",0,null],[13,"ENOATTR","","",0,null],[13,"EBADMSG","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"ENODATA","","",0,null],[13,"ENOLINK","","",0,null],[13,"ENOSR","","",0,null],[13,"ENOSTR","","",0,null],[13,"EPROTO","","",0,null],[13,"ETIME","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"ENOPOLICY","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"EQFULL","","",0,null],[4,"Error","","",null,null],[13,"Sys","","",1,null],[13,"InvalidPath","","",1,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EAGAIN","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"EALREADY","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"ENOTSUP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"ELOOP","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"EPROCLIM","","",0,null],[13,"EUSERS","","",0,null],[13,"EDQUOT","","",0,null],[13,"ESTALE","","",0,null],[13,"EREMOTE","","",0,null],[13,"EBADRPC","","",0,null],[13,"ERPCMISMATCH","","",0,null],[13,"EPROGUNAVAIL","","",0,null],[13,"EPROGMISMATCH","","",0,null],[13,"EPROCUNAVAIL","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"EFTYPE","","",0,null],[13,"EAUTH","","",0,null],[13,"ENEEDAUTH","","",0,null],[13,"EPWROFF","","",0,null],[13,"EDEVERR","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"EBADEXEC","","",0,null],[13,"EBADARCH","","",0,null],[13,"ESHLIBVERS","","",0,null],[13,"EBADMACHO","","",0,null],[13,"ECANCELED","","",0,null],[13,"EIDRM","","",0,null],[13,"ENOMSG","","",0,null],[13,"EILSEQ","","",0,null],[13,"ENOATTR","","",0,null],[13,"EBADMSG","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"ENODATA","","",0,null],[13,"ENOLINK","","",0,null],[13,"ENOSR","","",0,null],[13,"ENOSTR","","",0,null],[13,"EPROTO","","",0,null],[13,"ETIME","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"ENOPOLICY","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"EQFULL","","",0,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"fmt","nix","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errno"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"errno"}],"output":{"name":"bool"}}],[17,"ELAST","nix::errno","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EL2NSYNC","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed information about the error can be found in `errno`",null,null],[10,"sentinel","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"last","nix","",0,{"inputs":[],"output":{"name":"self"}}],[11,"desc","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i32","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",0,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This should not be used when `-1` is not the errno sentinel value.",0,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"features","","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"OFlag","nix::fcntl","",null,null],[3,"FdFlag","","",null,null],[3,"flock","","",null,null],[12,"l_start","","",3,null],[12,"l_len","","",3,null],[12,"l_pid","","",3,null],[12,"l_type","","",3,null],[12,"l_whence","","",3,null],[12,"l_sysid","","",3,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",4,null],[13,"F_DUPFD_CLOEXEC","","",4,null],[13,"F_GETFD","","",4,null],[13,"F_SETFD","","",4,null],[13,"F_GETFL","","",4,null],[13,"F_SETFL","","",4,null],[13,"F_SETLK","","",4,null],[13,"F_SETLKW","","",4,null],[13,"F_GETLK","","",4,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",5,null],[13,"LockExclusive","","",5,null],[13,"Unlock","","",5,null],[13,"LockSharedNonblock","","",5,null],[13,"LockExclusiveNonblock","","",5,null],[13,"UnlockNonblock","","",5,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"generics":["c_int"],"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"flock"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"oflag"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",6,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",6,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",6,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",6,{"inputs":[{"name":"c_int"}],"output":{"generics":["oflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",6,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",6,{"inputs":[{"name":"self"}],"output":{"name":"oflag"}}],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",7,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",7,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,{"inputs":[{"name":"c_int"}],"output":{"generics":["fdflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",7,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",7,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_FSYNC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","",null,null],[12,"fd","","",8,null],[12,"events","","",8,null],[12,"revents","","",8,null],[3,"EventFlags","","",null,null],[5,"poll","","",null,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"eventflags"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"ordering"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",9,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",9,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,{"inputs":[{"name":"self"}],"output":{"name":"c_short"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",9,{"inputs":[{"name":"c_short"}],"output":{"generics":["eventflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",9,{"inputs":[{"name":"c_short"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",9,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"not","","Returns the complement of this set of flags.",9,{"inputs":[{"name":"self"}],"output":{"name":"eventflags"}}],[11,"from_iter","","",9,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"nfds_t","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,{"inputs":[{"name":"p"}],"output":{"generics":["c_uint"],"name":"result"}}],[0,"sys","nix","",null,null],[0,"event","nix::sys","",null,null],[3,"KEvent","nix::sys::event","",null,null],[12,"ident","","",10,null],[12,"filter","","",10,null],[12,"flags","","",10,null],[12,"fflags","","",10,null],[12,"data","","",10,null],[12,"udata","","",10,null],[3,"EventFlag","","",null,null],[3,"FilterFlag","","",null,null],[4,"EventFilter","","",null,null],[13,"EVFILT_READ","","",11,null],[13,"EVFILT_WRITE","","",11,null],[13,"EVFILT_AIO","","",11,null],[13,"EVFILT_VNODE","","",11,null],[13,"EVFILT_PROC","","",11,null],[13,"EVFILT_SIGNAL","","",11,null],[13,"EVFILT_TIMER","","",11,null],[13,"EVFILT_MACHPORT","","",11,null],[13,"EVFILT_FS","","",11,null],[13,"EVFILT_USER","","",11,null],[13,"EVFILT_VM","","",11,null],[13,"EVFILT_SYSCOUNT","","",11,null],[5,"kqueue","","",null,{"inputs":[],"output":{"generics":["rawfd"],"name":"result"}}],[5,"kevent","","",null,null],[5,"kevent_ts","","",null,null],[5,"ev_set","","",null,{"inputs":[{"name":"kevent"},{"name":"usize"},{"name":"eventfilter"},{"name":"eventflag"},{"name":"filterflag"},{"name":"usize"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"kevent"}}],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_ERROR","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_RESOURCEEND","","",null,null],[17,"NOTE_APPACTIVE","","",null,null],[17,"NOTE_APPBACKGROUND","","",null,null],[17,"NOTE_APPNONUI","","",null,null],[17,"NOTE_APPINACTIVE","","",null,null],[17,"NOTE_APPALLSTATES","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_OOBAND","","",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"eventfilter"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"eventfilter"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"eventflag"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"ordering"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"eventflag"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"eventflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"u16"}],"output":{"generics":["eventflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",12,{"inputs":[{"name":"u16"}],"output":{"name":"eventflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"not","","Returns the complement of this set of flags.",12,{"inputs":[{"name":"self"}],"output":{"name":"eventflag"}}],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"eventflag"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"filterflag"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[],"output":{"name":"filterflag"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[],"output":{"name":"filterflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"u32"}],"output":{"generics":["filterflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",13,{"inputs":[{"name":"u32"}],"output":{"name":"filterflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"not","","Returns the complement of this set of flags.",13,{"inputs":[{"name":"self"}],"output":{"name":"filterflag"}}],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"filterflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[0,"signal","","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[3,"SaFlag","","",null,null],[3,"SigFlag","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",14,null],[13,"SigIgn","","",14,null],[13,"Handler","","",14,null],[13,"SigAction","","",14,null],[5,"sigaction","","",null,{"inputs":[{"name":"signum"},{"name":"sigaction"}],"output":{"generics":["sigaction"],"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"sigflag"},{"generics":["sigset"],"name":"option"},{"generics":["sigset"],"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signum"}],"output":{"name":"result"}}],[5,"raise","","",null,{"inputs":[{"name":"signum"}],"output":{"name":"result"}}],[6,"SigNum","","",null,null],[17,"SIGEMT","","",null,null],[17,"NSIG","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"saflag"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"ordering"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",15,{"inputs":[],"output":{"name":"saflag"}}],[11,"all","","Returns the set containing all flags.",15,{"inputs":[],"output":{"name":"saflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",15,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",15,{"inputs":[{"name":"c_int"}],"output":{"generics":["saflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",15,{"inputs":[{"name":"c_int"}],"output":{"name":"saflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",15,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"not","","Returns the complement of this set of flags.",15,{"inputs":[{"name":"self"}],"output":{"name":"saflag"}}],[11,"from_iter","","",15,{"inputs":[{"name":"t"}],"output":{"name":"saflag"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sigflag"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"ordering"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",16,{"inputs":[],"output":{"name":"sigflag"}}],[11,"all","","Returns the set containing all flags.",16,{"inputs":[],"output":{"name":"sigflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",16,{"inputs":[{"name":"c_int"}],"output":{"generics":["sigflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",16,{"inputs":[{"name":"c_int"}],"output":{"name":"sigflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",16,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"not","","Returns the complement of this set of flags.",16,{"inputs":[{"name":"self"}],"output":{"name":"sigflag"}}],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"sigflag"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sigset"}}],[11,"all","","",17,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",17,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"signum"}],"output":{"name":"result"}}],[11,"remove","","",17,{"inputs":[{"name":"self"},{"name":"signum"}],"output":{"name":"result"}}],[11,"contains","","",17,{"inputs":[{"name":"self"},{"name":"signum"}],"output":{"generics":["bool"],"name":"result"}}],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",17,{"inputs":[],"output":{"generics":["sigset"],"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",17,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"generics":["sigset"],"name":"result"}}],[11,"wait","","Suspends execution of the calling thread until one of the signals in the signal mask becomes pending, and returns the accepted signal.",17,{"inputs":[{"name":"self"}],"output":{"generics":["signum"],"name":"result"}}],[11,"as_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"sighandler"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"sighandler"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"sighandler"}],"output":{"name":"bool"}}],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the type of the `handler` argument.",18,{"inputs":[{"name":"sighandler"},{"name":"saflag"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",19,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",20,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",21,null],[12,"sa_family","","",21,null],[12,"sa_data","","",21,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",22,null],[12,"sin_family","","",22,null],[12,"sin_port","","",22,null],[12,"sin_addr","","",22,null],[12,"sin_zero","","",22,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",23,null],[12,"sin6_family","","",23,null],[12,"sin6_port","","",23,null],[12,"sin6_flowinfo","","",23,null],[12,"sin6_addr","","",23,null],[12,"sin6_scope_id","","",23,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",24,null],[12,"sun_family","","",24,null],[12,"sun_path","","",24,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",25,null],[12,"ss_family","","",25,null],[3,"UnixAddr","","A wrapper around sockaddr_un. We track the length of sun_path, because it may not be null-terminated (unconnected and abstract sockets). Note that the actual sockaddr length is greater by size_of::<sa_family_t>().",null,null],[12,"0","","",26,null],[12,"1","","",26,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",27,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",28,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",29,null],[12,"imr_interface","","",29,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",30,null],[12,"ipv6mr_interface","","",30,null],[3,"MsgFlags","","",null,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The size and alignment match that of a cmsghdr followed by a T, but the fields are not accessible, as the actual types will change on a call to recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",31,null],[12,"address","","",31,null],[12,"flags","","",31,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",32,null],[12,"l_linger","","",32,null],[3,"ucred","","",null,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",33,null],[13,"Inet","","",33,null],[13,"Inet6","","",33,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",34,null],[13,"Unix","","",34,null],[4,"InetAddr","","",null,null],[13,"V4","","",35,null],[13,"V6","","",35,null],[4,"IpAddr","","",null,null],[13,"V4","","",36,null],[13,"V6","","",36,null],[4,"SockType","","",null,null],[13,"Stream","","",37,null],[13,"Datagram","","",37,null],[13,"SeqPacket","","",37,null],[13,"Raw","","",37,null],[13,"Rdm","","",37,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may be added to this enum; do not exhaustively pattern-match it. Further reading",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file descriptors passed between processes. See the description in the \"Ancillary messages\" section of the unix(7) man page.",38,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an argument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",39,null],[13,"Tcp","","",39,null],[13,"Ip","","",39,null],[13,"Ipv6","","",39,null],[13,"Udp","","",39,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",40,null],[13,"Write","","Further  transmissions will be disallowed.",40,null],[13,"Both","","Further receptions and transmissions will be disallowed.",40,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied by ancillary data. Optionally direct the message at the given address, as with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and optionally receive ancillary data into the provided buffer. If no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"},{"name":"c_int"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of bytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns the number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,null],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["sockaddr"],"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["sockaddr"],"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"generics":["sockaddr"],"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"addressfamily"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"from_std","","",35,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",35,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",35,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",35,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"to_std","","",35,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",35,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",35,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",36,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",36,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",27,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",27,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",27,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",27,null],[11,"to_std","","",27,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",27,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"new","","",28,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",28,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",28,null],[11,"to_std","","",28,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new sockaddr_un representing a filesystem path.",26,{"inputs":[{"name":"p"}],"output":{"generics":["unixaddr"],"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the \"abstract namespace\". This is a Linux-specific extension, primarily used to allow chrooted processes to communicate with specific daemons.",26,null],[11,"path","","If this address represents a filesystem path, return that path.",26,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",26,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",34,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",34,{"inputs":[{"name":"p"}],"output":{"generics":["sockaddr"],"name":"result"}}],[11,"family","","",34,{"inputs":[{"name":"self"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",34,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",34,null],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",34,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"msgflags"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"ordering"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",41,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",41,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",41,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",41,{"inputs":[{"name":"c_int"}],"output":{"generics":["msgflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",41,{"inputs":[{"name":"c_int"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",41,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"not","","Returns the complement of this set of flags.",41,{"inputs":[{"name":"self"}],"output":{"name":"msgflags"}}],[11,"from_iter","","",41,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",29,{"inputs":[{"name":"ipv4addr"},{"generics":["ipv4addr"],"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",30,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"TcpKeepAlive","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"SockType","","",null,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"reuseaddr"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",42,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",42,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"reuseport"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",43,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",43,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tcpnodelay"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",44,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",44,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",45,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"linger"}],"output":{"name":"result"}}],[11,"get","","",45,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["linger"],"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"ipaddmembership"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",46,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"ipdropmembership"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",47,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addmembership"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",48,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ipv6dropmembership"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",49,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ipmulticastttl"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",50,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","",50,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["u8"],"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"ipmulticastloop"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",51,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",51,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"receivetimeout"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",52,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",52,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["timeval"],"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"sendtimeout"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",53,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",53,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["timeval"],"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"broadcast"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",54,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",54,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"oobinline"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",55,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",55,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"socketerror"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",56,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["i32"],"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"keepalive"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",57,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",57,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"tcpkeepalive"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",58,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get","","",58,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["u32"],"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"rcvbuf"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",59,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",59,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["usize"],"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"sndbuf"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",60,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",60,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["usize"],"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"socktype"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",61,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["socktype"],"name":"result"}}],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LABEL","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NOTIFYCONFLICT","","",null,null],[17,"SO_NP_EXTENSIONS","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PEERLABEL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RANDOMPORT","","",null,null],[17,"SO_RESTRICTIONS","","",null,null],[17,"SO_RESTRICT_DENYIN","","",null,null],[17,"SO_RESTRICT_DENYOUT","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_REUSESHAREUID","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TIMESTAMP_MONOTONIC","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"SO_RESTRICT_DENYSET","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `getsockopt`",null,null],[16,"Val","","",62,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `setsockopt`",null,null],[16,"Val","","",63,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"socktype"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"sockflag"}}],[11,"partial_cmp","","",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"cmp","","",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"hash","","",64,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",64,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",64,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",64,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",64,{"inputs":[{"name":"c_int"}],"output":{"generics":["sockflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",64,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",64,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",64,{"inputs":[{"name":"self"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",64,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace. The structure is used only for space, so the fields are uninitialized.",65,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this msghdr.",31,{"inputs":[{"name":"self"}],"output":{"name":"cmsgiterator"}}],[11,"next","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["controlmessage"],"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"ucred"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"ucred"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",68,null],[12,"st_mode","","",68,null],[12,"st_nlink","","",68,null],[12,"st_ino","","",68,null],[12,"st_uid","","",68,null],[12,"st_gid","","",68,null],[12,"st_rdev","","",68,null],[12,"st_atime","","",68,null],[12,"st_atime_nsec","","",68,null],[12,"st_mtime","","",68,null],[12,"st_mtime_nsec","","",68,null],[12,"st_ctime","","",68,null],[12,"st_ctime_nsec","","",68,null],[12,"st_birthtime","","",68,null],[12,"st_birthtime_nsec","","",68,null],[12,"st_size","","",68,null],[12,"st_blocks","","",68,null],[12,"st_blksize","","",68,null],[12,"st_flags","","",68,null],[12,"st_gen","","",68,null],[12,"st_lspare","","",68,null],[12,"st_qspare","","",68,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["filestat"],"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["filestat"],"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["filestat"],"name":"result"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"sflag"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"cmp","","",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"hash","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",69,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",69,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",69,{"inputs":[{"name":"self"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",69,{"inputs":[{"name":"mode_t"}],"output":{"generics":["sflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",69,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",69,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"not","","Returns the complement of this set of flags.",69,{"inputs":[{"name":"self"}],"output":{"name":"sflag"}}],[11,"from_iter","","",69,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"cmp","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"hash","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",70,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",70,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",70,{"inputs":[{"name":"self"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",70,{"inputs":[{"name":"mode_t"}],"output":{"generics":["mode"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",70,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"not","","Returns the complement of this set of flags.",70,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"from_iter","","",70,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",71,null],[12,"c_oflag","","",71,null],[12,"c_cflag","","",71,null],[12,"c_lflag","","",71,null],[12,"c_cc","","",71,null],[12,"c_ispeed","","",71,null],[12,"c_ospeed","","",71,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",72,null],[13,"TCSADRAIN","","",72,null],[13,"TCSAFLUSH","","",72,null],[13,"TCSASOFT","","",72,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",73,null],[13,"TCOFLUSH","","",73,null],[13,"TCIOFLUSH","","",73,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",74,null],[13,"TCOON","","",74,null],[13,"TCIOFF","","",74,null],[13,"TCION","","",74,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["termios"],"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"inputflags"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"cmp","","",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"hash","","",75,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",75,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",75,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",75,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",75,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["inputflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",75,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",75,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",75,{"inputs":[{"name":"self"}],"output":{"name":"inputflags"}}],[11,"from_iter","","",75,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"outputflags"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"cmp","","",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"hash","","",76,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",76,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",76,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",76,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",76,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["outputflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",76,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",76,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",76,{"inputs":[{"name":"self"}],"output":{"name":"outputflags"}}],[11,"from_iter","","",76,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"controlflags"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"cmp","","",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"hash","","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",77,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",77,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",77,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",77,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["controlflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",77,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",77,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",77,{"inputs":[{"name":"self"}],"output":{"name":"controlflags"}}],[11,"from_iter","","",77,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"localflags"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"cmp","","",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",78,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",78,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",78,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",78,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["localflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",78,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",78,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",78,{"inputs":[{"name":"self"}],"output":{"name":"localflags"}}],[11,"from_iter","","",78,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"setarg"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"flusharg"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"flowarg"}}],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VDSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"VSTATUS","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CIGNORE","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CCTS_OFLOW","","",null,null],[17,"CRTSCTS","","",null,null],[17,"CRTS_IFLOW","","",null,null],[17,"CDTR_IFLOW","","",null,null],[17,"CDSR_OFLOW","","",null,null],[17,"CCAR_OFLOW","","",null,null],[17,"MDMBUF","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"ALTWERASE","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"NOKERNINFO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"NL2","","",null,null],[17,"NL3","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",79,null],[13,"Signaled","","",79,null],[13,"Stopped","","",79,null],[13,"Continued","","",79,null],[13,"StillAlive","","",79,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"generics":["waitpidflag"],"name":"option"}],"output":{"generics":["waitstatus"],"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"generics":["waitstatus"],"name":"result"}}],[17,"WNOHANG","","",null,null],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"waitpidflag"}}],[11,"partial_cmp","","",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"cmp","","",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"hash","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",80,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",80,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",80,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",80,{"inputs":[{"name":"c_int"}],"output":{"generics":["waitpidflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",80,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",80,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"not","","Returns the complement of this set of flags.",80,{"inputs":[{"name":"self"}],"output":{"name":"waitpidflag"}}],[11,"from_iter","","",80,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"waitstatus"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"mman","nix::sys","",null,null],[3,"MapFlags","nix::sys::mman","",null,null],[3,"MsFlags","","",null,null],[3,"ProtFlags","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically a higher-level abstraction will hide the unsafe interactions with the mmap'd region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"mapflags"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"le","","",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"gt","","",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"ge","","",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"cmp","","",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"ordering"}}],[11,"hash","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",81,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",81,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",81,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",81,{"inputs":[{"name":"c_int"}],"output":{"generics":["mapflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",81,{"inputs":[{"name":"c_int"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",81,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"not","","Returns the complement of this set of flags.",81,{"inputs":[{"name":"self"}],"output":{"name":"mapflags"}}],[11,"from_iter","","",81,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"partial_cmp","","",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"cmp","","",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"hash","","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",82,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",82,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",82,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",82,{"inputs":[{"name":"c_int"}],"output":{"generics":["msflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",82,{"inputs":[{"name":"c_int"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",82,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",82,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"from_iter","","",82,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[6,"MmapAdvise","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"protflags"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"cmp","","",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"ordering"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",83,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",83,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",83,{"inputs":[{"name":"c_int"}],"output":{"generics":["protflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",83,{"inputs":[{"name":"c_int"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",83,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"not","","Returns the complement of this set of flags.",83,{"inputs":[{"name":"self"}],"output":{"name":"protflags"}}],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",84,null],[11,"from_slice","","",84,null],[11,"from_mut_slice","","",84,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",85,null],[12,"tv_usec","","",85,null],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"cmp","","",85,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zero","","",85,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",85,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",85,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",85,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",85,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",85,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",85,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","",85,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","",85,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",85,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",85,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"neg","","",85,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"add","","",85,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"sub","","",85,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"mul","","",85,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"div","","",85,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"generics":["fdset"],"name":"option"},{"generics":["fdset"],"name":"option"},{"generics":["fdset"],"name":"option"},{"generics":["timeval"],"name":"option"}],"output":{"generics":["c_int"],"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"new","","",86,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",86,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":null}],[11,"remove","","",86,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":null}],[11,"contains","","",86,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"bool"}}],[11,"clear","","",86,{"inputs":[{"name":"self"}],"output":null}],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to most efficient use of the filesystem",87,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this filesystem",87,null],[12,"f_blocks","","Total number of blocks on the filesystem",87,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those reserved for root",87,null],[12,"f_bavail","","Number of blocks available to non-root users",87,null],[12,"f_files","","Total number of inodes available on the filesystem",87,null],[12,"f_ffree","","Number of inodes available on the filesystem",87,null],[12,"f_favail","","Number of inodes available to non-root users",87,null],[12,"f_fsid","","File System ID",87,null],[12,"f_flag","","Mount Flags",87,null],[12,"f_namemax","","Maximum filename length",87,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"fsflags"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"cmp","","",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"ordering"}}],[11,"hash","","",88,null],[11,"default","","",88,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",88,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",88,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",88,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",88,{"inputs":[{"name":"c_ulong"}],"output":{"generics":["fsflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",88,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",88,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"not","","Returns the complement of this set of flags.",88,{"inputs":[{"name":"self"}],"output":{"name":"fsflags"}}],[11,"from_iter","","",88,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"for_path","","Create a new `Statvfs` object and fill it with information about the mount that contains `path`",87,{"inputs":[{"name":"p"}],"output":{"generics":["statvfs"],"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",87,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",87,{"inputs":[{"name":"t"}],"output":{"generics":["statvfs"],"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"default","","Create a statvfs object initialized to all zeros",87,{"inputs":[],"output":{"name":"self"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",89,null],[13,"Child","","",89,null],[5,"fork","","",null,{"inputs":[],"output":{"generics":["fork"],"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"setpgid","","",null,{"inputs":[{"name":"pid_t"},{"name":"pid_t"}],"output":{"name":"result"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chown","","",null,{"inputs":[{"name":"p"},{"generics":["uid_t"],"name":"option"},{"generics":["gid_t"],"name":"option"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"getegid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"setuid","","",null,{"inputs":[{"name":"uid_t"}],"output":{"name":"result"}}],[5,"setgid","","",null,{"inputs":[{"name":"gid_t"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"fork"}}],[11,"is_child","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parent","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",90,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"with_nix_path","","",90,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_errno","","",1,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errno"}}],[11,"from","","",1,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","nix::sys::socket","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","nix::sys::stat","",68,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","nix::sys::socket","",20,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}]],"paths":[[4,"Errno"],[4,"Error"],[8,"ErrnoSentinel"],[3,"flock"],[4,"FcntlArg"],[4,"FlockArg"],[3,"OFlag"],[3,"FdFlag"],[3,"PollFd"],[3,"EventFlags"],[3,"KEvent"],[4,"EventFilter"],[3,"EventFlag"],[3,"FilterFlag"],[4,"SigHandler"],[3,"SaFlag"],[3,"SigFlag"],[3,"SigSet"],[3,"SigAction"],[3,"in_addr"],[3,"in6_addr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"MsgFlags"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"TcpKeepAlive"],[3,"RcvBuf"],[3,"SndBuf"],[3,"SockType"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"ucred"],[3,"FileStat"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"MapFlags"],[3,"MsFlags"],[3,"ProtFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"Statvfs"],[3,"FsFlags"],[4,"Fork"],[8,"NixPath"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",13,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"sign"},{"generics":["u32"],"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",17,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",17,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",17,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",17,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",17,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",17,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",17,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",17,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",17,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",17,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",17,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",17,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",17,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",17,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",17,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",17,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",17,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["complex"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"generics":["complex"],"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"}],"output":{"generics":["complex"],"name":"result"}}],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"div_rem","","",17,null],[11,"div_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",17,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"div_rem","","",18,null],[11,"div_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"generics":["biguint"],"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"generics":["bigint"],"name":"result"}}],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_i64","","",17,{"inputs":[{"name":"i64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_u64","","",17,{"inputs":[{"name":"u64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_f64","","",17,{"inputs":[{"name":"f64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"shl_assign","","",18,null],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"shr","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"bitand_assign","","",18,null],[11,"bitand_assign","","",18,null],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"rem_assign","","",18,null],[11,"rem_assign","","",18,null],[11,"rem_assign","","",18,null],[11,"rem_assign","","",18,null],[11,"rem_assign","","",18,null],[11,"rem_assign","","",18,null],[11,"rem_assign","","",18,null],[11,"div_assign","","",18,null],[11,"div_assign","","",18,null],[11,"div_assign","","",18,null],[11,"div_assign","","",18,null],[11,"div_assign","","",18,null],[11,"div_assign","","",18,null],[11,"div_assign","","",18,null],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",17,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"to_bigint","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_bigint","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"add_assign","","",18,null],[11,"add_assign","","",18,null],[11,"add_assign","","",18,null],[11,"add_assign","","",18,null],[11,"add_assign","","",18,null],[11,"add_assign","","",18,null],[11,"add_assign","","",18,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"shr_assign","","",18,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"zero","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"one","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"bitxor_assign","","",18,null],[11,"bitxor_assign","","",18,null],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"bitor_assign","","",18,null],[11,"bitor_assign","","",18,null],[11,"abs","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub_assign","","",18,null],[11,"sub_assign","","",18,null],[11,"sub_assign","","",18,null],[11,"sub_assign","","",18,null],[11,"sub_assign","","",18,null],[11,"sub_assign","","",18,null],[11,"sub_assign","","",18,null],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"hash","","",18,null],[11,"hash","","",17,null],[11,"neg","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"neg","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_i64","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"to_i64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"mul_assign","","",18,null],[11,"mul_assign","","",18,null],[11,"mul_assign","","",18,null],[11,"mul_assign","","",18,null],[11,"mul_assign","","",18,null],[11,"mul_assign","","",18,null],[11,"mul_assign","","",18,null],[11,"shl","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shl","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"to_biguint","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"to_biguint","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",18,{"inputs":[{"generics":["u32"],"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",18,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",18,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",18,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",18,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",18,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",18,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"generics":["biguint"],"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"checked_add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"generics":["bigdigit"],"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",2,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"generics":["sign"],"name":"result"}}],[11,"neg","","Negate Sign value.",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"generics":["bigint"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_bigint","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_biguint","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"generics":["bigdigit"],"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",3,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",3,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[11,"add","num_bigint::big_digit","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[6,"BigDigit"],[6,"DoubleBigDigit"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"generics":["complex"],"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"self"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"generics":["ratio"],"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"generics":["bigrational"],"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"approximate_float","","",0,{"inputs":[{"name":"f"}],"output":{"generics":["ratio"],"name":"option"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["protobuf"] = {"doc":"","items":[[3,"UnknownFields","protobuf","",null,null],[12,"fields","","",0,null],[3,"UnknownFieldsIter","","",null,null],[3,"UnknownValues","","",null,null],[12,"fixed32","","",1,null],[12,"fixed64","","",1,null],[12,"varint","","",1,null],[12,"length_delimited","","",1,null],[3,"UnknownValuesIter","","",null,null],[3,"CachedSize","","Cached size field used in generated code. It is always equal to itself to simplify generated code. (Generated code can use `#[derive(Eq)]`).",null,null],[4,"UnknownValue","","",null,null],[13,"Fixed32","","",2,null],[13,"Fixed64","","",2,null],[13,"Varint","","",2,null],[13,"LengthDelimited","","",2,null],[4,"UnknownValueRef","","",null,null],[13,"Fixed32","","",3,null],[13,"Fixed64","","",3,null],[13,"Varint","","",3,null],[13,"LengthDelimited","","",3,null],[0,"descriptor","","",null,null],[3,"FileDescriptorSet","protobuf::descriptor","",null,null],[3,"FileDescriptorProto","","",null,null],[3,"DescriptorProto","","",null,null],[3,"DescriptorProto_ExtensionRange","","",null,null],[3,"DescriptorProto_ReservedRange","","",null,null],[3,"FieldDescriptorProto","","",null,null],[3,"OneofDescriptorProto","","",null,null],[3,"EnumDescriptorProto","","",null,null],[3,"EnumValueDescriptorProto","","",null,null],[3,"ServiceDescriptorProto","","",null,null],[3,"MethodDescriptorProto","","",null,null],[3,"FileOptions","","",null,null],[3,"MessageOptions","","",null,null],[3,"FieldOptions","","",null,null],[3,"OneofOptions","","",null,null],[3,"EnumOptions","","",null,null],[3,"EnumValueOptions","","",null,null],[3,"ServiceOptions","","",null,null],[3,"MethodOptions","","",null,null],[3,"UninterpretedOption","","",null,null],[3,"UninterpretedOption_NamePart","","",null,null],[3,"SourceCodeInfo","","",null,null],[3,"SourceCodeInfo_Location","","",null,null],[3,"GeneratedCodeInfo","","",null,null],[3,"GeneratedCodeInfo_Annotation","","",null,null],[4,"FieldDescriptorProto_Type","","",null,null],[13,"TYPE_DOUBLE","","",4,null],[13,"TYPE_FLOAT","","",4,null],[13,"TYPE_INT64","","",4,null],[13,"TYPE_UINT64","","",4,null],[13,"TYPE_INT32","","",4,null],[13,"TYPE_FIXED64","","",4,null],[13,"TYPE_FIXED32","","",4,null],[13,"TYPE_BOOL","","",4,null],[13,"TYPE_STRING","","",4,null],[13,"TYPE_GROUP","","",4,null],[13,"TYPE_MESSAGE","","",4,null],[13,"TYPE_BYTES","","",4,null],[13,"TYPE_UINT32","","",4,null],[13,"TYPE_ENUM","","",4,null],[13,"TYPE_SFIXED32","","",4,null],[13,"TYPE_SFIXED64","","",4,null],[13,"TYPE_SINT32","","",4,null],[13,"TYPE_SINT64","","",4,null],[4,"FieldDescriptorProto_Label","","",null,null],[13,"LABEL_OPTIONAL","","",5,null],[13,"LABEL_REQUIRED","","",5,null],[13,"LABEL_REPEATED","","",5,null],[4,"FileOptions_OptimizeMode","","",null,null],[13,"SPEED","","",6,null],[13,"CODE_SIZE","","",6,null],[13,"LITE_RUNTIME","","",6,null],[4,"FieldOptions_CType","","",null,null],[13,"STRING","","",7,null],[13,"CORD","","",7,null],[13,"STRING_PIECE","","",7,null],[4,"FieldOptions_JSType","","",null,null],[13,"JS_NORMAL","","",8,null],[13,"JS_STRING","","",8,null],[13,"JS_NUMBER","","",8,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"filedescriptorset"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"filedescriptorset"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"filedescriptorset"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"default_instance","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"clear_file","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"set_file","","",9,{"inputs":[{"name":"self"},{"generics":["filedescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_file","","",9,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_file","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["filedescriptorproto"],"name":"repeatedfield"}}],[11,"get_file","","",9,null],[11,"is_initialized","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",9,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",9,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",9,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",9,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",9,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",9,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",9,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"descriptor_static","","",9,{"inputs":[{"generics":["filedescriptorset"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"filedescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"filedescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"filedescriptorproto"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"default_instance","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"clear_name","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_package","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_package","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_package","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_package","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_package","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_package","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_dependency","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_dependency","","",10,{"inputs":[{"name":"self"},{"generics":["string"],"name":"repeatedfield"}],"output":null}],[11,"mut_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"repeatedfield"}}],[11,"get_dependency","","",10,null],[11,"clear_public_dependency","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_public_dependency","","",10,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"vec"}],"output":null}],[11,"mut_public_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_public_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"get_public_dependency","","",10,null],[11,"clear_weak_dependency","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_weak_dependency","","",10,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"vec"}],"output":null}],[11,"mut_weak_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_weak_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"get_weak_dependency","","",10,null],[11,"clear_message_type","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_message_type","","",10,{"inputs":[{"name":"self"},{"generics":["descriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_message_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_message_type","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["descriptorproto"],"name":"repeatedfield"}}],[11,"get_message_type","","",10,null],[11,"clear_enum_type","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_enum_type","","",10,{"inputs":[{"name":"self"},{"generics":["enumdescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_enum_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_enum_type","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["enumdescriptorproto"],"name":"repeatedfield"}}],[11,"get_enum_type","","",10,null],[11,"clear_service","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_service","","",10,{"inputs":[{"name":"self"},{"generics":["servicedescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_service","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_service","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["servicedescriptorproto"],"name":"repeatedfield"}}],[11,"get_service","","",10,null],[11,"clear_extension","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_extension","","",10,{"inputs":[{"name":"self"},{"generics":["fielddescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_extension","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_extension","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["fielddescriptorproto"],"name":"repeatedfield"}}],[11,"get_extension","","",10,null],[11,"clear_options","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",10,{"inputs":[{"name":"self"},{"name":"fileoptions"}],"output":null}],[11,"mut_options","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions"}}],[11,"take_options","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions"}}],[11,"get_options","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions"}}],[11,"clear_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_source_code_info","","",10,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo"}],"output":null}],[11,"mut_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo"}}],[11,"take_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo"}}],[11,"get_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo"}}],[11,"clear_syntax","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_syntax","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_syntax","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_syntax","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_syntax","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_syntax","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",10,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",10,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",10,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",10,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",10,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"descriptor_static","","",10,{"inputs":[{"generics":["filedescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"descriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"descriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"descriptorproto"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"default_instance","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"clear_name","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",11,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_field","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_field","","",11,{"inputs":[{"name":"self"},{"generics":["fielddescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_field","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_field","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["fielddescriptorproto"],"name":"repeatedfield"}}],[11,"get_field","","",11,null],[11,"clear_extension","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_extension","","",11,{"inputs":[{"name":"self"},{"generics":["fielddescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_extension","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_extension","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["fielddescriptorproto"],"name":"repeatedfield"}}],[11,"get_extension","","",11,null],[11,"clear_nested_type","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_nested_type","","",11,{"inputs":[{"name":"self"},{"generics":["descriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_nested_type","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_nested_type","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["descriptorproto"],"name":"repeatedfield"}}],[11,"get_nested_type","","",11,null],[11,"clear_enum_type","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_enum_type","","",11,{"inputs":[{"name":"self"},{"generics":["enumdescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_enum_type","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_enum_type","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["enumdescriptorproto"],"name":"repeatedfield"}}],[11,"get_enum_type","","",11,null],[11,"clear_extension_range","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_extension_range","","",11,{"inputs":[{"name":"self"},{"generics":["descriptorproto_extensionrange"],"name":"repeatedfield"}],"output":null}],[11,"mut_extension_range","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_extension_range","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["descriptorproto_extensionrange"],"name":"repeatedfield"}}],[11,"get_extension_range","","",11,null],[11,"clear_oneof_decl","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_oneof_decl","","",11,{"inputs":[{"name":"self"},{"generics":["oneofdescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_oneof_decl","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_oneof_decl","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["oneofdescriptorproto"],"name":"repeatedfield"}}],[11,"get_oneof_decl","","",11,null],[11,"clear_options","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",11,{"inputs":[{"name":"self"},{"name":"messageoptions"}],"output":null}],[11,"mut_options","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messageoptions"}}],[11,"take_options","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messageoptions"}}],[11,"get_options","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messageoptions"}}],[11,"clear_reserved_range","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_reserved_range","","",11,{"inputs":[{"name":"self"},{"generics":["descriptorproto_reservedrange"],"name":"repeatedfield"}],"output":null}],[11,"mut_reserved_range","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_reserved_range","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["descriptorproto_reservedrange"],"name":"repeatedfield"}}],[11,"get_reserved_range","","",11,null],[11,"clear_reserved_name","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_reserved_name","","",11,{"inputs":[{"name":"self"},{"generics":["string"],"name":"repeatedfield"}],"output":null}],[11,"mut_reserved_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_reserved_name","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"repeatedfield"}}],[11,"get_reserved_name","","",11,null],[11,"is_initialized","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",11,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",11,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",11,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",11,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"descriptor_static","","",11,{"inputs":[{"generics":["descriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"descriptorproto_extensionrange"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"descriptorproto_extensionrange"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"descriptorproto_extensionrange"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"default_instance","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"clear_start","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"has_start","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_start","","",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_start","","",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_end","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"has_end","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_end","","",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_end","","",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",12,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",12,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",12,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",12,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",12,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",12,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",12,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"descriptor_static","","",12,{"inputs":[{"generics":["descriptorproto_extensionrange"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"descriptorproto_reservedrange"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"descriptorproto_reservedrange"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"descriptorproto_reservedrange"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"default_instance","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"clear_start","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"has_start","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_start","","",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_start","","",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_end","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"has_end","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_end","","",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_end","","",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",13,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",13,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",13,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",13,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",13,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"descriptor_static","","",13,{"inputs":[{"generics":["descriptorproto_reservedrange"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"default_instance","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"clear_name","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_number","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_number","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_number","","",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_number","","",14,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_label","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_label","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_label","","",14,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto_label"}],"output":null}],[11,"get_label","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto_label"}}],[11,"clear_field_type","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_field_type","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_field_type","","",14,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto_type"}],"output":null}],[11,"get_field_type","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto_type"}}],[11,"clear_type_name","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_type_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_type_name","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_type_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_type_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_type_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_extendee","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_extendee","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_extendee","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_extendee","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_extendee","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_extendee","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_default_value","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_default_value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_default_value","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_default_value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_default_value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_default_value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_oneof_index","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_oneof_index","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_oneof_index","","",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_oneof_index","","",14,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_json_name","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_json_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_json_name","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_json_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_json_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_json_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_options","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",14,{"inputs":[{"name":"self"},{"name":"fieldoptions"}],"output":null}],[11,"mut_options","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions"}}],[11,"take_options","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions"}}],[11,"get_options","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions"}}],[11,"is_initialized","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",14,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",14,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",14,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",14,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",14,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"descriptor_static","","",14,{"inputs":[{"generics":["fielddescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto_type"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto_type"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"value","","",4,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",4,{"inputs":[{"name":"i32"}],"output":{"generics":["fielddescriptorproto_type"],"name":"option"}}],[11,"values","","",4,null],[11,"enum_descriptor_static","","",4,{"inputs":[{"generics":["fielddescriptorproto_type"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto_label"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto_label"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"value","","",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",5,{"inputs":[{"name":"i32"}],"output":{"generics":["fielddescriptorproto_label"],"name":"option"}}],[11,"values","","",5,null],[11,"enum_descriptor_static","","",5,{"inputs":[{"generics":["fielddescriptorproto_label"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"oneofdescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"oneofdescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"oneofdescriptorproto"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"default_instance","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"clear_name","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_options","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",15,{"inputs":[{"name":"self"},{"name":"oneofoptions"}],"output":null}],[11,"mut_options","","",15,{"inputs":[{"name":"self"}],"output":{"name":"oneofoptions"}}],[11,"take_options","","",15,{"inputs":[{"name":"self"}],"output":{"name":"oneofoptions"}}],[11,"get_options","","",15,{"inputs":[{"name":"self"}],"output":{"name":"oneofoptions"}}],[11,"is_initialized","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",15,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",15,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",15,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",15,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",15,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",15,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",15,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",15,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"descriptor_static","","",15,{"inputs":[{"generics":["oneofdescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"enumdescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"enumdescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumdescriptorproto"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"default_instance","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"clear_name","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",16,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_value","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",16,{"inputs":[{"name":"self"},{"generics":["enumvaluedescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_value","","",16,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_value","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["enumvaluedescriptorproto"],"name":"repeatedfield"}}],[11,"get_value","","",16,null],[11,"clear_options","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",16,{"inputs":[{"name":"self"},{"name":"enumoptions"}],"output":null}],[11,"mut_options","","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumoptions"}}],[11,"take_options","","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumoptions"}}],[11,"get_options","","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumoptions"}}],[11,"is_initialized","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",16,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",16,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",16,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",16,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",16,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",16,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",16,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"descriptor_static","","",16,{"inputs":[{"generics":["enumdescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"enumvaluedescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"enumvaluedescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"enumvaluedescriptorproto"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"default_instance","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"clear_name","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_number","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_number","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_number","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_number","","",17,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_options","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",17,{"inputs":[{"name":"self"},{"name":"enumvalueoptions"}],"output":null}],[11,"mut_options","","",17,{"inputs":[{"name":"self"}],"output":{"name":"enumvalueoptions"}}],[11,"take_options","","",17,{"inputs":[{"name":"self"}],"output":{"name":"enumvalueoptions"}}],[11,"get_options","","",17,{"inputs":[{"name":"self"}],"output":{"name":"enumvalueoptions"}}],[11,"is_initialized","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",17,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",17,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",17,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",17,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",17,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",17,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",17,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"descriptor_static","","",17,{"inputs":[{"generics":["enumvaluedescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"servicedescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"servicedescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servicedescriptorproto"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"default_instance","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"clear_name","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",18,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_method","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"set_method","","",18,{"inputs":[{"name":"self"},{"generics":["methoddescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_method","","",18,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_method","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["methoddescriptorproto"],"name":"repeatedfield"}}],[11,"get_method","","",18,null],[11,"clear_options","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",18,{"inputs":[{"name":"self"},{"name":"serviceoptions"}],"output":null}],[11,"mut_options","","",18,{"inputs":[{"name":"self"}],"output":{"name":"serviceoptions"}}],[11,"take_options","","",18,{"inputs":[{"name":"self"}],"output":{"name":"serviceoptions"}}],[11,"get_options","","",18,{"inputs":[{"name":"self"}],"output":{"name":"serviceoptions"}}],[11,"is_initialized","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",18,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",18,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",18,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",18,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",18,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",18,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",18,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"descriptor_static","","",18,{"inputs":[{"generics":["servicedescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"methoddescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"methoddescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"methoddescriptorproto"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"default_instance","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"clear_name","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_input_type","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_input_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_input_type","","",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_input_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_input_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_input_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_output_type","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_output_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_output_type","","",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_output_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_output_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_output_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_options","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",19,{"inputs":[{"name":"self"},{"name":"methodoptions"}],"output":null}],[11,"mut_options","","",19,{"inputs":[{"name":"self"}],"output":{"name":"methodoptions"}}],[11,"take_options","","",19,{"inputs":[{"name":"self"}],"output":{"name":"methodoptions"}}],[11,"get_options","","",19,{"inputs":[{"name":"self"}],"output":{"name":"methodoptions"}}],[11,"clear_client_streaming","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_client_streaming","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_client_streaming","","",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_client_streaming","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_server_streaming","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_server_streaming","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_server_streaming","","",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_server_streaming","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",19,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",19,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",19,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",19,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",19,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",19,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",19,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"descriptor_static","","",19,{"inputs":[{"generics":["methoddescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"fileoptions"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"fileoptions"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"default_instance","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"clear_java_package","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_package","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_java_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_java_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_java_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_outer_classname","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_java_multiple_files","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_multiple_files","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_multiple_files","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_java_multiple_files","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_java_generate_equals_and_hash","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_generate_equals_and_hash","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_generate_equals_and_hash","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_java_generate_equals_and_hash","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_java_string_check_utf8","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_string_check_utf8","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_string_check_utf8","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_java_string_check_utf8","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_optimize_for","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_optimize_for","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_optimize_for","","",20,{"inputs":[{"name":"self"},{"name":"fileoptions_optimizemode"}],"output":null}],[11,"get_optimize_for","","",20,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions_optimizemode"}}],[11,"clear_go_package","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_go_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_go_package","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_go_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_go_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_go_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_cc_generic_services","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_cc_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_cc_generic_services","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_cc_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_java_generic_services","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_generic_services","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_java_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_py_generic_services","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_py_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_py_generic_services","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_py_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_deprecated","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_cc_enable_arenas","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_cc_enable_arenas","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_cc_enable_arenas","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_cc_enable_arenas","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_objc_class_prefix","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_csharp_namespace","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_uninterpreted_option","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",20,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",20,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",20,null],[11,"is_initialized","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",20,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",20,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",20,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",20,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",20,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",20,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",20,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"descriptor_static","","",20,{"inputs":[{"generics":["fileoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions_optimizemode"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fileoptions_optimizemode"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"value","","",6,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",6,{"inputs":[{"name":"i32"}],"output":{"generics":["fileoptions_optimizemode"],"name":"option"}}],[11,"values","","",6,null],[11,"enum_descriptor_static","","",6,{"inputs":[{"generics":["fileoptions_optimizemode"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"messageoptions"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"messageoptions"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"messageoptions"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"default_instance","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"clear_message_set_wire_format","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message_set_wire_format","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message_set_wire_format","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_message_set_wire_format","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_no_standard_descriptor_accessor","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_no_standard_descriptor_accessor","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_no_standard_descriptor_accessor","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_no_standard_descriptor_accessor","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_deprecated","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_map_entry","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_map_entry","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_map_entry","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_map_entry","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",21,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",21,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",21,null],[11,"is_initialized","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",21,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",21,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",21,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",21,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",21,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",21,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",21,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"descriptor_static","","",21,{"inputs":[{"generics":["messageoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"fieldoptions"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"fieldoptions"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"default_instance","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"clear_ctype","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ctype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ctype","","",22,{"inputs":[{"name":"self"},{"name":"fieldoptions_ctype"}],"output":null}],[11,"get_ctype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions_ctype"}}],[11,"clear_packed","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_packed","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_packed","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_packed","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_jstype","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_jstype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_jstype","","",22,{"inputs":[{"name":"self"},{"name":"fieldoptions_jstype"}],"output":null}],[11,"get_jstype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions_jstype"}}],[11,"clear_lazy","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_lazy","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_lazy","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_lazy","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_deprecated","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_weak","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_weak","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_weak","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_weak","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",22,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",22,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",22,null],[11,"is_initialized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",22,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",22,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",22,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",22,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",22,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",22,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",22,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"descriptor_static","","",22,{"inputs":[{"generics":["fieldoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions_ctype"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"fieldoptions_ctype"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"value","","",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",7,{"inputs":[{"name":"i32"}],"output":{"generics":["fieldoptions_ctype"],"name":"option"}}],[11,"values","","",7,null],[11,"enum_descriptor_static","","",7,{"inputs":[{"generics":["fieldoptions_ctype"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions_jstype"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"fieldoptions_jstype"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"value","","",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",8,{"inputs":[{"name":"i32"}],"output":{"generics":["fieldoptions_jstype"],"name":"option"}}],[11,"values","","",8,null],[11,"enum_descriptor_static","","",8,{"inputs":[{"generics":["fieldoptions_jstype"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"oneofoptions"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"oneofoptions"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"oneofoptions"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"default_instance","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"clear_uninterpreted_option","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",23,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",23,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",23,null],[11,"is_initialized","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",23,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",23,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",23,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",23,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",23,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",23,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",23,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"descriptor_static","","",23,{"inputs":[{"generics":["oneofoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"enumoptions"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"enumoptions"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"enumoptions"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"new","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"default_instance","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"clear_allow_alias","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"has_allow_alias","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_allow_alias","","",24,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_allow_alias","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_deprecated","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",24,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",24,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",24,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",24,null],[11,"is_initialized","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",24,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",24,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",24,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",24,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",24,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",24,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",24,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"descriptor_static","","",24,{"inputs":[{"generics":["enumoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"enumvalueoptions"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"enumvalueoptions"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"enumvalueoptions"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"new","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"default_instance","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"clear_deprecated","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",25,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",25,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",25,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",25,null],[11,"is_initialized","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",25,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",25,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",25,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",25,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",25,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"descriptor_static","","",25,{"inputs":[{"generics":["enumvalueoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"serviceoptions"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"serviceoptions"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"serviceoptions"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"new","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"default_instance","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"clear_deprecated","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",26,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",26,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",26,null],[11,"is_initialized","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",26,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",26,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",26,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",26,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",26,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",26,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",26,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"descriptor_static","","",26,{"inputs":[{"generics":["serviceoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"methodoptions"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"methodoptions"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"methodoptions"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"default_instance","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"clear_deprecated","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",27,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",27,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",27,null],[11,"is_initialized","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",27,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",27,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",27,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",27,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",27,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",27,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",27,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"descriptor_static","","",27,{"inputs":[{"generics":["methodoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"uninterpretedoption"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"uninterpretedoption"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"uninterpretedoption"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"default_instance","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"clear_name","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",28,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption_namepart"],"name":"repeatedfield"}],"output":null}],[11,"mut_name","","",28,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_name","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption_namepart"],"name":"repeatedfield"}}],[11,"get_name","","",28,null],[11,"clear_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_identifier_value","","",28,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_positive_int_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_positive_int_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_positive_int_value","","",28,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_positive_int_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_negative_int_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_negative_int_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_negative_int_value","","",28,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_negative_int_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_double_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_double_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_double_value","","",28,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"get_double_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clear_string_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_string_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_string_value","","",28,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_string_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_string_value","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_string_value","","",28,null],[11,"clear_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_aggregate_value","","",28,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",28,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",28,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",28,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",28,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",28,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",28,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",28,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"descriptor_static","","",28,{"inputs":[{"generics":["uninterpretedoption"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"uninterpretedoption_namepart"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"uninterpretedoption_namepart"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"uninterpretedoption_namepart"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"default_instance","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"clear_name_part","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name_part","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name_part","","",29,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name_part","","",29,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name_part","","",29,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name_part","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_is_extension","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"has_is_extension","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_is_extension","","",29,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_is_extension","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",29,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",29,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",29,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",29,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",29,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",29,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",29,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"descriptor_static","","",29,{"inputs":[{"generics":["uninterpretedoption_namepart"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"default_instance","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"clear_location","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"set_location","","",30,{"inputs":[{"name":"self"},{"generics":["sourcecodeinfo_location"],"name":"repeatedfield"}],"output":null}],[11,"mut_location","","",30,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_location","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["sourcecodeinfo_location"],"name":"repeatedfield"}}],[11,"get_location","","",30,null],[11,"is_initialized","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",30,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",30,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",30,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",30,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",30,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",30,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",30,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"descriptor_static","","",30,{"inputs":[{"generics":["sourcecodeinfo"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo_location"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo_location"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo_location"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"new","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"default_instance","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"clear_path","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"set_path","","",31,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"vec"}],"output":null}],[11,"mut_path","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_path","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"get_path","","",31,null],[11,"clear_span","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"set_span","","",31,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"vec"}],"output":null}],[11,"mut_span","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_span","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"get_span","","",31,null],[11,"clear_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"has_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_leading_comments","","",31,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"has_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_trailing_comments","","",31,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_leading_detached_comments","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"set_leading_detached_comments","","",31,{"inputs":[{"name":"self"},{"generics":["string"],"name":"repeatedfield"}],"output":null}],[11,"mut_leading_detached_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_leading_detached_comments","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"repeatedfield"}}],[11,"get_leading_detached_comments","","",31,null],[11,"is_initialized","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",31,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",31,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",31,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",31,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",31,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",31,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",31,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"descriptor_static","","",31,{"inputs":[{"generics":["sourcecodeinfo_location"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"generatedcodeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"generatedcodeinfo"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"generatedcodeinfo"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"default_instance","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"clear_annotation","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"set_annotation","","",32,{"inputs":[{"name":"self"},{"generics":["generatedcodeinfo_annotation"],"name":"repeatedfield"}],"output":null}],[11,"mut_annotation","","",32,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_annotation","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["generatedcodeinfo_annotation"],"name":"repeatedfield"}}],[11,"get_annotation","","",32,null],[11,"is_initialized","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",32,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",32,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",32,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",32,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",32,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",32,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",32,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"descriptor_static","","",32,{"inputs":[{"generics":["generatedcodeinfo"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"generatedcodeinfo_annotation"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"generatedcodeinfo_annotation"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"default_instance","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"clear_path","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"set_path","","",33,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"vec"}],"output":null}],[11,"mut_path","","",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_path","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"get_path","","",33,null],[11,"clear_source_file","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"has_source_file","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_source_file","","",33,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_source_file","","",33,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_source_file","","",33,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_source_file","","",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_begin","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"has_begin","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_begin","","",33,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_begin","","",33,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_end","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"has_end","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_end","","",33,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_end","","",33,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",33,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",33,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",33,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",33,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",33,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",33,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",33,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"descriptor_static","","",33,{"inputs":[{"generics":["generatedcodeinfo_annotation"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"plugin","protobuf","",null,null],[3,"CodeGeneratorRequest","protobuf::plugin","",null,null],[3,"CodeGeneratorResponse","","",null,null],[3,"CodeGeneratorResponse_File","","",null,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"codegeneratorrequest"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"codegeneratorrequest"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"codegeneratorrequest"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"default_instance","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"clear_file_to_generate","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"set_file_to_generate","","",34,{"inputs":[{"name":"self"},{"generics":["string"],"name":"repeatedfield"}],"output":null}],[11,"mut_file_to_generate","","",34,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_file_to_generate","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"repeatedfield"}}],[11,"get_file_to_generate","","",34,null],[11,"clear_parameter","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"has_parameter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_parameter","","",34,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_parameter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_parameter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_parameter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_proto_file","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"set_proto_file","","",34,{"inputs":[{"name":"self"},{"generics":["filedescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_proto_file","","",34,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_proto_file","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["filedescriptorproto"],"name":"repeatedfield"}}],[11,"get_proto_file","","",34,null],[11,"is_initialized","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",34,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",34,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",34,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",34,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",34,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",34,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",34,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"descriptor_static","","",34,{"inputs":[{"generics":["codegeneratorrequest"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"codegeneratorresponse"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"codegeneratorresponse"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"codegeneratorresponse"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"default_instance","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"clear_error","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",35,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_error","","",35,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_error","","",35,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_error","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_file","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"set_file","","",35,{"inputs":[{"name":"self"},{"generics":["codegeneratorresponse_file"],"name":"repeatedfield"}],"output":null}],[11,"mut_file","","",35,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_file","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["codegeneratorresponse_file"],"name":"repeatedfield"}}],[11,"get_file","","",35,null],[11,"is_initialized","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",35,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",35,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",35,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",35,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",35,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"descriptor_static","","",35,{"inputs":[{"generics":["codegeneratorresponse"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"codegeneratorresponse_file"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"codegeneratorresponse_file"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"codegeneratorresponse_file"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"default_instance","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"clear_name","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",36,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_insertion_point","","",36,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_content","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_content","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_content","","",36,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_content","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_content","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_content","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",36,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",36,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",36,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",36,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",36,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",36,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",36,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",36,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"descriptor_static","","",36,{"inputs":[{"generics":["codegeneratorresponse_file"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"core","protobuf","",null,null],[5,"message_down_cast","protobuf::core","",null,{"inputs":[{"name":"message"}],"output":{"name":"m"}}],[5,"parse_from","","",null,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[5,"parse_from_reader","","",null,{"inputs":[{"name":"read"}],"output":{"name":"protobufresult"}}],[5,"parse_from_bytes","","",null,null],[5,"parse_length_delimited_from","","",null,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[5,"parse_length_delimited_from_reader","","",null,{"inputs":[{"name":"read"}],"output":{"name":"protobufresult"}}],[5,"parse_length_delimited_from_bytes","","",null,null],[8,"Message","","",null,null],[10,"descriptor","","",37,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[10,"is_initialized","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"merge_from","","",37,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[10,"write_to_with_cached_sizes","","",37,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[10,"compute_size","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_cached_size","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to","","",37,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"write_length_delimited_to","","",37,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"write_length_delimited_to_vec","","",37,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"merge_from_bytes","","",37,null],[11,"check_initialized","","",37,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"write_to_writer","","",37,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"write_to_vec","","",37,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"write_to_bytes","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"protobufresult"}}],[11,"write_length_delimited_to_writer","","",37,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"write_length_delimited_to_bytes","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"protobufresult"}}],[10,"get_unknown_fields","","",37,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[10,"mut_unknown_fields","","",37,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",37,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[10,"as_any","","",37,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",37,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[8,"MessageStatic","","",null,null],[10,"new","","",38,{"inputs":[],"output":{"name":"self"}}],[11,"descriptor_static","","",38,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[8,"ProtobufEnum","","",null,null],[10,"value","","",39,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"from_i32","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",39,null],[11,"descriptor","","",39,{"inputs":[{"name":"self"}],"output":{"name":"enumvaluedescriptor"}}],[11,"enum_descriptor","","",39,{"inputs":[{"name":"self"}],"output":{"name":"enumdescriptor"}}],[11,"enum_descriptor_static","","",39,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[0,"rt","protobuf","",null,null],[5,"compute_raw_varint64_size","protobuf::rt","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[5,"compute_raw_varint32_size","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"vec_packed_varint_data_size","","",null,null],[5,"vec_packed_varint_zigzag_data_size","","",null,null],[5,"vec_packed_enum_data_size","","",null,null],[5,"vec_packed_varint_size","","",null,null],[5,"vec_packed_varint_zigzag_size","","",null,null],[5,"vec_packed_enum_size","","",null,null],[5,"tag_size","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"value_size_no_tag","","",null,{"inputs":[{"name":"t"},{"name":"wiretype"}],"output":{"name":"u32"}}],[5,"value_size","","",null,{"inputs":[{"name":"u32"},{"name":"t"},{"name":"wiretype"}],"output":{"name":"u32"}}],[5,"value_varint_zigzag_size_no_tag","","Length of value when encoded with zigzag encoding",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"value_varint_zigzag_size","","Length of value when encoding with zigzag encoding with tag",null,{"inputs":[{"name":"u32"},{"name":"t"}],"output":{"name":"u32"}}],[5,"enum_size","","",null,{"inputs":[{"name":"u32"},{"name":"e"}],"output":{"name":"u32"}}],[5,"bytes_size_no_tag","","",null,null],[5,"bytes_size","","",null,null],[5,"string_size_no_tag","","",null,{"inputs":[{"name":"str"}],"output":{"name":"u32"}}],[5,"string_size","","",null,{"inputs":[{"name":"u32"},{"name":"str"}],"output":{"name":"u32"}}],[5,"unknown_fields_size","","",null,{"inputs":[{"name":"unknownfields"}],"output":{"name":"u32"}}],[5,"read_repeated_int32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_int64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_uint32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_uint64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sint32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sint64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_fixed32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_fixed64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sfixed32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sfixed64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_double_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_float_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_bool_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_enum_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_string_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_string_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_proto3_string_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"string"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_bytes_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_bytes_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_proto3_bytes_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_message_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_message_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularptrfield"}],"output":{"name":"protobufresult"}}],[5,"read_unknown_or_skip_group","","",null,{"inputs":[{"name":"u32"},{"name":"wiretype"},{"name":"codedinputstream"},{"name":"unknownfields"}],"output":{"name":"protobufresult"}}],[5,"unexpected_wire_type","","Create an error for unexpected wire type.",null,{"inputs":[{"name":"wiretype"}],"output":{"name":"protobuferror"}}],[5,"compute_map_size","","",null,{"inputs":[{"name":"u32"},{"name":"hashmap"}],"output":{"name":"u32"}}],[5,"write_map_with_cached_sizes","","",null,{"inputs":[{"name":"u32"},{"name":"hashmap"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[5,"read_map_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"hashmap"}],"output":{"name":"protobufresult"}}],[8,"ProtobufVarint","","",null,null],[10,"len_varint","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"ProtobufVarintZigzag","","",null,null],[10,"len_varint_zigzag","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[0,"lazy","protobuf","",null,null],[3,"Lazy","protobuf::lazy","",null,null],[12,"lock","","",42,null],[12,"ptr","","",42,null],[17,"ONCE_INIT","","",null,null],[11,"get","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[0,"code_writer","protobuf","",null,null],[3,"CodeWriter","protobuf::code_writer","",null,null],[4,"Visibility","","",null,null],[13,"Public","","",43,null],[13,"Default","","",43,null],[11,"new","","",44,{"inputs":[{"name":"write"}],"output":{"name":"codewriter"}}],[11,"write_line","","",44,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"write_generated","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"todo","","",44,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"unimplemented","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"indented","","",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"commented","","",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"pub_const","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[11,"lazy_static","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"lazy_static_decl_get","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f"}],"output":null}],[11,"lazy_static_decl_get_simple","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[11,"block","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f"}],"output":null}],[11,"expr_block","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"stmt_block","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"unsafe_expr","","",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"impl_self_block","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"impl_for_block","","",44,{"inputs":[{"name":"self"},{"name":"s1"},{"name":"s2"},{"name":"f"}],"output":null}],[11,"unsafe_impl","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"pub_struct","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"def_struct","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"pub_enum","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"pub_trait","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"field_entry","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"field_decl","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"pub_field_decl","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"field_decl_vis","","",44,{"inputs":[{"name":"self"},{"name":"visibility"},{"name":"str"},{"name":"str"}],"output":null}],[11,"derive","","",44,null],[11,"allow","","",44,null],[11,"comment","","",44,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"fn_def","","",44,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"fn_block","","",44,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"f"}],"output":null}],[11,"pub_fn","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"def_fn","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"def_mod","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"pub_mod","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"while_block","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"if_stmt","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"if_else_stmt","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"if_let_stmt","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f"}],"output":null}],[11,"if_let_else_stmt","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f"}],"output":null}],[11,"for_stmt","","",44,{"inputs":[{"name":"self"},{"name":"s1"},{"name":"s2"},{"name":"f"}],"output":null}],[11,"match_block","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"match_expr","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"case_block","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"case_expr","","",44,{"inputs":[{"name":"self"},{"name":"s1"},{"name":"s2"}],"output":null}],[11,"error_unexpected_wire_type","","",44,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"assert_wire_type","","",44,{"inputs":[{"name":"self"},{"name":"wiretype"}],"output":null}],[0,"codegen","protobuf","",null,null],[5,"gen","protobuf::codegen","",null,null],[5,"protoc_gen_rust_main","","",null,{"inputs":[],"output":null}],[0,"compiler_plugin","protobuf","",null,null],[3,"GenResult","protobuf::compiler_plugin","",null,null],[12,"name","","",45,null],[12,"content","","",45,null],[5,"plugin_main","","",null,null],[0,"repeated","protobuf","",null,null],[3,"RepeatedField","protobuf::repeated","",null,null],[11,"len","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",46,{"inputs":[],"output":{"name":"repeatedfield"}}],[11,"new","","",46,{"inputs":[],"output":{"name":"repeatedfield"}}],[11,"from_vec","","",46,{"inputs":[{"name":"vec"}],"output":{"name":"repeatedfield"}}],[11,"into_vec","","",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"capacity","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_mut_slice","","",46,null],[11,"slice","","",46,null],[11,"slice_mut","","",46,null],[11,"slice_from","","",46,null],[11,"slice_from_mut","","",46,null],[11,"slice_to","","",46,null],[11,"slice_to_mut","","",46,null],[11,"split_at","","",46,null],[11,"split_at_mut","","",46,null],[11,"tail","","",46,null],[11,"last","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"init","","",46,null],[11,"push","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"insert","","",46,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"remove","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"truncate","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reverse","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",46,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"iter","","",46,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"sort_by","","",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"as_ptr","","",46,null],[11,"as_mut_ptr","","",46,null],[11,"push_default","","",46,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from_slice","","",46,null],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"from_iter","","",46,{"inputs":[{"name":"i"}],"output":{"name":"repeatedfield"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":{"name":"bool"}}],[11,"contains","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"hash","","",46,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",46,null],[11,"borrow","","",46,null],[11,"deref","","",46,null],[11,"deref_mut","","",46,null],[11,"index","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"singular","protobuf","",null,null],[3,"SingularField","protobuf::singular","",null,null],[3,"SingularPtrField","","",null,null],[11,"some","","",47,{"inputs":[{"name":"t"}],"output":{"name":"singularfield"}}],[11,"is_some","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_option","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"singularptrfield"}}],[11,"iter","","",47,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"mut_iter","","",47,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clear","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"none","","",47,{"inputs":[],"output":{"name":"singularfield"}}],[11,"from_option","","",47,{"inputs":[{"name":"option"}],"output":{"name":"singularfield"}}],[11,"take","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"some","","",48,{"inputs":[{"name":"t"}],"output":{"name":"singularptrfield"}}],[11,"none","","",48,{"inputs":[],"output":{"name":"singularptrfield"}}],[11,"from_option","","",48,{"inputs":[{"name":"option"}],"output":{"name":"singularptrfield"}}],[11,"is_some","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_option","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut_ref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap","","",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"singularptrfield"}}],[11,"iter","","",48,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"mut_iter","","",48,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"take","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"unwrap_or_default","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_default","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or_default","","",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_default","","",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"singularfield"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"singularptrfield"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"singularfield"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"singularptrfield"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"singularfield"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"singularptrfield"}],"output":{"name":"bool"}}],[11,"hash","","",47,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash","","",48,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"clear","protobuf","",null,null],[8,"Clear","protobuf::clear","anything that can be cleared",null,null],[10,"clear","","",49,{"inputs":[{"name":"self"}],"output":null}],[0,"reflect","protobuf","",null,null],[3,"FieldDescriptor","protobuf::reflect","",null,null],[3,"MessageDescriptor","","",null,null],[3,"EnumValueDescriptor","","",null,null],[3,"EnumDescriptor","","",null,null],[4,"ProtobufValueRef","","",null,null],[13,"U32","","",50,null],[13,"U64","","",50,null],[13,"I32","","",50,null],[13,"I64","","",50,null],[13,"F32","","",50,null],[13,"F64","","",50,null],[13,"Bool","","",50,null],[13,"String","","",50,null],[13,"Bytes","","",50,null],[13,"Enum","","",50,null],[13,"Message","","",50,null],[4,"ReflectFieldRef","","",null,null],[13,"Repeated","","",51,null],[13,"RepeatedOld","","",51,null],[13,"Map","","",51,null],[13,"Optional","","",51,null],[0,"accessor","","",null,null],[5,"make_singular_u32_accessor","protobuf::reflect::accessor","",null,null],[5,"make_singular_i32_accessor","","",null,null],[5,"make_singular_u64_accessor","","",null,null],[5,"make_singular_i64_accessor","","",null,null],[5,"make_singular_f32_accessor","","",null,null],[5,"make_singular_f64_accessor","","",null,null],[5,"make_singular_bool_accessor","","",null,null],[5,"make_singular_enum_accessor","","",null,null],[5,"make_singular_string_accessor","","",null,null],[5,"make_singular_bytes_accessor","","",null,null],[5,"make_singular_message_accessor","","",null,null],[5,"make_repeated_u32_accessor","","",null,null],[5,"make_repeated_i32_accessor","","",null,null],[5,"make_repeated_u64_accessor","","",null,null],[5,"make_repeated_i64_accessor","","",null,null],[5,"make_repeated_f32_accessor","","",null,null],[5,"make_repeated_f64_accessor","","",null,null],[5,"make_repeated_bool_accessor","","",null,null],[5,"make_repeated_string_accessor","","",null,null],[5,"make_repeated_bytes_accessor","","",null,null],[5,"make_repeated_enum_accessor","","",null,null],[5,"make_repeated_message_accessor","","",null,null],[5,"make_vec_accessor","","",null,null],[5,"make_repeated_field_accessor","","",null,null],[5,"make_option_accessor","","",null,null],[5,"make_has_get_set_clear_accessor","","",null,null],[5,"make_has_get_mut_clear_accessor","","",null,null],[5,"make_singular_field_accessor","","",null,null],[5,"make_singular_ptr_field_accessor","","",null,null],[5,"make_simple_field_accessor","","",null,null],[5,"make_map_accessor","","",null,null],[8,"FieldAccessor","","this trait should not be used directly, use `FieldDescriptor` instead",null,null],[10,"name_generic","","",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"has_field_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[10,"len_field_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"usize"}}],[10,"get_message_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"message"}}],[10,"get_rep_message_item_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"message"}}],[10,"get_enum_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"enumvaluedescriptor"}}],[10,"get_rep_enum_item_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"enumvaluedescriptor"}}],[10,"get_str_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"str"}}],[10,"get_rep_str_generic","","",52,null],[10,"get_bytes_generic","","",52,null],[10,"get_rep_bytes_generic","","",52,null],[10,"get_u32_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"u32"}}],[10,"get_rep_u32_generic","","",52,null],[10,"get_u64_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"u64"}}],[10,"get_rep_u64_generic","","",52,null],[10,"get_i32_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"i32"}}],[10,"get_rep_i32_generic","","",52,null],[10,"get_i64_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"i64"}}],[10,"get_rep_i64_generic","","",52,null],[10,"get_bool_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[10,"get_rep_bool_generic","","",52,null],[10,"get_f32_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"f32"}}],[10,"get_rep_f32_generic","","",52,null],[10,"get_f64_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"f64"}}],[10,"get_rep_f64_generic","","",52,null],[10,"get_reflect","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"reflectfieldref"}}],[11,"is_non_zero","protobuf::reflect","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"ProtobufValue","","",null,null],[10,"as_ref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"as_any","","",53,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"is_non_zero","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref_copy","","",53,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"proto","","",54,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto"}}],[11,"name","","",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_repeated","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_field","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"len_field","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"usize"}}],[11,"get_message","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"message"}}],[11,"get_rep_message_item","","",54,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"message"}}],[11,"get_enum","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"enumvaluedescriptor"}}],[11,"get_rep_enum_item","","",54,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"enumvaluedescriptor"}}],[11,"get_str","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"str"}}],[11,"get_rep_str","","",54,null],[11,"get_rep_str_item","","",54,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"str"}}],[11,"get_bytes","","",54,null],[11,"get_rep_bytes","","",54,null],[11,"get_rep_bytes_item","","",54,null],[11,"get_u32","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"u32"}}],[11,"get_rep_u32","","",54,null],[11,"get_u64","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"u64"}}],[11,"get_rep_u64","","",54,null],[11,"get_i32","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"i32"}}],[11,"get_rep_i32","","",54,null],[11,"get_i64","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"i64"}}],[11,"get_rep_i64","","",54,null],[11,"get_bool","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"get_rep_bool","","",54,null],[11,"get_f32","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"f32"}}],[11,"get_rep_f32","","",54,null],[11,"get_f64","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"f64"}}],[11,"get_rep_f64","","",54,null],[11,"get_reflect","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"reflectfieldref"}}],[11,"get_rep_item","","",54,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"protobufvalueref"}}],[11,"for_type","","",55,{"inputs":[],"output":{"name":"messagedescriptor"}}],[11,"new","","",55,{"inputs":[{"name":"str"},{"generics":["box"],"name":"vec"},{"name":"filedescriptorproto"}],"output":{"name":"messagedescriptor"}}],[11,"new_instance","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["message"],"name":"box"}}],[11,"name","","",55,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"full_name","","",55,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fields","","",55,null],[11,"field_by_name","","",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fielddescriptor"}}],[11,"field_by_number","","",55,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"fielddescriptor"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"enumvaluedescriptor"}}],[11,"name","","",56,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","",56,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"name","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"for_type","","",57,{"inputs":[],"output":{"name":"enumdescriptor"}}],[11,"new","","",57,{"inputs":[{"name":"str"},{"name":"filedescriptorproto"}],"output":{"name":"enumdescriptor"}}],[11,"value_by_name","","",57,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"enumvaluedescriptor"}}],[11,"value_by_number","","",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"enumvaluedescriptor"}}],[0,"text_format","protobuf","",null,null],[5,"quote_escape_bytes","protobuf::text_format","",null,null],[5,"unescape_string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"print_to","","",null,{"inputs":[{"name":"message"},{"name":"string"}],"output":null}],[5,"print_to_string","","",null,{"inputs":[{"name":"message"}],"output":{"name":"string"}}],[5,"fmt","","",null,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stream","protobuf","",null,null],[3,"CodedInputStream","protobuf::stream","",null,null],[3,"CodedOutputStream","","",null,null],[5,"with_coded_output_stream_to_bytes","","",null,{"inputs":[{"name":"f"}],"output":{"generics":["vec"],"name":"protobufresult"}}],[0,"wire_format","","",null,null],[3,"Tag","protobuf::stream::wire_format","",null,null],[4,"WireType","","",null,null],[13,"WireTypeVarint","","",58,null],[13,"WireTypeFixed64","","",58,null],[13,"WireTypeLengthDelimited","","",58,null],[13,"WireTypeStartGroup","","",58,null],[13,"WireTypeEndGroup","","",58,null],[13,"WireTypeFixed32","","",58,null],[17,"TAG_TYPE_BITS","","",null,null],[17,"TAG_TYPE_MASK","","",null,null],[17,"FIELD_NUMBER_MAX","","",null,null],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"wiretype"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"wiretype"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",58,{"inputs":[{"name":"u32"}],"output":{"generics":["wiretype"],"name":"option"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"tag"}}],[11,"value","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new","","",59,{"inputs":[{"name":"u32"}],"output":{"generics":["tag"],"name":"option"}}],[11,"make","","",59,{"inputs":[{"name":"u32"},{"name":"wiretype"}],"output":{"name":"tag"}}],[11,"unpack","","",59,null],[11,"field_number","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"WithCodedOutputStream","protobuf::stream","",null,null],[10,"with_coded_output_stream","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"protobufresult"}}],[8,"WithCodedInputStream","","",null,null],[10,"with_coded_input_stream","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"protobufresult"}}],[11,"new","","",62,{"inputs":[{"name":"read"}],"output":{"name":"codedinputstream"}}],[11,"from_buffered_reader","","",62,{"inputs":[{"name":"bufread"}],"output":{"name":"codedinputstream"}}],[11,"from_bytes","","",62,null],[11,"pos","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"bytes_until_limit","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",62,null],[11,"read_raw_byte","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"protobufresult"}}],[11,"push_limit","","",62,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"pop_limit","","",62,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"eof","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"protobufresult"}}],[11,"check_eof","","",62,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_raw_varint64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"read_raw_varint32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"protobufresult"}}],[11,"read_raw_little_endian32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"protobufresult"}}],[11,"read_raw_little_endian64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"read_tag","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["tag"],"name":"protobufresult"}}],[11,"read_tag_unpack","","",62,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_double","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"protobufresult"}}],[11,"read_float","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"protobufresult"}}],[11,"read_int64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"protobufresult"}}],[11,"read_int32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"protobufresult"}}],[11,"read_uint64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"read_uint32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"protobufresult"}}],[11,"read_sint64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"protobufresult"}}],[11,"read_sint32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"protobufresult"}}],[11,"read_fixed64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"read_fixed32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"protobufresult"}}],[11,"read_sfixed64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"protobufresult"}}],[11,"read_sfixed32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"protobufresult"}}],[11,"read_bool","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"protobufresult"}}],[11,"read_enum","","",62,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_double_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_float_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_int64_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_int32_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_uint64_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_uint32_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_sint64_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_sint32_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_fixed64_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_fixed32_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_sfixed64_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_sfixed32_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_bool_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_enum_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_unknown","","",62,{"inputs":[{"name":"self"},{"name":"wiretype"}],"output":{"generics":["unknownvalue"],"name":"protobufresult"}}],[11,"skip_field","","",62,{"inputs":[{"name":"self"},{"name":"wiretype"}],"output":{"name":"protobufresult"}}],[11,"read_raw_bytes_into","","Read raw bytes into the supplied vector.  The vector will be resized as needed and overwritten.",62,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_raw_bytes","","Read exact number of bytes",62,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["vec"],"name":"protobufresult"}}],[11,"skip_raw_bytes","","",62,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"read_bytes","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"protobufresult"}}],[11,"read_bytes_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_string","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"protobufresult"}}],[11,"read_string_into","","",62,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"protobufresult"}}],[11,"merge_message","","",62,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"protobufresult"}}],[11,"read_message","","",62,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"new","","",63,{"inputs":[{"name":"write"}],"output":{"name":"codedoutputstream"}}],[11,"bytes","","`CodedOutputStream` which writes directly to bytes.",63,null],[11,"vec","","`CodedOutputStream` which writes directly to `Vec<u8>`.",63,{"inputs":[{"name":"vec"}],"output":{"name":"codedoutputstream"}}],[11,"check_eof","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"flush","","",63,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"write_raw_byte","","",63,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"protobufresult"}}],[11,"write_raw_bytes","","",63,null],[11,"write_tag","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"wiretype"}],"output":{"name":"protobufresult"}}],[11,"write_raw_varint32","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_raw_varint64","","",63,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_raw_little_endian32","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_raw_little_endian64","","",63,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_float_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"protobufresult"}}],[11,"write_double_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"protobufresult"}}],[11,"write_float","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"}],"output":{"name":"protobufresult"}}],[11,"write_double","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f64"}],"output":{"name":"protobufresult"}}],[11,"write_uint64_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_uint32_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_int64_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_int32_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_sint64_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_sint32_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_fixed64_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_fixed32_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_sfixed64_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_sfixed32_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_bool_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"protobufresult"}}],[11,"write_enum_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_enum_obj_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"protobufresult"}}],[11,"write_unknown_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"unknownvalueref"}],"output":{"name":"protobufresult"}}],[11,"write_uint64","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_uint32","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_int64","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_int32","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_sint64","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_sint32","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_fixed64","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_fixed32","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_sfixed64","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_sfixed32","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_bool","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"bool"}],"output":{"name":"protobufresult"}}],[11,"write_enum","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_enum_obj","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"e"}],"output":{"name":"protobufresult"}}],[11,"write_unknown","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"unknownvalueref"}],"output":{"name":"protobufresult"}}],[11,"write_unknown_fields","","",63,{"inputs":[{"name":"self"},{"name":"unknownfields"}],"output":{"name":"protobufresult"}}],[11,"write_bytes_no_tag","","",63,null],[11,"write_string_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"protobufresult"}}],[11,"write_message_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"protobufresult"}}],[11,"write_bytes","","",63,null],[11,"write_string","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"str"}],"output":{"name":"protobufresult"}}],[11,"write_message","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"m"}],"output":{"name":"protobufresult"}}],[0,"error","protobuf","",null,null],[4,"WireError","protobuf::error","Enum values added here for diagnostic purposes. Users should not depend on specific values.",null,null],[13,"UnexpectedEof","","",64,null],[13,"UnexpectedWireType","","",64,null],[13,"IncorrectTag","","",64,null],[13,"IncompleteMap","","",64,null],[13,"IncorrectVarint","","",64,null],[13,"Utf8Error","","",64,null],[13,"InvalidEnumValue","","",64,null],[13,"Other","","",64,null],[4,"ProtobufError","","",null,null],[13,"IoError","","",65,null],[13,"WireError","","",65,null],[13,"Utf8","","",65,null],[13,"MessageNotInitialized","","",65,null],[12,"message","protobuf::error::ProtobufError","",65,null],[6,"ProtobufResult","protobuf::error","",null,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"message_not_initialized","","",65,{"inputs":[{"name":"str"}],"output":{"name":"protobuferror"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",65,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",65,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",65,{"inputs":[{"name":"utf8error"}],"output":{"name":"self"}}],[0,"types","protobuf","",null,null],[3,"ProtobufTypeFloat","protobuf::types","",null,null],[3,"ProtobufTypeDouble","","",null,null],[3,"ProtobufTypeInt32","","",null,null],[3,"ProtobufTypeInt64","","",null,null],[3,"ProtobufTypeUint32","","",null,null],[3,"ProtobufTypeUint64","","",null,null],[3,"ProtobufTypeSint32","","",null,null],[3,"ProtobufTypeSint64","","",null,null],[3,"ProtobufTypeFixed32","","",null,null],[3,"ProtobufTypeFixed64","","",null,null],[3,"ProtobufTypeSfixed32","","",null,null],[3,"ProtobufTypeSfixed64","","",null,null],[3,"ProtobufTypeBool","","",null,null],[3,"ProtobufTypeString","","",null,null],[3,"ProtobufTypeBytes","","",null,null],[3,"ProtobufTypeChars","","",null,null],[3,"ProtobufTypeEnum","","",null,null],[3,"ProtobufTypeMessage","","",null,null],[8,"ProtobufType","","",null,null],[16,"Value","","",66,null],[10,"wire_type","","",66,{"inputs":[],"output":{"name":"wiretype"}}],[10,"read","","",66,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[10,"compute_size","","",66,null],[11,"compute_size_with_length_delimiter","","Compute size adding length prefix if wire type is length delimited (i. e. string, bytes, message)",66,null],[11,"get_from_unknown","","",66,{"inputs":[{"name":"unknownvalues"}],"output":{"name":"option"}}],[11,"get_cached_size","","Get previously computed size",66,null],[11,"get_cached_size_with_length_delimiter","","Get previously cached size with length prefix",66,null],[10,"write_with_cached_size","","",66,null],[11,"wire_type","","",67,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",67,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["f32"],"name":"protobufresult"}}],[11,"compute_size","","",67,{"inputs":[{"name":"f32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",67,{"inputs":[{"name":"u32"},{"name":"f32"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",68,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",68,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["f64"],"name":"protobufresult"}}],[11,"compute_size","","",68,{"inputs":[{"name":"f64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",68,{"inputs":[{"name":"u32"},{"name":"f64"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",69,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",69,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["i32"],"name":"protobufresult"}}],[11,"compute_size","","",69,{"inputs":[{"name":"i32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",69,{"inputs":[{"name":"u32"},{"name":"i32"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",70,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",70,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["i64"],"name":"protobufresult"}}],[11,"compute_size","","",70,{"inputs":[{"name":"i64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",70,{"inputs":[{"name":"u32"},{"name":"i64"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",71,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",71,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["u32"],"name":"protobufresult"}}],[11,"compute_size","","",71,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",71,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",72,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",72,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"compute_size","","",72,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",72,{"inputs":[{"name":"u32"},{"name":"u64"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",73,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",73,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["i32"],"name":"protobufresult"}}],[11,"compute_size","","",73,{"inputs":[{"name":"i32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",73,{"inputs":[{"name":"u32"},{"name":"i32"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",74,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",74,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["i64"],"name":"protobufresult"}}],[11,"compute_size","","",74,{"inputs":[{"name":"i64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",74,{"inputs":[{"name":"u32"},{"name":"i64"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",75,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",75,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["u32"],"name":"protobufresult"}}],[11,"compute_size","","",75,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",75,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",76,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",76,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"compute_size","","",76,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",76,{"inputs":[{"name":"u32"},{"name":"u64"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",77,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",77,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["i32"],"name":"protobufresult"}}],[11,"compute_size","","",77,{"inputs":[{"name":"i32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",77,{"inputs":[{"name":"u32"},{"name":"i32"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",78,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",78,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["i64"],"name":"protobufresult"}}],[11,"compute_size","","",78,{"inputs":[{"name":"i64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",78,{"inputs":[{"name":"u32"},{"name":"i64"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",79,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",79,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["bool"],"name":"protobufresult"}}],[11,"get_from_unknown","","",79,{"inputs":[{"name":"unknownvalues"}],"output":{"generics":["bool"],"name":"option"}}],[11,"compute_size","","",79,{"inputs":[{"name":"bool"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",79,{"inputs":[{"name":"u32"},{"name":"bool"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",80,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",80,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["string"],"name":"protobufresult"}}],[11,"compute_size","","",80,{"inputs":[{"name":"string"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",80,{"inputs":[{"name":"u32"},{"name":"string"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",81,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",81,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["vec"],"name":"protobufresult"}}],[11,"compute_size","","",81,{"inputs":[{"name":"vec"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",81,{"inputs":[{"name":"u32"},{"name":"vec"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",82,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",82,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",82,{"inputs":[{"name":"e"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",82,{"inputs":[{"name":"u32"},{"name":"e"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",83,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",83,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",83,{"inputs":[{"name":"m"}],"output":{"name":"u32"}}],[11,"get_cached_size","","",83,{"inputs":[{"name":"m"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",83,null],[0,"well_known_types","protobuf","",null,null],[3,"Any","protobuf::well_known_types","",null,null],[12,"type_url","","",84,null],[12,"value","","",84,null],[3,"Api","","",null,null],[12,"name","","",85,null],[12,"methods","","",85,null],[12,"options","","",85,null],[12,"version","","",85,null],[12,"source_context","","",85,null],[12,"mixins","","",85,null],[12,"syntax","","",85,null],[3,"Method","","",null,null],[12,"name","","",86,null],[12,"request_type_url","","",86,null],[12,"request_streaming","","",86,null],[12,"response_type_url","","",86,null],[12,"response_streaming","","",86,null],[12,"options","","",86,null],[12,"syntax","","",86,null],[3,"Mixin","","",null,null],[12,"name","","",87,null],[12,"root","","",87,null],[3,"Duration","","",null,null],[12,"seconds","","",88,null],[12,"nanos","","",88,null],[3,"Empty","","",null,null],[3,"FieldMask","","",null,null],[12,"paths","","",89,null],[3,"SourceContext","","",null,null],[12,"file_name","","",90,null],[3,"Struct","","",null,null],[12,"fields","","",91,null],[3,"Value","","",null,null],[3,"ListValue","","",null,null],[12,"values","","",92,null],[3,"Timestamp","","",null,null],[12,"seconds","","",93,null],[12,"nanos","","",93,null],[3,"Type","","",null,null],[12,"name","","",94,null],[12,"fields","","",94,null],[12,"oneofs","","",94,null],[12,"options","","",94,null],[12,"source_context","","",94,null],[12,"syntax","","",94,null],[3,"Field","","",null,null],[12,"kind","","",95,null],[12,"cardinality","","",95,null],[12,"number","","",95,null],[12,"name","","",95,null],[12,"type_url","","",95,null],[12,"oneof_index","","",95,null],[12,"packed","","",95,null],[12,"options","","",95,null],[12,"json_name","","",95,null],[12,"default_value","","",95,null],[3,"Enum","","",null,null],[12,"name","","",96,null],[12,"enumvalue","","",96,null],[12,"options","","",96,null],[12,"source_context","","",96,null],[12,"syntax","","",96,null],[3,"EnumValue","","",null,null],[12,"name","","",97,null],[12,"number","","",97,null],[12,"options","","",97,null],[3,"Option","","",null,null],[12,"name","","",98,null],[12,"value","","",98,null],[3,"DoubleValue","","",null,null],[12,"value","","",99,null],[3,"FloatValue","","",null,null],[12,"value","","",100,null],[3,"Int64Value","","",null,null],[12,"value","","",101,null],[3,"UInt64Value","","",null,null],[12,"value","","",102,null],[3,"Int32Value","","",null,null],[12,"value","","",103,null],[3,"UInt32Value","","",null,null],[12,"value","","",104,null],[3,"BoolValue","","",null,null],[12,"value","","",105,null],[3,"StringValue","","",null,null],[12,"value","","",106,null],[3,"BytesValue","","",null,null],[12,"value","","",107,null],[4,"Value_oneof_kind","","",null,null],[13,"null_value","","",108,null],[13,"number_value","","",108,null],[13,"string_value","","",108,null],[13,"bool_value","","",108,null],[13,"struct_value","","",108,null],[13,"list_value","","",108,null],[4,"NullValue","","",null,null],[13,"NULL_VALUE","","",109,null],[4,"Field_Kind","","",null,null],[13,"TYPE_UNKNOWN","","",110,null],[13,"TYPE_DOUBLE","","",110,null],[13,"TYPE_FLOAT","","",110,null],[13,"TYPE_INT64","","",110,null],[13,"TYPE_UINT64","","",110,null],[13,"TYPE_INT32","","",110,null],[13,"TYPE_FIXED64","","",110,null],[13,"TYPE_FIXED32","","",110,null],[13,"TYPE_BOOL","","",110,null],[13,"TYPE_STRING","","",110,null],[13,"TYPE_GROUP","","",110,null],[13,"TYPE_MESSAGE","","",110,null],[13,"TYPE_BYTES","","",110,null],[13,"TYPE_UINT32","","",110,null],[13,"TYPE_ENUM","","",110,null],[13,"TYPE_SFIXED32","","",110,null],[13,"TYPE_SFIXED64","","",110,null],[13,"TYPE_SINT32","","",110,null],[13,"TYPE_SINT64","","",110,null],[4,"Field_Cardinality","","",null,null],[13,"CARDINALITY_UNKNOWN","","",111,null],[13,"CARDINALITY_OPTIONAL","","",111,null],[13,"CARDINALITY_REQUIRED","","",111,null],[13,"CARDINALITY_REPEATED","","",111,null],[4,"Syntax","","",null,null],[13,"SYNTAX_PROTO2","","",112,null],[13,"SYNTAX_PROTO3","","",112,null],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"default","","",84,{"inputs":[],"output":{"name":"any"}}],[11,"new","","",84,{"inputs":[],"output":{"name":"any"}}],[11,"default_instance","","",84,{"inputs":[],"output":{"name":"any"}}],[11,"clear_type_url","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"set_type_url","","",84,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_type_url","","",84,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_type_url","","",84,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_type_url","","",84,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_value","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",84,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_value","","",84,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_value","","",84,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_value","","",84,null],[11,"is_initialized","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",84,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",84,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",84,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",84,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",84,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",84,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",84,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",84,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",84,{"inputs":[],"output":{"name":"any"}}],[11,"descriptor_static","","",84,{"inputs":[{"generics":["any"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",84,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"api"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"api"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"api"}}],[11,"new","","",85,{"inputs":[],"output":{"name":"api"}}],[11,"default_instance","","",85,{"inputs":[],"output":{"name":"api"}}],[11,"clear_name","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",85,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",85,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",85,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_methods","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_methods","","",85,{"inputs":[{"name":"self"},{"generics":["method"],"name":"repeatedfield"}],"output":null}],[11,"mut_methods","","",85,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_methods","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["method"],"name":"repeatedfield"}}],[11,"get_methods","","",85,null],[11,"clear_options","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_options","","",85,{"inputs":[{"name":"self"},{"generics":["option"],"name":"repeatedfield"}],"output":null}],[11,"mut_options","","",85,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_options","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"repeatedfield"}}],[11,"get_options","","",85,null],[11,"clear_version","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_version","","",85,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_version","","",85,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_version","","",85,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_version","","",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_source_context","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"has_source_context","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_source_context","","",85,{"inputs":[{"name":"self"},{"name":"sourcecontext"}],"output":null}],[11,"mut_source_context","","",85,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"take_source_context","","",85,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"get_source_context","","",85,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"clear_mixins","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_mixins","","",85,{"inputs":[{"name":"self"},{"generics":["mixin"],"name":"repeatedfield"}],"output":null}],[11,"mut_mixins","","",85,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_mixins","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["mixin"],"name":"repeatedfield"}}],[11,"get_mixins","","",85,null],[11,"clear_syntax","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_syntax","","",85,{"inputs":[{"name":"self"},{"name":"syntax"}],"output":null}],[11,"get_syntax","","",85,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"is_initialized","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",85,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",85,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",85,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",85,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",85,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",85,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",85,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",85,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",85,{"inputs":[],"output":{"name":"api"}}],[11,"descriptor_static","","",85,{"inputs":[{"generics":["api"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",85,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"method"}}],[11,"new","","",86,{"inputs":[],"output":{"name":"method"}}],[11,"default_instance","","",86,{"inputs":[],"output":{"name":"method"}}],[11,"clear_name","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",86,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_request_type_url","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_request_type_url","","",86,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_request_type_url","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_request_type_url","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_request_type_url","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_request_streaming","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_request_streaming","","",86,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_request_streaming","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_response_type_url","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_response_type_url","","",86,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_response_type_url","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_response_type_url","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_response_type_url","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_response_streaming","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_response_streaming","","",86,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_response_streaming","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_options","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_options","","",86,{"inputs":[{"name":"self"},{"generics":["option"],"name":"repeatedfield"}],"output":null}],[11,"mut_options","","",86,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_options","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"repeatedfield"}}],[11,"get_options","","",86,null],[11,"clear_syntax","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_syntax","","",86,{"inputs":[{"name":"self"},{"name":"syntax"}],"output":null}],[11,"get_syntax","","",86,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"is_initialized","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",86,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",86,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",86,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",86,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",86,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",86,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",86,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",86,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",86,{"inputs":[],"output":{"name":"method"}}],[11,"descriptor_static","","",86,{"inputs":[{"generics":["method"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",86,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"mixin"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"mixin"}}],[11,"new","","",87,{"inputs":[],"output":{"name":"mixin"}}],[11,"default_instance","","",87,{"inputs":[],"output":{"name":"mixin"}}],[11,"clear_name","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",87,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",87,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",87,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_root","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"set_root","","",87,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_root","","",87,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_root","","",87,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_root","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",87,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",87,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",87,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",87,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",87,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",87,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",87,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",87,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",87,{"inputs":[],"output":{"name":"mixin"}}],[11,"descriptor_static","","",87,{"inputs":[{"generics":["mixin"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",87,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"default","","",88,{"inputs":[],"output":{"name":"duration"}}],[11,"new","","",88,{"inputs":[],"output":{"name":"duration"}}],[11,"default_instance","","",88,{"inputs":[],"output":{"name":"duration"}}],[11,"clear_seconds","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"set_seconds","","",88,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_seconds","","",88,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_nanos","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"set_nanos","","",88,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_nanos","","",88,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",88,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",88,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",88,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",88,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",88,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",88,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",88,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",88,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",88,{"inputs":[],"output":{"name":"duration"}}],[11,"descriptor_static","","",88,{"inputs":[{"generics":["duration"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",88,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"empty"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"empty"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"empty"}}],[11,"new","","",113,{"inputs":[],"output":{"name":"empty"}}],[11,"default_instance","","",113,{"inputs":[],"output":{"name":"empty"}}],[11,"is_initialized","","",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",113,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",113,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",113,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",113,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",113,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",113,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",113,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",113,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",113,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",113,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",113,{"inputs":[],"output":{"name":"empty"}}],[11,"descriptor_static","","",113,{"inputs":[{"generics":["empty"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",113,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",113,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"fieldmask"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"fieldmask"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"fieldmask"}}],[11,"default","","",89,{"inputs":[],"output":{"name":"fieldmask"}}],[11,"new","","",89,{"inputs":[],"output":{"name":"fieldmask"}}],[11,"default_instance","","",89,{"inputs":[],"output":{"name":"fieldmask"}}],[11,"clear_paths","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"set_paths","","",89,{"inputs":[{"name":"self"},{"generics":["string"],"name":"repeatedfield"}],"output":null}],[11,"mut_paths","","",89,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_paths","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"repeatedfield"}}],[11,"get_paths","","",89,null],[11,"is_initialized","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",89,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",89,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",89,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",89,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",89,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",89,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",89,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",89,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",89,{"inputs":[],"output":{"name":"fieldmask"}}],[11,"descriptor_static","","",89,{"inputs":[{"generics":["fieldmask"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",89,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"sourcecontext"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"sourcecontext"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"sourcecontext"}}],[11,"new","","",90,{"inputs":[],"output":{"name":"sourcecontext"}}],[11,"default_instance","","",90,{"inputs":[],"output":{"name":"sourcecontext"}}],[11,"clear_file_name","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"set_file_name","","",90,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_file_name","","",90,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_file_name","","",90,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_file_name","","",90,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",90,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",90,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",90,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",90,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",90,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",90,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",90,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",90,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",90,{"inputs":[],"output":{"name":"sourcecontext"}}],[11,"descriptor_static","","",90,{"inputs":[{"generics":["sourcecontext"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"struct"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"struct"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"struct"}}],[11,"new","","",91,{"inputs":[],"output":{"name":"struct"}}],[11,"default_instance","","",91,{"inputs":[],"output":{"name":"struct"}}],[11,"clear_fields","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"set_fields","","",91,{"inputs":[{"name":"self"},{"generics":["string","value"],"name":"hashmap"}],"output":null}],[11,"mut_fields","","",91,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"take_fields","","",91,{"inputs":[{"name":"self"}],"output":{"generics":["string","value"],"name":"hashmap"}}],[11,"get_fields","","",91,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"is_initialized","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",91,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",91,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",91,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",91,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",91,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",91,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",91,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",91,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",91,{"inputs":[],"output":{"name":"struct"}}],[11,"descriptor_static","","",91,{"inputs":[{"generics":["struct"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"value"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"value_oneof_kind"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"value_oneof_kind"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"value_oneof_kind"}],"output":{"name":"bool"}}],[11,"new","","",114,{"inputs":[],"output":{"name":"value"}}],[11,"default_instance","","",114,{"inputs":[],"output":{"name":"value"}}],[11,"clear_null_value","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_null_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_null_value","","",114,{"inputs":[{"name":"self"},{"name":"nullvalue"}],"output":null}],[11,"get_null_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"nullvalue"}}],[11,"clear_number_value","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_number_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_number_value","","",114,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"get_number_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clear_string_value","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_string_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_string_value","","",114,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_string_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_string_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_string_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_bool_value","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_bool_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_bool_value","","",114,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_bool_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_struct_value","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_struct_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_struct_value","","",114,{"inputs":[{"name":"self"},{"name":"struct"}],"output":null}],[11,"mut_struct_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"take_struct_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"get_struct_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"clear_list_value","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_list_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_list_value","","",114,{"inputs":[{"name":"self"},{"name":"listvalue"}],"output":null}],[11,"mut_list_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"listvalue"}}],[11,"take_list_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"listvalue"}}],[11,"get_list_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"listvalue"}}],[11,"is_initialized","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",114,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",114,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",114,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",114,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",114,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",114,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",114,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",114,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",114,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",114,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",114,{"inputs":[],"output":{"name":"value"}}],[11,"descriptor_static","","",114,{"inputs":[{"generics":["value"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",114,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"listvalue"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"listvalue"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"listvalue"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"listvalue"}}],[11,"new","","",92,{"inputs":[],"output":{"name":"listvalue"}}],[11,"default_instance","","",92,{"inputs":[],"output":{"name":"listvalue"}}],[11,"clear_values","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"set_values","","",92,{"inputs":[{"name":"self"},{"generics":["value"],"name":"repeatedfield"}],"output":null}],[11,"mut_values","","",92,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_values","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"repeatedfield"}}],[11,"get_values","","",92,null],[11,"is_initialized","","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",92,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",92,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",92,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",92,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",92,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",92,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",92,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",92,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",92,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",92,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",92,{"inputs":[],"output":{"name":"listvalue"}}],[11,"descriptor_static","","",92,{"inputs":[{"generics":["listvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",92,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"nullvalue"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"nullvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",109,null],[11,"value","","",109,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",109,{"inputs":[{"name":"i32"}],"output":{"generics":["nullvalue"],"name":"option"}}],[11,"values","","",109,null],[11,"enum_descriptor_static","","",109,{"inputs":[{"generics":["nullvalue"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"default","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",109,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"timestamp"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"timestamp"}}],[11,"new","","",93,{"inputs":[],"output":{"name":"timestamp"}}],[11,"default_instance","","",93,{"inputs":[],"output":{"name":"timestamp"}}],[11,"clear_seconds","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"set_seconds","","",93,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_seconds","","",93,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_nanos","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"set_nanos","","",93,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_nanos","","",93,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",93,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",93,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",93,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",93,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",93,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",93,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",93,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",93,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",93,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",93,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",93,{"inputs":[],"output":{"name":"timestamp"}}],[11,"descriptor_static","","",93,{"inputs":[{"generics":["timestamp"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",94,{"inputs":[],"output":{"name":"type"}}],[11,"default_instance","","",94,{"inputs":[],"output":{"name":"type"}}],[11,"clear_name","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",94,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",94,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",94,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",94,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_fields","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"set_fields","","",94,{"inputs":[{"name":"self"},{"generics":["field"],"name":"repeatedfield"}],"output":null}],[11,"mut_fields","","",94,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_fields","","",94,{"inputs":[{"name":"self"}],"output":{"generics":["field"],"name":"repeatedfield"}}],[11,"get_fields","","",94,null],[11,"clear_oneofs","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"set_oneofs","","",94,{"inputs":[{"name":"self"},{"generics":["string"],"name":"repeatedfield"}],"output":null}],[11,"mut_oneofs","","",94,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_oneofs","","",94,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"repeatedfield"}}],[11,"get_oneofs","","",94,null],[11,"clear_options","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"set_options","","",94,{"inputs":[{"name":"self"},{"generics":["option"],"name":"repeatedfield"}],"output":null}],[11,"mut_options","","",94,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_options","","",94,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"repeatedfield"}}],[11,"get_options","","",94,null],[11,"clear_source_context","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"has_source_context","","",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_source_context","","",94,{"inputs":[{"name":"self"},{"name":"sourcecontext"}],"output":null}],[11,"mut_source_context","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"take_source_context","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"get_source_context","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"clear_syntax","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"set_syntax","","",94,{"inputs":[{"name":"self"},{"name":"syntax"}],"output":null}],[11,"get_syntax","","",94,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"is_initialized","","",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",94,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",94,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",94,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",94,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",94,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",94,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",94,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",94,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",94,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",94,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",94,{"inputs":[],"output":{"name":"type"}}],[11,"descriptor_static","","",94,{"inputs":[{"generics":["type"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"field"}}],[11,"new","","",95,{"inputs":[],"output":{"name":"field"}}],[11,"default_instance","","",95,{"inputs":[],"output":{"name":"field"}}],[11,"clear_kind","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_kind","","",95,{"inputs":[{"name":"self"},{"name":"field_kind"}],"output":null}],[11,"get_kind","","",95,{"inputs":[{"name":"self"}],"output":{"name":"field_kind"}}],[11,"clear_cardinality","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_cardinality","","",95,{"inputs":[{"name":"self"},{"name":"field_cardinality"}],"output":null}],[11,"get_cardinality","","",95,{"inputs":[{"name":"self"}],"output":{"name":"field_cardinality"}}],[11,"clear_number","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_number","","",95,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_number","","",95,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_name","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",95,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_type_url","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_type_url","","",95,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_type_url","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_type_url","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_type_url","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_oneof_index","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_oneof_index","","",95,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_oneof_index","","",95,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_packed","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_packed","","",95,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_packed","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_options","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_options","","",95,{"inputs":[{"name":"self"},{"generics":["option"],"name":"repeatedfield"}],"output":null}],[11,"mut_options","","",95,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_options","","",95,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"repeatedfield"}}],[11,"get_options","","",95,null],[11,"clear_json_name","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_json_name","","",95,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_json_name","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_json_name","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_json_name","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_default_value","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_default_value","","",95,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_default_value","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_default_value","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_default_value","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",95,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",95,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",95,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",95,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",95,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",95,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",95,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",95,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",95,{"inputs":[],"output":{"name":"field"}}],[11,"descriptor_static","","",95,{"inputs":[{"generics":["field"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",95,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"field_kind"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"field_kind"}],"output":{"name":"bool"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"value","","",110,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",110,{"inputs":[{"name":"i32"}],"output":{"generics":["field_kind"],"name":"option"}}],[11,"values","","",110,null],[11,"enum_descriptor_static","","",110,{"inputs":[{"generics":["field_kind"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"default","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",110,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"field_cardinality"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"field_cardinality"}],"output":{"name":"bool"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",111,null],[11,"value","","",111,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",111,{"inputs":[{"name":"i32"}],"output":{"generics":["field_cardinality"],"name":"option"}}],[11,"values","","",111,null],[11,"enum_descriptor_static","","",111,{"inputs":[{"generics":["field_cardinality"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"default","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",111,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"enum"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"enum"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"default","","",96,{"inputs":[],"output":{"name":"enum"}}],[11,"new","","",96,{"inputs":[],"output":{"name":"enum"}}],[11,"default_instance","","",96,{"inputs":[],"output":{"name":"enum"}}],[11,"clear_name","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",96,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",96,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",96,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",96,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_enumvalue","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"set_enumvalue","","",96,{"inputs":[{"name":"self"},{"generics":["enumvalue"],"name":"repeatedfield"}],"output":null}],[11,"mut_enumvalue","","",96,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_enumvalue","","",96,{"inputs":[{"name":"self"}],"output":{"generics":["enumvalue"],"name":"repeatedfield"}}],[11,"get_enumvalue","","",96,null],[11,"clear_options","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"set_options","","",96,{"inputs":[{"name":"self"},{"generics":["option"],"name":"repeatedfield"}],"output":null}],[11,"mut_options","","",96,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_options","","",96,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"repeatedfield"}}],[11,"get_options","","",96,null],[11,"clear_source_context","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"has_source_context","","",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_source_context","","",96,{"inputs":[{"name":"self"},{"name":"sourcecontext"}],"output":null}],[11,"mut_source_context","","",96,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"take_source_context","","",96,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"get_source_context","","",96,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"clear_syntax","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"set_syntax","","",96,{"inputs":[{"name":"self"},{"name":"syntax"}],"output":null}],[11,"get_syntax","","",96,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"is_initialized","","",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",96,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",96,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",96,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",96,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",96,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",96,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",96,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",96,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",96,{"inputs":[],"output":{"name":"enum"}}],[11,"descriptor_static","","",96,{"inputs":[{"generics":["enum"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",96,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"enumvalue"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"enumvalue"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"enumvalue"}}],[11,"default","","",97,{"inputs":[],"output":{"name":"enumvalue"}}],[11,"new","","",97,{"inputs":[],"output":{"name":"enumvalue"}}],[11,"default_instance","","",97,{"inputs":[],"output":{"name":"enumvalue"}}],[11,"clear_name","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",97,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",97,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",97,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_number","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"set_number","","",97,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_number","","",97,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_options","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"set_options","","",97,{"inputs":[{"name":"self"},{"generics":["option"],"name":"repeatedfield"}],"output":null}],[11,"mut_options","","",97,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_options","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"repeatedfield"}}],[11,"get_options","","",97,null],[11,"is_initialized","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",97,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",97,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",97,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",97,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",97,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",97,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",97,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",97,{"inputs":[],"output":{"name":"enumvalue"}}],[11,"descriptor_static","","",97,{"inputs":[{"generics":["enumvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"option"}}],[11,"new","","",98,{"inputs":[],"output":{"name":"option"}}],[11,"default_instance","","",98,{"inputs":[],"output":{"name":"option"}}],[11,"clear_name","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",98,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",98,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",98,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",98,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_value","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"has_value","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_value","","",98,{"inputs":[{"name":"self"},{"name":"any"}],"output":null}],[11,"mut_value","","",98,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"take_value","","",98,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"get_value","","",98,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"is_initialized","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",98,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",98,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",98,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",98,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",98,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",98,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",98,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",98,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",98,{"inputs":[],"output":{"name":"option"}}],[11,"descriptor_static","","",98,{"inputs":[{"generics":["option"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",98,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"syntax"}],"output":{"name":"bool"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",112,null],[11,"value","","",112,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",112,{"inputs":[{"name":"i32"}],"output":{"generics":["syntax"],"name":"option"}}],[11,"values","","",112,null],[11,"enum_descriptor_static","","",112,{"inputs":[{"generics":["syntax"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"default","","",112,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",112,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"doublevalue"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"doublevalue"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"doublevalue"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"doublevalue"}}],[11,"new","","",99,{"inputs":[],"output":{"name":"doublevalue"}}],[11,"default_instance","","",99,{"inputs":[],"output":{"name":"doublevalue"}}],[11,"clear_value","","",99,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",99,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"get_value","","",99,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"is_initialized","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",99,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",99,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",99,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",99,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",99,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",99,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",99,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",99,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",99,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",99,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",99,{"inputs":[],"output":{"name":"doublevalue"}}],[11,"descriptor_static","","",99,{"inputs":[{"generics":["doublevalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",99,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",99,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"floatvalue"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"floatvalue"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"floatvalue"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"floatvalue"}}],[11,"new","","",100,{"inputs":[],"output":{"name":"floatvalue"}}],[11,"default_instance","","",100,{"inputs":[],"output":{"name":"floatvalue"}}],[11,"clear_value","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",100,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"get_value","","",100,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"is_initialized","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",100,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",100,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",100,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",100,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",100,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",100,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",100,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",100,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",100,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",100,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",100,{"inputs":[],"output":{"name":"floatvalue"}}],[11,"descriptor_static","","",100,{"inputs":[{"generics":["floatvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",100,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"int64value"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"int64value"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"int64value"}}],[11,"default","","",101,{"inputs":[],"output":{"name":"int64value"}}],[11,"new","","",101,{"inputs":[],"output":{"name":"int64value"}}],[11,"default_instance","","",101,{"inputs":[],"output":{"name":"int64value"}}],[11,"clear_value","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",101,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_value","","",101,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_initialized","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",101,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",101,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",101,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",101,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",101,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",101,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",101,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",101,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",101,{"inputs":[],"output":{"name":"int64value"}}],[11,"descriptor_static","","",101,{"inputs":[{"generics":["int64value"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",101,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"uint64value"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"uint64value"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"uint64value"}}],[11,"default","","",102,{"inputs":[],"output":{"name":"uint64value"}}],[11,"new","","",102,{"inputs":[],"output":{"name":"uint64value"}}],[11,"default_instance","","",102,{"inputs":[],"output":{"name":"uint64value"}}],[11,"clear_value","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",102,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_value","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_initialized","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",102,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",102,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",102,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",102,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",102,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",102,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",102,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",102,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",102,{"inputs":[],"output":{"name":"uint64value"}}],[11,"descriptor_static","","",102,{"inputs":[{"generics":["uint64value"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",102,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"int32value"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"int32value"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"int32value"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"int32value"}}],[11,"new","","",103,{"inputs":[],"output":{"name":"int32value"}}],[11,"default_instance","","",103,{"inputs":[],"output":{"name":"int32value"}}],[11,"clear_value","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",103,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_value","","",103,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",103,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",103,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",103,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",103,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",103,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",103,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",103,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",103,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",103,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",103,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",103,{"inputs":[],"output":{"name":"int32value"}}],[11,"descriptor_static","","",103,{"inputs":[{"generics":["int32value"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",103,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"uint32value"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"uint32value"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"uint32value"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"uint32value"}}],[11,"new","","",104,{"inputs":[],"output":{"name":"uint32value"}}],[11,"default_instance","","",104,{"inputs":[],"output":{"name":"uint32value"}}],[11,"clear_value","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",104,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_value","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",104,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",104,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",104,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",104,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",104,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",104,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",104,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",104,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",104,{"inputs":[],"output":{"name":"uint32value"}}],[11,"descriptor_static","","",104,{"inputs":[{"generics":["uint32value"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",104,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"boolvalue"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"boolvalue"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"boolvalue"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"boolvalue"}}],[11,"new","","",105,{"inputs":[],"output":{"name":"boolvalue"}}],[11,"default_instance","","",105,{"inputs":[],"output":{"name":"boolvalue"}}],[11,"clear_value","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",105,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_value","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",105,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",105,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",105,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",105,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",105,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",105,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",105,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",105,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",105,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",105,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",105,{"inputs":[],"output":{"name":"boolvalue"}}],[11,"descriptor_static","","",105,{"inputs":[{"generics":["boolvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",105,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"stringvalue"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"stringvalue"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"stringvalue"}}],[11,"default","","",106,{"inputs":[],"output":{"name":"stringvalue"}}],[11,"new","","",106,{"inputs":[],"output":{"name":"stringvalue"}}],[11,"default_instance","","",106,{"inputs":[],"output":{"name":"stringvalue"}}],[11,"clear_value","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",106,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_value","","",106,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_value","","",106,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_value","","",106,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",106,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",106,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",106,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",106,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",106,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",106,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",106,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",106,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",106,{"inputs":[],"output":{"name":"stringvalue"}}],[11,"descriptor_static","","",106,{"inputs":[{"generics":["stringvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",106,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"bytesvalue"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"bytesvalue"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bytesvalue"}}],[11,"default","","",107,{"inputs":[],"output":{"name":"bytesvalue"}}],[11,"new","","",107,{"inputs":[],"output":{"name":"bytesvalue"}}],[11,"default_instance","","",107,{"inputs":[],"output":{"name":"bytesvalue"}}],[11,"clear_value","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",107,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_value","","",107,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_value","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_value","","",107,null],[11,"is_initialized","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",107,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",107,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",107,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",107,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",107,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",107,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",107,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",107,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",107,{"inputs":[],"output":{"name":"bytesvalue"}}],[11,"descriptor_static","","",107,{"inputs":[{"generics":["bytesvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",107,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"ext","protobuf","",null,null],[3,"ExtFieldOptional","protobuf::ext","Optional ext field",null,null],[12,"field_number","","",115,null],[12,"phantom","","",115,null],[3,"ExtFieldRepeated","","Repeated ext field",null,null],[12,"field_number","","",116,null],[12,"phantom","","",116,null],[11,"get","","",115,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"option"}}],[11,"get","","",116,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"vec"}}],[0,"hex","protobuf","",null,null],[5,"decode_hex","protobuf::hex","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"encode_hex","","",null,null],[0,"descriptorx","protobuf","",null,null],[3,"RootScope","protobuf::descriptorx","",null,null],[12,"file_descriptors","","",117,null],[3,"FileScope","","",null,null],[12,"file_descriptor","","",118,null],[3,"Scope","","",null,null],[12,"file_scope","","",119,null],[12,"path","","",119,null],[3,"MessageWithScope","","",null,null],[12,"scope","","",120,null],[12,"message","","",120,null],[3,"EnumWithScope","","",null,null],[12,"scope","","",121,null],[12,"en","","",121,null],[3,"FieldWithContext","","",null,null],[12,"field","","",122,null],[12,"message","","",122,null],[3,"OneofVariantWithContext","","",null,null],[12,"oneof","","",123,null],[12,"field","","",123,null],[3,"OneofWithContext","","",null,null],[12,"oneof","","",124,null],[12,"index","","",124,null],[12,"message","","",124,null],[4,"Syntax","","",null,null],[13,"PROTO2","","",125,null],[13,"PROTO3","","",125,null],[4,"MessageOrEnumWithScope","","",null,null],[13,"Message","","",126,null],[13,"Enum","","",126,null],[5,"proto_path_to_rust_mod","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"find_message_by_rust_name","","",null,{"inputs":[{"name":"filedescriptorproto"},{"name":"str"}],"output":{"name":"messagewithscope"}}],[5,"find_enum_by_rust_name","","",null,{"inputs":[{"name":"filedescriptorproto"},{"name":"str"}],"output":{"name":"enumwithscope"}}],[8,"WithScope","","",null,null],[10,"get_scope","","",127,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"get_file_descriptor","","",127,{"inputs":[{"name":"self"}],"output":{"name":"filedescriptorproto"}}],[10,"get_name","","",127,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"escape_prefix","","",127,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name_to_package","","",127,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rust_name","","",127,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rust_fq_name","","",127,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"EnumValueDescriptorEx","","",null,null],[10,"rust_name","","",128,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"find_enum","","",117,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"enumwithscope"}}],[11,"find_message","","",117,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"messagewithscope"}}],[11,"find_message_or_enum","","",117,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"messageorenumwithscope"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"syntax"}],"output":{"name":"bool"}}],[11,"parse","","",125,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"filescope"}}],[11,"syntax","","",118,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"to_scope","","",118,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"find_enums","","",118,{"inputs":[{"name":"self"}],"output":{"generics":["enumwithscope"],"name":"vec"}}],[11,"find_messages","","",118,{"inputs":[{"name":"self"}],"output":{"generics":["messagewithscope"],"name":"vec"}}],[11,"find_messages_and_enums","","",118,{"inputs":[{"name":"self"}],"output":{"generics":["messageorenumwithscope"],"name":"vec"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"get_file_descriptor","","",119,{"inputs":[{"name":"self"}],"output":{"name":"filedescriptorproto"}}],[11,"get_messages","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["messagewithscope"],"name":"vec"}}],[11,"get_enums","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["enumwithscope"],"name":"vec"}}],[11,"get_messages_and_enums","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["messageorenumwithscope"],"name":"vec"}}],[11,"prefix","","",119,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rust_prefix","","",119,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"messagewithscope"}}],[11,"get_scope","","",120,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"escape_prefix","","",120,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_name","","",120,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_scope","","",120,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"to_scope","","",120,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"fields","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["fieldwithcontext"],"name":"vec"}}],[11,"oneofs","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["oneofwithcontext"],"name":"vec"}}],[11,"oneof_by_index","","",120,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"oneofwithcontext"}}],[11,"map_entry","","Pair of (key, value) if this message is map entry",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"enumwithscope"}}],[11,"values","","",121,null],[11,"value_by_name","","",121,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"enumvaluedescriptorproto"}}],[11,"rust_name","protobuf::descriptor","",17,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_scope","protobuf::descriptorx","",121,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"escape_prefix","","",121,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_name","","",121,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_scope","","",126,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"escape_prefix","","",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_name","","",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"fieldwithcontext"}}],[11,"oneof","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["oneofwithcontext"],"name":"option"}}],[11,"number","","",122,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"name","","Shortcut",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rust_name","","",122,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"containing_messages","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["descriptorproto"],"name":"vec"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"oneofvariantwithcontext"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"oneofwithcontext"}}],[11,"name","","",124,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rust_name","","",124,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"variants","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["oneofvariantwithcontext"],"name":"vec"}}],[11,"fmt","protobuf","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"wire_type","","",2,{"inputs":[{"name":"self"}],"output":{"name":"wiretype"}}],[11,"get_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unknownvalueref"}}],[11,"wire_type","","",3,{"inputs":[{"name":"self"}],"output":{"name":"wiretype"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unknownvalues"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unknownvalues"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"unknownvalues"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"unknownvalues"}}],[11,"add_value","","",1,{"inputs":[{"name":"self"},{"name":"unknownvalue"}],"output":null}],[11,"iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unknownvaluesiter"}}],[11,"next","","",129,{"inputs":[{"name":"self"}],"output":{"generics":["unknownvalueref"],"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unknownfields"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unknownfields"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"unknownfields"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"unknownfields"}}],[11,"add_fixed32","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"add_fixed64","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u64"}],"output":null}],[11,"add_varint","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u64"}],"output":null}],[11,"add_length_delimited","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"add_value","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"unknownvalue"}],"output":null}],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unknownfieldsiter"}}],[11,"get","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unknownvalues"],"name":"option"}}],[11,"clear","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",131,{"inputs":[],"output":{"name":"cachedsize"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"cachedsize"}}],[11,"get","","",131,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set","","",131,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"cachedsize"}],"output":{"name":"bool"}}],[11,"as_any","protobuf::reflect","",53,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"is_non_zero","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref_copy","","",53,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}]],"paths":[[3,"UnknownFields"],[3,"UnknownValues"],[4,"UnknownValue"],[4,"UnknownValueRef"],[4,"FieldDescriptorProto_Type"],[4,"FieldDescriptorProto_Label"],[4,"FileOptions_OptimizeMode"],[4,"FieldOptions_CType"],[4,"FieldOptions_JSType"],[3,"FileDescriptorSet"],[3,"FileDescriptorProto"],[3,"DescriptorProto"],[3,"DescriptorProto_ExtensionRange"],[3,"DescriptorProto_ReservedRange"],[3,"FieldDescriptorProto"],[3,"OneofDescriptorProto"],[3,"EnumDescriptorProto"],[3,"EnumValueDescriptorProto"],[3,"ServiceDescriptorProto"],[3,"MethodDescriptorProto"],[3,"FileOptions"],[3,"MessageOptions"],[3,"FieldOptions"],[3,"OneofOptions"],[3,"EnumOptions"],[3,"EnumValueOptions"],[3,"ServiceOptions"],[3,"MethodOptions"],[3,"UninterpretedOption"],[3,"UninterpretedOption_NamePart"],[3,"SourceCodeInfo"],[3,"SourceCodeInfo_Location"],[3,"GeneratedCodeInfo"],[3,"GeneratedCodeInfo_Annotation"],[3,"CodeGeneratorRequest"],[3,"CodeGeneratorResponse"],[3,"CodeGeneratorResponse_File"],[8,"Message"],[8,"MessageStatic"],[8,"ProtobufEnum"],[8,"ProtobufVarint"],[8,"ProtobufVarintZigzag"],[3,"Lazy"],[4,"Visibility"],[3,"CodeWriter"],[3,"GenResult"],[3,"RepeatedField"],[3,"SingularField"],[3,"SingularPtrField"],[8,"Clear"],[4,"ProtobufValueRef"],[4,"ReflectFieldRef"],[8,"FieldAccessor"],[8,"ProtobufValue"],[3,"FieldDescriptor"],[3,"MessageDescriptor"],[3,"EnumValueDescriptor"],[3,"EnumDescriptor"],[4,"WireType"],[3,"Tag"],[8,"WithCodedOutputStream"],[8,"WithCodedInputStream"],[3,"CodedInputStream"],[3,"CodedOutputStream"],[4,"WireError"],[4,"ProtobufError"],[8,"ProtobufType"],[3,"ProtobufTypeFloat"],[3,"ProtobufTypeDouble"],[3,"ProtobufTypeInt32"],[3,"ProtobufTypeInt64"],[3,"ProtobufTypeUint32"],[3,"ProtobufTypeUint64"],[3,"ProtobufTypeSint32"],[3,"ProtobufTypeSint64"],[3,"ProtobufTypeFixed32"],[3,"ProtobufTypeFixed64"],[3,"ProtobufTypeSfixed32"],[3,"ProtobufTypeSfixed64"],[3,"ProtobufTypeBool"],[3,"ProtobufTypeString"],[3,"ProtobufTypeBytes"],[3,"ProtobufTypeEnum"],[3,"ProtobufTypeMessage"],[3,"Any"],[3,"Api"],[3,"Method"],[3,"Mixin"],[3,"Duration"],[3,"FieldMask"],[3,"SourceContext"],[3,"Struct"],[3,"ListValue"],[3,"Timestamp"],[3,"Type"],[3,"Field"],[3,"Enum"],[3,"EnumValue"],[3,"Option"],[3,"DoubleValue"],[3,"FloatValue"],[3,"Int64Value"],[3,"UInt64Value"],[3,"Int32Value"],[3,"UInt32Value"],[3,"BoolValue"],[3,"StringValue"],[3,"BytesValue"],[4,"Value_oneof_kind"],[4,"NullValue"],[4,"Field_Kind"],[4,"Field_Cardinality"],[4,"Syntax"],[3,"Empty"],[3,"Value"],[3,"ExtFieldOptional"],[3,"ExtFieldRepeated"],[3,"RootScope"],[3,"FileScope"],[3,"Scope"],[3,"MessageWithScope"],[3,"EnumWithScope"],[3,"FieldWithContext"],[3,"OneofVariantWithContext"],[3,"OneofWithContext"],[4,"Syntax"],[4,"MessageOrEnumWithScope"],[8,"WithScope"],[8,"EnumValueDescriptorEx"],[3,"UnknownValuesIter"],[3,"UnknownFieldsIter"],[3,"CachedSize"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from a finite iterator. The order of elements in the sample is not random.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"generics":["osrng"],"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"generics":["stdrng"],"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is heavily based on RE2 both in syntax and in implementation. Notably, backreferences and arbitrary lookahead/lookbehind assertions are not provided. In return, regular expression searching provided by this package has excellent worst-case performance. The specific syntax supported is documented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[13,"InvalidSet","","DEPRECATED: Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"fmt","regex","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",6,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original byte string matched.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","regex","",16,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",17,null],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",20,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",21,null],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",24,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["captures"],"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",24,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"generics":["str"],"name":"cow"}}],[11,"no_expand","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["str"],"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match corresponding to the `caps` capture group.",34,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"generics":["str"],"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for regular expressions. The abstract syntax is defined by the `Expr` type. The concrete syntax is enumerated in the `regex` crate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word character on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word characters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes or grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the least).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings. e.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once. e.g., `(?P<a>.)(?P<a>.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence. e.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the range is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not allowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal sequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be repeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes. This never returned if the parser is permitted to allow expressions that match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty. e.g., `[^\\d\\D]`.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"min_len","","Returns the length of the smallest literal.",5,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["literals"],"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"repeater"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"classrange"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"byterange"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"exprbuilder"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["expr"],"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"generics":["expr"],"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the end of the text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions that can match arbitrary bytes.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["classrange"],"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"generics":["classrange"],"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"negate","","Negates the character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"generics":["byterange"],"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"negate","","Negates the byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["byterange"],"name":"intoiter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"position","","Returns an approximate character offset at which the error occurred.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",10,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"generics":["vec","frombase64error"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"generics":["vec","fromhexerror"],"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"generics":["stackelement"],"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["jsonevent"],"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["json","parsererror"],"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["vec"],"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["slab"] = {"doc":"","items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"SlabIter","","",null,null],[3,"SlabMutIter","","",null,null],[8,"Index","","Slab can be indexed by any type implementing `Index` trait.",null,null],[10,"from_usize","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"as_usize","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"slab"}}],[11,"new_starting_at","","",1,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"slab"}}],[11,"count","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_remaining","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"get","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"insert","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"insert_with","","Like `insert` but for objects that require newly allocated usize in their constructor.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"remove","","Releases the given slot",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"replace","","",1,{"inputs":[{"name":"self"},{"name":"i"},{"name":"t"}],"output":{"name":"option"}}],[11,"replace_with","","Execute a function on the value in the slot and put the result of the function back into the slot. If function returns None, slot is left empty on exit.",1,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":{"name":"result"}}],[11,"retain","","Retain only the elements specified by the predicate.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"slabiter"}}],[11,"iter_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"slabmutiter"}}],[11,"clear","","Empty the slab, by freeing all entries",1,{"inputs":[{"name":"self"}],"output":null}],[11,"grow","","Grow the slab, by adding `entries_num`",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Index"],[3,"Slab"],[3,"SlabIter"],[3,"SlabMutIter"]]};
searchIndex["stun"] = {"doc":"","items":[[3,"XorMappedAddress","stun","",null,null],[12,"0","","",0,null],[3,"Message","","",null,null],[12,"attributes","","",1,null],[3,"Client","","",null,null],[4,"MessageClass","","",null,null],[13,"Request","","",2,null],[13,"Indication","","",2,null],[13,"SuccessResponse","","",2,null],[13,"FailureResponse","","",2,null],[4,"MessageMethod","","",null,null],[13,"Binding","","",3,null],[4,"Attribute","","",null,null],[13,"MappedAddress","","",4,null],[13,"Username","","",4,null],[13,"MessageIntegrity","","",4,null],[13,"ErrorCode","","",4,null],[13,"UnknownAttributes","","",4,null],[13,"Realm","","",4,null],[13,"Nonce","","",4,null],[13,"XorMappedAddress","","",4,null],[4,"IpVersion","","",null,null],[13,"V4","","",5,null],[13,"V6","","",5,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"messageclass"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"messageclass"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"messagemethod"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"messagemethod"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"request","","",1,{"inputs":[],"output":{"name":"message"}}],[11,"decode","","",1,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"message"}}],[11,"encode","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"new","","",6,{"inputs":[{"name":"t"},{"name":"u16"},{"name":"ipversion"}],"output":{"name":"client"}}],[11,"send","","",6,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"generics":["u8"],"name":"vec"}}]],"paths":[[3,"XorMappedAddress"],[3,"Message"],[4,"MessageClass"],[4,"MessageMethod"],[4,"Attribute"],[4,"IpVersion"],[3,"Client"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["tm","parseerror"],"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"generics":["stdduration","outofrangeerror"],"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["tmfmt","parseerror"],"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["ws2_32"] = {"doc":"","items":[],"paths":[]};
initSearch(searchIndex);
