// Types

message UdpTransport {
    required bytes ip_address = 1;
    required uint32 port = 2;
}

message Transport {
    enum Type {
        UDP = 1;
    }
    required Type transport_type = 1;
    optional UdpTransport udp_transport = 2;
}

message Node {
    required string id = 1;
    repeated Transport transports = 2;
}

// Messages

message FindNodeQuery {
    required Node origin = 1;  // Querying node
    required string target = 2;
}

message FindNodeResponse {
    required Node origin = 1; // Responding node
    repeated Node nodes = 2;
}

message PingQuery {
    required Node origin = 1;  // Querying node
}

message PingResponse {
    required Node origin = 1; // Responding node
}

message PacketQuery {
    required Node origin = 1;
    required bytes payload = 2;
}

message PacketResponse {
    required Node origin = 1;
}

// Wrapper

message Envelope {
    enum Type {
        FIND_NODE_QUERY = 1;
        FIND_NODE_RESPONSE = 2;
        PING_QUERY = 3;
        PING_RESPONSE = 4;
        PACKET_QUERY = 5;
        PACKET_RESPONSE = 6;
    }
    required Type message_type = 1;
    required uint32 transaction_id = 2;

    // Replace these with Any type
    optional FindNodeQuery find_node_query = 3;
    optional FindNodeResponse find_node_response = 4;
    optional PingQuery ping_query = 5;
    optional PingResponse ping_response = 6;
    optional PacketQuery packet_query = 7;
    optional PacketResponse packet_response = 8;
}
